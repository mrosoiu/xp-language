Das XP-Framework: Das Framework up-to-date halten und erweitern
======================================================================
$Id$

***TODO***

Core-Erweiterungen:
-------------------
Core-Erweiterungen gehören in Unterverzeichnisse von skeleton/ - was
nach "Collections" sortiert ist:

gui     GUI-Erweiterungen, bspw. GTK-Anwendungen
io      Input-Output-Funktionalitäten, bspw. Dateien und Order
lang    Core-Elemente, bspw. Object, System und Exception
net     Alles, was via Netzwerk funktioniert, bspw. HTTPConnection
rdbms   Datenbanken-Implementationen
util    Utilities, bspw. Logger, Datum, Kommandozeilen-Argumente, Properties
xml     XML-Klassen, bspw. XMLParser, XSL-Prozessoren, SOAP etc.

Eigene Erweiterungen:
---------------------
Eigene spezialisierte Erweiterungen sollen nach folgendem Prinzip 
in Unterverzeichnissen angelegt werden:

skeleton/<tld>/<domainname>[/<subdomainname>]

Also, Schlund+Partner (http://schlund.de/)-spezifisches gehört demzufolge
nach skeleton/de/schlund/.

Das entspricht dem Java-Prinzip.

Installation und Upgrade:
-------------------------
Alle Collections werden auf einem Collection-Server gehalten. Von dort
aus können die Collections synchronisiert werden. Jede Collection muss
diesem Server bekannt gemacht werden (siehe unten, Punkt 5).
Im collections-Verzeichnis des XP-Frameworks liegt:

- Das Makefile
- Die Synchronisierungs-Konfiguration

Für das Makefile gilt:

0.) Collection-Informationen synchronisiern
    - make sync [config=<config_file>]
      Synchronisiert das collections/ Verzeichnis mit dem Collection-Server
      Als Konfiguration soll das Property-File <config_file> genommen
      werden. Dieses defaultet nach "sync.ini".

1.) Suchen und Finden
    - make search name=<collection_name>
      Sucht die Collection mit dem Namen <collection_name>
    
    - make search key=<keyword>
      Sucht in allen Collections nach dem Schlüsselwort <keyword>
    
2.) Installierte Collections sehen:
    - make list
      Zeigt alle installierten Collections und Ihre Versionen
      
    - make info name=<collection_name>
      Zeigt ausführliche Informationen zur installierten
      Collection mit dem Namen <collection_name> an
      
3.) Installieren, Updaten und Deinstallieren
    - make install collection=<collection_name>
      Installiert die Collection mit dem Namen <collection_name>
      
    - make deinstall collection=<collection_name>
      Deinstalliert die Collection mit dem Namen <collection_name>
      
    - make upgrade collection=<collection_name> [version=<version_number>]
      Upgraded die Collection mit dem Namen <collection_name>.
      Wird eine Versionsnummer definiert, so wird explizit diese
      Version installiert, ansonsten die neueste
      
    - make check collection=<collection_name>
      Checkt die Collection mit dem Namen <collection_name> auf 
      verfügbare Updates

4.) Eigene Collection anlegen
    - make create name=<collection_name> [experimental=yes]
      Legt die Collection mit dem Namen <collection_name> an. Wird 
      experimental=yes definiert, so ist die Collection als unstable
      markiert
      Legt auch die Dateien collection.ini, CREDITS, TODO, README und
      NEWS an.
      
5.) Eigene Collection bekanntmachen oder updaten[*]:
    - make publish name=<collection_name> [config=<config_file>]
      Macht die Collection mit dem Namen <collection_name> dem 
      Collection-Server bekannt
      Als Konfiguration soll das Property-File <config_file> genommen
      werden. Dieses defaultet nach "sync.ini".

6.) Eigene Collection löschen[*]:
    - make remove name=<collection_name> [config=<config_file>]
      Löscht die Collection mit dem Namen <collection_name> vom
      Collection-Server.
      Als Konfiguration soll das Property-File <config_file> genommen
      werden. Dieses defaultet nach "sync.ini".

* Ein Account ist notwendig

Die Synchronisierungs-Konfiguration sieht bspw.: wie folgt aus:
<sync.ini>
[server]
; Remote server name
hostname="xp.php3.de"
; Base dir on server
remote_base="/"
; Compressed? php must be compiled with --with-zlib to use this feature
compressed="yes"

[account]
; Username
name="friebe"
; Password
pass="eac0d4f681d6b8577c458f2d7b295f59"

[sync]
; Synchronize what? Regexes seperated by |
collections="info.friebe|de.*"

[notify]
; Verbosity-Level of output, values seperated by |, allowed: warn, info, debug and error
verbosity="error|warn"
; Method, supported: mail [send email], log [write to file]
method="mail://friebe@php3.de"
; What to include in report, values seperated by |, allowed: are all, added, updated, removed
; Optionally, regexes of collections can be specified behind a colon
; to narrow in on the collections
report="updated|deleted:de.thekid|added:.*"
; Details to include for each of the reported collections
; Values allowed are: provides, credits, todo, readme, news    
details="news"
</sync.ini>

Existiert die Sektion "account" nicht, so ist kein Hinzufügen, Bearbeiten oder Löschen
von Collections möglich.

Eigene Collections: Ein Beispiel:
---------------------------------
Damit die Installation und das Upgrade funktionieren, soll in dem Basis-
Verzeichnis einer Collection ein Property-File liegen, welches folgendes
Format hat (am Beispiel am einfachsten zu erkennen):

<collection.ini>
[collection]
distname="schlund"
name="Schlund+Partner Collection"
version=1.0
experimental=no

[maintainers]
list="friebe|kiesel"
name.friebe="Timm Friebe"
email.friebe="friebe@php3.de"
site.friebe="http://thekid.de/"
name.kiesel="Alex Kiesel"
email.kiesel="kiesel@php3.de"
site.kiesel="http://alexkiesel.de/"

[distribution]
site.0="http://xp.schlund.de/collections/"
site.1="ftp://anonymous:foo@baz.de/collections/"
site.2="cvs://pserver/cvs:cvsread@foo.bar/repository?module"
site.3="cvs://ext/adminphp@cvs/home/cvs/repositories?module"

[dependencies]
depend.0="org.apache:=1.0"
depend.1="info.friebe:>1.0"
depend.2="de.thekid:~:0.9,1.1"
depend.3="info.binford6100"
</collection.ini>

Wenn die Collection per make publish veröffentlicht wird, so wird
(mindestens) diese Datei auf den Collections-Server kopiert. Existieren
die unter "Dokumentation für Entwickler" genannten Dateien, so werden
sie mitkopiert.

Bei der Methode "cvs" werden nur Dateien geupdatet, die als STABLE 
markiert sind (siehe README.CVS).

Unter dependencies stehen die Abhängigkeiten einer Collection. Folgender
Syntax ist für die Versionierung erlaubt:

<collection_name>[":"<compare>(<version>|<version>","<version>]

<collection_name>  Name der Collection

<compare>          Versionsvergleich: <, >, = oder ~
                   < Kleiner
                   > Größer
                   = Gleich
                   ~ Zwischen
                   
<version>          Versionsnummer
                   Wenn <compare> "~" ist, so sind zwei Versionsnummern
                   anzugeben, zwischen denen die Version der Dependency
                   liegen muss

Dokumentation für Entwickler:
-----------------------------
In dem Stammverzeichnis einer Collection können folgende Dateien angelegt
werden, die automatisch für die Dokumentation verwendet werden:

PROVIDES        Was diese Collection bereitstellt
CREDITS         Wer an der Entwicklung beteiligt ist
TODO            Was noch zu tun ist
README          Wichtige Informationen, die zuerst zu lesen sind
NEWS            Änderungen an einer Collection

Diese Dateien sollen als Plain-Text vorliegen.

Templates:
----------
Im Verzeichnis "template" befinden sich drei Klassen-Templates, die den
häufigsten Verwendungszwecken gerecht werden:

Class.class.php
SingleTonClass.class.php
StaticClass.class.php

Folgende Platzhalter werden verwendet:

%Description%   Beschreibung der Klasse
%Purpose%       Verwendungszweck (Kurzbeschreibung)
%See%           Verweis
%Class%         Klassenname

Über das Makefile können neue Klassen einfach erstellt werden:
make class \
  target="util" \
  name="Binford" \
  [template="Class"] \
  [descr="Diese Klasse läuft mit Benzin"] \
  [see="http://binford.com/"] \
  [purpose="Eine Binford-Implementation"]
  
Hier würde eine Klasse Binford.class.php in skeleton/util/ angelegt, die 
folgendermaßen aussieht:

<?php
/* Diese Klasse ist Bestandteil des XP-Frameworks
 *
 * $Id$
 */

  /**
   * Diese Klasse läuft mit Benzin
   * 
   * @purpose Eine Binford-Implementation
   * @see     http://binford.com/
   */
  class Binford extends Object {

  }
?>

<EOF>
