Das XP-Framework: GUIs mit PHP-GTK
======================================================================
$Id$

Was ist GTK?:
-------------
GTK steht für "Gimp Tool Kit" und wurde für die Entwicklung diese Open-
Source-Grafikprogrammes entwickelt.

Siehe:
- http://gtk.org/
- http://gimp.org/

GTK ist für Unixoide Systeme sowie auch für Windows, MacOS X (was ja 
eigentlich auch ein Unixoides System ist) und sogar BeOS verfügbar.

Am besten, man schaut sich mal:
- http://www.gnome.org/seegnome.html
- http://www.gimp.org/the_gimp_screenshots.html
- http://gtk.themes.org/
an, um eine Idee davon zu bekommen.

Language Bindings:
------------------
Für GTK gibt es sog. "Bindings" in vielen verschiedenen Programmiersprachen,
und seit dem 1. März 2001 auch für PHP (http://gtk.php.net/changelog.php).

In PHP gibt es für jedes GTK-Objekt eine Wrapper-Klasse, die Programmierung
ist also objektorientiert. Eine hilfreiche Anleitung findet sich unter
http://gtk.php.net/manual/de/introduction.php.

Integration in das XP-Framework:
--------------------------------
Im XP-Framework gibt es eine Basisklasse, die eine GTK-Anwendung abbildet.
Die Anwendung dieser Klasse ist am einfachsten anhande eines Beispiels
demonstriert:

<?php
  require('lang.base.php');
  uses('gui.gtk.GTKApplication');

  $app= &new GTKApplication('Hello World');
  $app->init();
  $app->run();
  $app->done();
?>

Mit fünf Zeilen PHP ist also bereits eine GUI geschrieben.

Eigene Anwendungen:
-------------------
Nun "kann" aber die oben genannte Anwendung erstmal gar nichts. Sie 
besteht, wenn ausgeführt, aus einem Fenster, was keine Elemente 
enthält und sich lediglich wieder schließen lässt.

Die Erweiterung der Anwendung ist über Vererbung der GTKApplication-
Klasse realisiert. Auch hier ist sicherlich ein Beispiel die beste
Dokumentation:

<?php
  require('lang.base.php');
  uses('gui.gtk.GTKApplication');
  
  class MyApp extends GTKApplication {
  
    function init() {
      parent::init();
      $button= &new GTKButton('OK');
      $button->show();
      $button->connect('clicked', array(&$this, 'done'));
      $this->window->add($button);
    }
  
  }

  $app= &new MyApp('Hello World');
  $app->init();
  $app->run();
  $app->done();
?>

Diese Anwendung hat also nun einen Button, der, wenn angeklickt, die
Anwendung beendet.

Glade:
------
Glade ist ein Interface-Designer, wie man es vielleicht von Visual C++,
Delphi, dem Dialogeditor aus Word und ähnlich Werkzeugen kennt. 
Glade nimmt einem die Arbeit ab, die gesamte Oberfläche im Code zu 
beschreiben.

Siehe: 
- http://glade.gnome.org/
- http://glade.gnome.org/screenshots.html
- http://glade.gnome.org/features.html

Glade generiert XML-Dateien, welche von der Glade-Library wieder zu 
GTK-Widgets umgewandelt werden können. Im XP-Framework geschieht das 
über die GTKGladeApplication-Klasse wie folgt:

<?php
  require('lang.base.php');
  uses('gui.gtk.GTKGladeApplication');
  
  $app= &new GTKGladeApplication(
    'Hello World', 
    dirname(__FILE__).'/xp-gtk.3.glade'
  );
  $app->init();
  $app->run();
  $app->done();
?>

Das Beispiel mit dem Button ist nun ein Stück einfacher geworden:
<?php
  require('lang.base.php');
  uses('gui.gtk.GTKGladeApplication');
  
  class MyApp extends GTKGladeApplication {
    
    function init() {
      parent::init();
      $button= &$this->widget('button1');
      $button->connect('clicked', array(&$this, 'done'));
    }
  }
  
  $app= &new MyApp('Hello World', dirname(__FILE__).'/xp-gtk.4.glade');
  $app->init();
  $app->run();
  $app->done();
?>

Interface der GTKApplication-Klasse:
------------------------------------
Properties:
- public string name            Der Name der Anwendung
- public GTKWindow window       Das Anwendungsfenster
- public string rcFile          Dateiname der .gtkrc-Files

Methoden:
- public GTKApplication __construct(string name)
  Der Konstruktor, übergeben wird der Name der Anwendung
  
- public void init()
  Initialisiert die Anwendung und zeigt das Fenster an
  
- public void log(mixed param [, mixed param [, mixed param [,...]]])
  Schreibt Debug auf die Konsole
  
- public void run()
  Führt die Anwendung aus (Aufruf von Gtk::main)
  
- public void done()
  Beendet die Anwendung (Aufruf von Gtk::main_quit)

Interface der GTKGladeApplication-Klasse:
-----------------------------------------
Properties (+ zeigt von GTKApplication vererbte an):
+ public string name            Der Name der Anwendung
+ public GTKWindow window       Das Anwendungsfenster
+ public string rcFile          Dateiname der .gtkrc-Files
- public GladeXML glade         Das Glade-Handle
- public string gladeFile       Dateiname der Glade-Datei
- public string windowWidget    Name des Haupt-Fenster-Widgets 

Methoden:
- public GTKGladeApplication __construct(string name, string gladeFile [, string windowWidget])
  Der Konstruktor, übergeben wird der Name der Anwendung,
  der Dateiname des Glade-Files und optional der Name des Haupt-Fenster-
  Widgets, welches auf "window1" defaultet
  
- public void init()
  Initialisiert die Anwendung und zeigt das Fenster an
  
- public void log(mixed param [, mixed param [, mixed param [,...]]])
  Schreibt Debug auf die Konsole
  
- public void run()
  Führt die Anwendung aus (Aufruf von Gtk::main)
  
- public void done()
  Beendet die Anwendung (Aufruf von Gtk::main_quit)

- public GTKWidget widget(string name)
  Gibt das korrespondierende Widget aus dem Glade-Container zurück

Anmerkungen:
------------
- Alle Beispiele finden sich in EXAMPLES.GTK
- Eine Installationsanleting findet sich in INSTALL.GTK

<EOF>
