RFC 0007: Hotswap technology
========================================================================
$Id$

@authors: friebe
@created: Sun Nov 16 19:06:40 CET 2003
@status: draft
@category: <core>

Scope of Change
---------------
A mechanism will be introduced which will allow for replacing classes
at run-time.

Rationale
---------
Within a long-running application, it should be possible to exchange 
functionality of a class at run-time without having to restart the 
application. Examples are Daemons, GTK applications and a to-be-written
Debugger.

Functionality
-------------
There are two possible implementations:

1) Using fork()
   Child processes may load the same class simultaneously if it hasn't
   been loaded by the parent already. This has been proven by the 
   classversioning experiment (URL below).
   
   In this case, the main program would simply be forked from the 
   beginning on and once hotswapping was activated, a new child forked
   which would load the new classes. As soon as all references to the
   old class have been destroyed, the old class could be unloaded by
   terminating the child process it existed in.
   
   Downside: Problems with inter-process communication (solve via 
   shared memory), unavailability on Windows.

2) Zend Engine functionality
   Using the Zend Engine's internal functionality a class recompilation
   could be forced. Maybe, this could even be achieved in an extension.
   
   A solution could be as simple as this syntax:
   <?php
     include('foo.class.php');
     // [... Use the class from foo.php ...]
     
     recompile('foo.class.php');
     // [... Use the changed class from foo.php ...]
   ?>
   
   Downside: Have an extra extension or convince the PHP folks that
   this is needed as core functionality:)

Dependencies
------------
fork()?
Zend Engine / extension functionality?

Related documents
-----------------
http://java.sun.com/products/hotspot/docs/whitepaper/Java_Hotspot_v1.4.1/Java_HSpot_WP_v1.4.1_1002_3.html#hot
http://experiments.xp-framework.net/?people,friebe,classversioning

<EOF>
