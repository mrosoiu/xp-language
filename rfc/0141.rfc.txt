RFC 0141: FTP Transfer listening
========================================================================
$Id$

@authors: friebe
@created: Sun Oct 21 12:23:12     2007
@status: draft
@category: peer.ftp

Scope of Change
---------------
There will be a way to monitor FTP transfers.


Rationale
---------
To be able to redraw the application UI and/or update a progressbar.


Functionality
-------------

Current functionality
~~~~~~~~~~~~~~~~~~~~~
<?php
  // Uploading
  $c->rootDir()->file($filename)->uploadFrom(new FileInputStream(new File($local)));
 
  // Downloading
  $c->rootDir()->getFile($filename)->downloadTo(new FileOutputStream(new File($local)));
?>
Both of these methods are blocking, that is, they will not return until
the transfer has been completed.

Transfer class
~~~~~~~~~~~~~~
<?php
  class FtpTransfer extends Object {

    /**
     * Returns the origin of this transfer
     *
     * @return  string
     */
    public function origin() {
      // ...
    }
    
    /**
     * Returns the target of this transfer
     *
     * @return  string
     */
    public function target() {
      // ...
    }
    
    /**
     * Aborts this transfer
     *
     */
    public function abort() {
      // ...
    }
  }
?>

Listener interface
~~~~~~~~~~~~~~~~~~
There will be a new interface, peer.ftp.FtpTransferListener:
<?php
  interface FtpTransferListener {
  
    /**
     * Called when a transfer is started
     *
     * @param   peer.ftp.FtpTransfer transfer
     */
    public function started(FtpTransfer $transfer);

    /**
     * Called while transferring
     *
     * @param   peer.ftp.FtpTransfer transfer
     * @param   int bytes
     */
    public function transferred(FtpTransfer $transfer, $bytes);

    /**
     * Called when a transfer has been completed.
     *
     * @param   peer.ftp.FtpTransfer transfer
     */
    public function completed(FtpTransfer $transfer);

    /**
     * Called when a transfer has been aborted
     *
     * @param   peer.ftp.FtpTransfer transfer
     */
    public function aborted(FtpTransfer $transfer);

    /**
     * Called when a transfer fails
     *
     * @param   peer.ftp.FtpTransfer transfer
     * @param   lang.XPException cause
     */
    public function failed(FtpTransfer $transfer, XPException $cause);
  
  }
?>

With listeners
~~~~~~~~~~~~~~
<?php
  $listener= newinstance('peer.ftp.FtpTransferListener', array(), '{
    public function started(FtpTransfer $transfer) {
      Console::write("Started ", $transfer, " [");
    }
    
    public function transferred(FtpTransfer $transfer, $bytes) {
      Console::write(".");
    }

    public function completed(FtpTransfer $transfer) {
      Console::writeLine("] completed");
    }
    
    public function aborted(FtpTransfer $transfer) {
      Console::writeLine("] aborted");
    }

    public function failed(FtpTransfer $transfer, XPException $cause) {
      Console::writeLine("] failed (", $cause->compoundMessage(), ")");
    }
  }');
  
  // Uploading
  $c->rootDir()->file($filename)->uploadFrom(
    new FileInputStream(new File($local)),
    $listener
  );
 
  // Downloading
  $c->rootDir()->getFile($filename)->downloadTo(
    new FileOutputStream(new File($local)),
    $listener
  );
?>


Security considerations
-----------------------
n/a


Speed impact
------------
n/a


Dependencies
------------
n/a


Related documents
-----------------
n/a


Comments
--------
n/a


<EOF>
