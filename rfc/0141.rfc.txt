RFC 0141: FTP Transfer listening
========================================================================
$Id$

@authors: friebe
@created: Sun Oct 21 12:23:12     2007
@status: discussion, ends Mon Nov  5 18:18:18     2007
@category: peer.ftp

Scope of Change
---------------
There will be a way to monitor FTP transfers.


Rationale
---------
To be able to redraw the application UI and/or update a progressbar.


Functionality
-------------

Current functionality
~~~~~~~~~~~~~~~~~~~~~
<?php
  // Uploading
  $c->rootDir()->file($filename)->uploadFrom(new FileInputStream(new File($local)));
 
  // Downloading
  $c->rootDir()->getFile($filename)->downloadTo(new FileOutputStream(new File($local)));
?>
Both of these methods are blocking, that is, they will not return until
the transfer has been completed.

Transfer classes
~~~~~~~~~~~~~~~~
There will be transfer classes representing up- and downloads:
<pre>
lang.Object
|
`-+ peer.ftp.FtpTransfer
  |
  |-+ peer.ftp.FtpUpload
  |
  `-+ peer.ftp.FtpDownload
</pre>
The FtpTransfer base class is declared as follows:
<?php
  abstract class FtpTransfer extends Object {
 
    /**
     * Sets the remote file
     *
     * @param   peer.ftp.FtpFile remote
     */
    public function setRemote(FtpFile $remote) {
      // ...
    }
 
    /**
     * Returns the remote file
     *
     * @return  peer.ftp.FtpFile
     */
    public function getRemote() {
      // ...
    }
 
    /**
     * Returns the remote file
     *
     * @return  peer.ftp.FtpTransferListener l
     * @return  peer.ftp.FtpTransfer this transfer object
     */
    public function withListener(FtpTransferListener $l= NULL) {
      // ...
    }
 
    /**
     * Aborts this transfer
     *
     */
    public function abort() {
      // ...
    }
 
    /**
     * Returns whether this transfer has been aborted
     *
     * @return  bool
     */
    public function aborted() {
      // ...
    }
 
    /**
     * Retrieves this transfer's total size
     *
     * @param   int size
     */
    public function size() {
      // ...
    }
 
    /**
     * Retrieves how many bytes have already been transferred
     *
     * @param   int size
     */
    public function transferred() {
      // ...
    }
 
    /**
     * Starts this transfer
     *
     * @param   int mode
     * @return  peer.ftp.FtpTransfer this
     */
    public function start($mode) {
      // ...
    }
 
    /**
     * Returns whether this transfer is complete
     *
     * @return  bool TRUE if this transfer is complete, FALSE otherwiese
     */
    public function complete() {
      // ...
    }
 
    /**
     * Continues this transfer
     *
     * @throws  peer.SocketException in case this transfer fails
     * @throws  lang.IllegalStateException in case start() has not been called before
     */
    public function perform() {
      // ...
    }
  }
?>

Listener interface
~~~~~~~~~~~~~~~~~~
There will be a new interface, peer.ftp.FtpTransferListener:
<?php
  interface FtpTransferListener {
  
    /**
     * Called when a transfer is started
     *
     * @param   peer.ftp.FtpTransfer transfer
     */
    public function started(FtpTransfer $transfer);

    /**
     * Called while transferring
     *
     * @param   peer.ftp.FtpTransfer transfer
     */
    public function transferred(FtpTransfer $transfer);

    /**
     * Called when a transfer has been completed.
     *
     * @param   peer.ftp.FtpTransfer transfer
     */
    public function completed(FtpTransfer $transfer);

    /**
     * Called when a transfer has been aborted
     *
     * @param   peer.ftp.FtpTransfer transfer
     */
    public function aborted(FtpTransfer $transfer);

    /**
     * Called when a transfer fails
     *
     * @param   peer.ftp.FtpTransfer transfer
     * @param   lang.XPException cause
     */
    public function failed(FtpTransfer $transfer, XPException $cause);
  
  }
?>

With listeners
~~~~~~~~~~~~~~
<?php
  $listener= newinstance('peer.ftp.FtpTransferListener', array(), '{
    public function started(FtpTransfer $transfer) {
      Console::write($transfer, "\n  [");
    }
    
    public function transferred(FtpTransfer $transfer, $bytes, $size) {
      Console::write(".");
    }

    public function completed(FtpTransfer $transfer) {
      Console::writeLine("]\nCompleted");
    }
    
    public function aborted(FtpTransfer $transfer) {
      Console::writeLine("]\nAborted");
    }

    public function failed(FtpTransfer $transfer, XPException $cause) {
      Console::writeLine("]\nFailed (", $cause->compoundMessage(), ")");
    }
  }');
  
  // Uploading
  $file= $c->rootDir()->file($filename)->uploadFrom(
    new FileInputStream(new File($local)),
    FTP_BINARY,
    $listener
  );
 
  // Downloading
  $stream= $c->rootDir()->getFile($filename)->downloadTo(
    new FileOutputStream(new File($local)),
    FTP_BINARY,
    $listener
  );
?>

Output
~~~~~~
<pre>
peer.ftp.FtpUpload@(io.streams.FileInputStream<io.File(uri= .\php.exe, mode= rb)> -> /php.exe)
  [.......] 
Completed
 
peer.ftp.FtpDownload@(/php.exe -> io.streams.FileOutputStream<io.File(uri= .\php.exe, mode= wb)>) 
  [...................] 
Completed
</pre>

Alternative usage
~~~~~~~~~~~~~~~~~
<?php
  $transfer= $c->rootDir()->getFile($filename)->start(
    FtpDownload::to(new FileOutputStream(new File($local)))
  );
  while (!$transfer->complete()) {
    $transfer->perform();
  }
?>


Security considerations
-----------------------
n/a


Speed impact
------------
n/a


Dependencies
------------
n/a


Related documents
-----------------
- http://experiments.xp-framework.net/?arena,ftp
  The new API


Comments
--------
n/a


<EOF>
