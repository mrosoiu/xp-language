RFC 0052: Make XP its own (compiled) language
========================================================================
$Id$

@authors: friebe
@created: Thu Jan 12 12:09:13 CET 2006
@status: draft
@category: <core>

Scope of Change
---------------
XP will become its own language, that is, PHP with syntax additions, some
of which have been described in RFC #0008. (JIT-)Compilers will be created 
to create PHP4, PHP5 and PHP6 sourcecode from the new language.


Rationale
---------
- Independence from PHP development process and its sometimes idiotic
  decisions (like having to extend built-in Exception for everything
  that should be throwable or decision to throw fatal errors in places
  it's not really required).
- PHP5/PHP6 migration
- Namespaces
- No more syntax cludges
- Rapid development


Functionality
-------------
The suggested functionality includes is divided into the following parts:
<pre>
1) Syntax changes
2) ... TODO ...
</pre>


Namespaces
~~~~~~~~~~
Namespaces can be simulated by string operations. This has been shown
by our "The patch" [1] and by Jessie Hernandez' namespaces implementation
for PHP-CVS [2].

Class declaration in a package:
<?php
  package util·cmd {
    class Console {
      // ...
    }
  }  
?>

Importing a class from a package:
<?php
  import util·cmd·Console;
  
  Console::writeLine('Hello');
?>

What happens technically:
Names are resolved at compile time and prefixed by their namespace.


For PHP4: Compile-time resolved "self" keyword
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A self keyword that works identical to the one used in PHP5.

Example:
<?php
  class Hello {
    public static function usage() {
      // ...
    }
    
    public static function main($args) {
      if ('-?' == $args[1]) {
        self::usage();
        return;
      }
    }
  }
?>

What happens technically:
Self is resolved at compile time and replaced by the current class' name.


Annotations
~~~~~~~~~~~
Annotations as described in RFC #0016 but without the #-sign, see
http://experiments.xp-framework.net/?arena,php5,syntax/metadata.php
  
Declaring annotations:
<?php
  class CalculatorService {
  
    [@webmethod]
    public function add($a, $b) {
      return $a + $b;
    }
  }
?>

Annotations can be retrieved via the reflection API.

What happens technically:
Annotations are stored in the xp registry. The reflection API will 
retrieve them from there instead of having to parse the class files
at runtime.


Anonymous class creation
~~~~~~~~~~~~~~~~~~~~~~~~
See http://experiments.xp-framework.net/?arena,php5,syntax/instance_creation.php
for details.
  
Usage:
<?php
  $list->sort(new Comparator() {
    public function compare($a, $b) {
      return strnatcmp($a, $b);
    }
  });
?>

What happens technically:
This is recompiled to the userland version shown at "Instance creation
expression in PHP4" (http://xp-framework.info/xml/xp.en_US/news/view?60)


For PHP4: Interfaces
~~~~~~~~~~~~~~~~~~~~
An interface keyword that works identical to the one used in PHP5.

Interface declaration:
<?php
  interface Comparable {
    public function compareTo($cmp);
  }
?>

Implementing an interface:
<?php
  class Date implements Comparable {
    // ...

    public function compareTo($cmp) {
      return $this->utime == $cmp->utime;
    }
  }
?>
What happens technically:
For PHP4, the current XP sourcecode with "extends Interface" and
"implements(__FILE__, 'Comparable'))" is generated, see
http://xp-framework.net/content/about.html#10
For PHP5 and above, this is essentially a no-op.


For PHP4: instanceof
~~~~~~~~~~~~~~~~~~~
An instanceof keyword that works identical to the one used in PHP5.
  
<?php
  if ($instance instanceof Comparable) {
    $instance->compareTo($cmp);
  }
?>
What happens technically:
For PHP4, we rewrite this to is('Comparable', $instance). For PHP5 and
above, the sourcecode is left untouched.


Security considerations
-----------------------
n/a


Speed impact
------------
Slower


Dependencies
------------
auto_prepend_file directive

Related documents
-----------------
URLs
~~~~
- [1] http://experiments.xp-framework.net/?arena,php5,packages
- [2] http://phpnamespaces.org/
  
Other resources
~~~~~~~~~~~~~~~
- http://experiments.xp-framework.net/?people,friebe,rfc0052
  Experiment with auto_prepend_file

Comments
--------
- friebe, Sat Jan 28 18:21:05     2006
  Experiment shows this could be done via auto_prepend_file.
  
<EOF>
