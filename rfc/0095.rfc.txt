RFC 0095: Member utilities
========================================================================
$Id$

@authors: friebe
@created: Sun Dec 17 18:14:43     2006
@status: draft
@category: invoke

Scope of Change
---------------
A new API will be created to easily work with members.


Rationale
---------
Remove boilerplate code.


Functionality
-------------

Current
~~~~~~~
XPClass::getMethods() returns an array of lang.reflect.Method objects. To
select only those decorated with an @inject annotation, the standard loop
and filter approach is used:

<?php
  foreach (XPClass::forName('some.annotated.Class')->getMethods() as $m) {
    if (!$m->hasAnnotation('inject')) continue;
    
    $value= $m->getAnnotation('inject');
    // ...
  }
?>

Annotation class
~~~~~~~~~~~~~~~~
The new invoke.Annotation class provides a fast alternative to searching
for methods annotated with a certain annotation.

<?php
  class Annotation extends Object {
  
    /**
     * Find methods annotated with this annotation
     *
     * @param   mixed class either a string with the fully qualified class name or an XPClass
     * @return  invoke.MethodSet
     */
    public static function forName($name) {
      // ...
    }
    
    /**
     * Find methods annotated with this annotation
     *
     * @param   mixed class either a string with the fully qualified class name or an XPClass
     * @return  invoke.MethodSet
     */
    public function methodsOf($class) {
      // ...
    }
  }
?>

Usage:
<?php
  foreach (Annotation::forName('test')->methodsOf('some.test.Class') as $m) {
    // ...
  }
?>

Methods class
~~~~~~~~~~~~~
The new invoke.Methods class provides static methods to factor selectors.

<?php
  class Methods extends Object {
  
    /**
     * Get all methods by a selection
     *
     * @param   string pattern
     * @return  invoke.Selection
     * @throws  util.NoSuchElementException in case no method is found
     */
    public static function getAll($pattern) {
      // ...
    }

    /**
     * Get all methods by a selection
     *
     * @param   string pattern
     * @return  invoke.Selection
     */
    public static function findAll($pattern) {
      // ...
    }
  }
?>

Examples:
<?php
  foreach (Methods::getAll('[@test] public *()')->in('some.test.Class') as $m) {
    // ...
  }
  
  foreach (Methods::findAll('[@inject] public *(ioc.Resource)')->in('some.ioc.Class') as $m) {
    $value= $m->getAnnotation('inject');
    // ...
  }
?>


Security considerations
-----------------------
n/a


Speed impact
------------
n/a


Dependencies
------------
- RFC #0109 - for the invoke package


Related documents
-----------------
n/a


Comments
--------
- friebe, Wed Oct 10 21:46:14     2007
  Reset to draft - this needs some more thought


<EOF>
