Index: ports/classes/net/xp_framework/unittest/rdbms/dataset/Job.class.php
===================================================================
--- ports/classes/net/xp_framework/unittest/rdbms/dataset/Job.class.php	(Revision 10364)
+++ ports/classes/net/xp_framework/unittest/rdbms/dataset/Job.class.php	(Arbeitskopie)
@@ -34,6 +34,17 @@
     }  
   
     /**
+     * column factory
+     *
+     * @param   string name
+     * @return  rdbms.Column
+     * @throws  lang.IllegalArgumentException
+     */
+    public static function column($name) {
+      return Peer::forName(__CLASS__)->column($name);
+    }
+    
+    /**
      * Retrieve associated peer
      *
      * @return  rdbms.Peer
Index: ports/classes/net/xp_framework/unittest/rdbms/CriteriaTest.class.php
===================================================================
--- ports/classes/net/xp_framework/unittest/rdbms/CriteriaTest.class.php	(Revision 10364)
+++ ports/classes/net/xp_framework/unittest/rdbms/CriteriaTest.class.php	(Arbeitskopie)
@@ -7,7 +7,6 @@
   uses(
     'rdbms.Criteria',
     'rdbms.criterion.Restrictions',
-    'rdbms.criterion.Property',
     'rdbms.DriverManager',
     'net.xp_framework.unittest.rdbms.dataset.Job',
     'unittest.TestCase'
@@ -103,22 +102,30 @@
     /**
      * Tests the rdbms.criterion API
      *
-     * @see     xp://rdbms.criterion.Property
+     * @see     xp://rdbms.Column
      * @see     xp://rdbms.criterion.Restrictions
      */
     #[@test]
     public function restrictionsFactory() {
-      $job_id= Property::forName('job_id');
+      $job_id= Job::column('job_id');
       $c= new Criteria(Restrictions::anyOf(
         Restrictions::not($job_id->in(array(1, 2, 3))),
         Restrictions::allOf(
+          Job::column('title')->like('Hello%'),
+          Job::column('valid_from')->greaterThan(new Date('2006-01-01'))
+        ),
+        Restrictions::allOf(
           Restrictions::like('title', 'Hello%'),
           Restrictions::greaterThan('valid_from', new Date('2006-01-01'))
-        )
+        ),
+        $job_id->between(1, 5)
       ));
 
       $this->assertSql(
-        'where (not (job_id in (1, 2, 3)) or (title like "Hello%" and valid_from > "2006-01-01 12:00AM"))',
+        'where (not (job_id in (1, 2, 3))'
+        .' or (title like "Hello%" and valid_from > "2006-01-01 12:00AM")'
+        .' or (title like "Hello%" and valid_from > "2006-01-01 12:00AM")'
+        .' or job_id between 1 and 5)',
         $c
       );
     }
@@ -170,5 +177,82 @@
         'rdbms.Criteria'
       );
     }
+
+    /**
+     * Tests rdbms.Criteria's fluent interface 
+     *
+     * @see     xp://rdbms.Criteria#addGroupBy
+     */
+    #[@test]
+    public function addGroupByReturnsThis() {
+      $this->assertClass(
+        Criteria::newInstance()->add('job_id', 1, EQUAL)->addGroupBy('valid_from'), 
+        'rdbms.Criteria'
+      );
+    }
+
+    /**
+     * Tests rdbms.Column as argument for addorderBy
+     *
+     * @see     xp://rdbms.Criteria#addOrderBy
+     */
+    #[@test]
+    public function addOrderByColumn() {
+      with ($c= new Criteria()); {
+        $c->addOrderBy(job::column('valid_from'));
+        $c->addOrderBy(job::column('expire_at'));
+      }
+      $this->assertSql(
+        'order by valid_from asc, expire_at asc',
+        $c
+      );
+    }
+
+    /**
+     * Tests rdbms.Column as argument for addGroupBy
+     *
+     * @see     xp://rdbms.Criteria#addGroupBy
+     */
+    #[@test]
+    public function addGroupByColumn() {
+      with ($c= new Criteria()); {
+        $c->addGroupBy(job::column('valid_from'));
+        $c->addGroupBy(job::column('expire_at'));
+      }
+      $this->assertSql(
+        'group by valid_from, expire_at',
+        $c
+      );
+    }
+
+    /**
+     * Tests exception for nonexistant column
+     *
+     */
+    #[@test, @expect('lang.IllegalArgumentException')]
+    public function createNonExistantColumn() {
+      job::column('not_existant');
+    }
+
+    /**
+     * Tests exception for nonexistant column
+     *
+     * @see     xp://rdbms.Criteria#addGroupBy
+     */
+    #[@test, @expect('rdbms.SQLStateException')]
+    public function addGroupByNonExistantColumnString() {
+      Criteria::newInstance()->addGroupBy('not_existant')->toSQL($this->conn, $this->peer->types);
+    }
+
+    /**
+     * Tests exception for nonexistant column
+     *
+     * @see     xp://rdbms.Criteria#addOrderBy
+     */
+    #[@test, @expect('rdbms.SQLStateException')]
+    public function addOrderByNonExistantColumnString() {
+      Criteria::newInstance()->addOrderBy('not_existant')->toSQL($this->conn, $this->peer->types);
+    }
+
   }
 ?>
Index: ports/classes/net/xp_framework/db/generator/xp5.php.xsl
===================================================================
--- ports/classes/net/xp_framework/db/generator/xp5.php.xsl	(Revision 10364)
+++ ports/classes/net/xp_framework/db/generator/xp5.php.xsl	(Arbeitskopie)
@@ -124,6 +124,17 @@
     public static function getPeer() {
       return Peer::forName(__CLASS__);
     }
+
+    /**
+     * column factory
+     *
+     * @param   string name
+     * @return  rdbms.Column
+     * @throws  lang.IllegalArumentException
+     */
+    public static function column($name) {
+      return Peer::forName(__CLASS__)->column($name);
+    }
   </xsl:text>
 
   <!-- Create a static method for indexes -->
