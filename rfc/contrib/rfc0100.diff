Index: skeleton/lang.base.php
===================================================================
--- skeleton/lang.base.php	(revision 9404)
+++ skeleton/lang.base.php	(working copy)
@@ -292,7 +292,11 @@
   function __error($code, $msg, $file, $line) {
     if (0 == error_reporting() || is_null($file)) return;
 
-    @xp::$registry['errors'][$file][$line][$msg]++;
+    if (E_RECOVERABLE_ERROR == $code) {
+      throw new IllegalArgumentException($msg.' @ '.$file.':'.$line);
+    } else {
+      @xp::$registry['errors'][$file][$line][$msg]++;
+    }
   }
   // }}}
 
Index: ports/classes/net/xp_framework/unittest/core/TypeHintsTest.class.php
===================================================================
--- ports/classes/net/xp_framework/unittest/core/TypeHintsTest.class.php	(revision 0)
+++ ports/classes/net/xp_framework/unittest/core/TypeHintsTest.class.php	(revision 0)
@@ -0,0 +1,88 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$
+ */
+
+  uses('unittest.TestCase');
+  
+  /**
+   * Test type hints. Uses a simple inline declared class with the 
+   * following methods:
+   *
+   * <code>
+   *   passObject(Generic $o)
+   *   passNullable(Generic $o= NULL)
+   * </code>
+   *
+   * Both of these static methods simply return the value passed to 
+   * them.
+   *
+   * @purpose  Testcase
+   */
+  class TypeHintsTest extends TestCase {
+  
+    static function __static() {
+      ClassLoader::getDefault()->defineClass('TypeHintedClass', 'lang.Object', array(), '{
+        public static function passObject(Generic $o) { return $o; }
+        public static function passNullable(Generic $o= NULL) { return $o; }
+      }');
+    }
+
+    /**
+     * Tests passing an object to passObject()
+     *
+     */
+    #[@test]
+    public function passObject() {
+      $o= new Object();
+      $this->assertEquals($o, TypeHintedClass::passObject($o));
+    }
+
+    /**
+     * Tests passing a primitive to passObject() raises an exception.
+     *
+     */
+    #[@test, @expect('lang.IllegalArgumentException')]
+    public function passPrimitive() {
+      TypeHintedClass::passObject(1);
+    }
+
+    /**
+     * Tests passing NULL to passObject() raises an exception.
+     *
+     */
+    #[@test, @expect('lang.IllegalArgumentException')]
+    public function passNull() {
+      TypeHintedClass::passObject(NULL);
+    }
+
+    /**
+     * Tests passing an object to passNullable()
+     *
+     */
+    #[@test]
+    public function passObjectNullable() {
+      $o= new Object();
+      $this->assertEquals($o, TypeHintedClass::passNullable($o));
+    }
+
+    /**
+     * Tests passing a primitive to passNullable() raises an exception.
+     *
+     */
+    #[@test, @expect('lang.IllegalArgumentException')]
+    public function passPrimitiveNullable() {
+      TypeHintedClass::passNullable(1);
+    }
+
+    /**
+     * Tests passing NULL to passNullable() does not raise an exception
+     *
+     */
+    #[@test]
+    public function passNullNullable() {
+      $this->assertEquals(NULL, TypeHintedClass::passNullable(NULL));
+    }
+  }
+?>

Property changes on: ports/classes/net/xp_framework/unittest/core/TypeHintsTest.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

