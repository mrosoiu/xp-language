Index: reflect/Routine.class.php
===================================================================
--- reflect/Routine.class.php	(revision 8325)
+++ reflect/Routine.class.php	(working copy)
@@ -92,7 +92,12 @@
      */
     function getArguments() {
       if (!($details= XPClass::detailsForMethod($this->_ref, $this->name))) return NULL;
-      return $details[DETAIL_ARGUMENTS];
+
+      $r= array();      
+      foreach ($details[DETAIL_ARGUMENTS] as $arg) {
+        $r[]= &new Argument($arg[0], $arg[1], $arg[2], $arg[3]);
+      }
+      return $r;
     }
 
     /**
@@ -105,7 +110,8 @@
     function &getArgument($pos) {
       if (!($details= XPClass::detailsForMethod($this->_ref, $this->name))) return NULL;
       if (!isset($details[DETAIL_ARGUMENTS][$pos])) return NULL;
-      return $details[DETAIL_ARGUMENTS][$pos];
+      $arg= $details[DETAIL_ARGUMENTS][$pos];
+      return new Argument($arg[0], $arg[1], $arg[2], $arg[3]);
     }
 
     /**
Index: ClassLoader.class.php
===================================================================
--- ClassLoader.class.php	(revision 8326)
+++ ClassLoader.class.php	(working copy)
@@ -54,8 +54,132 @@
     function loadClassBytes($name) {
       return file_get_contents($this->findClass($name));
     }
-    
+
     /**
+     * Retrieve details for a specified class.
+     *
+     * @access  public
+     * @param   string class fully qualified class name
+     * @return  array or NULL to indicate no details are available
+     */
+    function getClassDetails($class) {
+      if (!($bytes= $this->loadClassBytes($class))) return NULL;
+
+      // Found the class, now get API documentation
+      $details= array(array(), array());
+      $annotations= array();
+      $comment= NULL;
+      $members= TRUE;
+
+      $tokens= token_get_all($bytes);
+      for ($i= 0, $s= sizeof($tokens); $i < $s; $i++) {
+        switch ($tokens[$i][0]) {
+          case T_COMMENT:
+            // Apidoc comment
+            if (strncmp('/**', $tokens[$i][1], 3) == 0) {
+              $comment= $tokens[$i][1];
+              break;
+            }
+
+            // Annotations
+            if (strncmp('#[@', $tokens[$i][1], 3) == 0) {
+              $annotations[0]= substr($tokens[$i][1], 2);
+            } elseif (strncmp('#', $tokens[$i][1], 1) == 0) {
+              $annotations[0].= substr($tokens[$i][1], 1);
+            }
+
+            // End of annotations
+            if (']' == substr(rtrim($tokens[$i][1]), -1)) {
+              $annotations= eval('return array('.preg_replace(
+                array('/@([a-z_]+),/i', '/@([a-z_]+)\(\'([^\']+)\'\)/i', '/@([a-z_]+)\(/i', '/([^a-z_@])([a-z_]+) *= */i'),
+                array('\'$1\' => NULL,', '\'$1\' => \'$2\'', '\'$1\' => array(', '$1\'$2\' => '),
+                trim($annotations[0], "[]# \t\n\r").','
+              ).');');
+            }
+            break;
+
+          case T_CLASS:
+            $details['class']= array(
+              DETAIL_COMMENT      => $comment,
+              DETAIL_ANNOTATIONS  => $annotations
+            );
+            $annotations= array();
+            $comment= NULL;
+            break;
+
+          case T_VARIABLE:
+            if (!$members) break;
+
+            // Have a member variable
+            $name= substr($tokens[$i][1], 1);
+            $details[0][$name]= array(
+              DETAIL_ANNOTATIONS => $annotations
+            );
+            $annotations= array();
+            break;
+
+          case T_FUNCTION:
+            $members= FALSE;
+            while (T_STRING !== $tokens[$i][0]) $i++;
+            $m= strtolower($tokens[$i][1]);
+            $details[1][$m]= array(
+              DETAIL_MODIFIERS    => 0,
+              DETAIL_ARGUMENTS    => array(),
+              DETAIL_RETURNS      => 'void',
+              DETAIL_THROWS       => array(),
+              DETAIL_COMMENT      => preg_replace('/\n     \* ?/', "\n", "\n".substr(
+                $comment, 
+                4,                              // "/**\n"
+                strpos($comment, '* @')- 2      // position of first details token
+              )),
+              DETAIL_ANNOTATIONS  => $annotations,
+              DETAIL_NAME         => $tokens[$i][1]
+            );
+            $matches= NULL;
+            preg_match_all(
+              '/@([a-z]+)\s*([^<\r\n]+<[^>]+>|[^\r\n ]+) ?([^\r\n ]+)? ?(default ([^\r\n ]+))?/',
+              $comment, 
+              $matches, 
+              PREG_SET_ORDER
+            );
+            $annotations= array();
+            $comment= NULL;
+            foreach ($matches as $match) {
+              switch ($match[1]) {
+                case 'access':
+                case 'model':
+                  $details[1][$m][DETAIL_MODIFIERS] |= constant('MODIFIER_'.strtoupper($match[2]));
+                  break;
+
+                case 'param':
+                  $details[1][$m][DETAIL_ARGUMENTS][]= array(
+                    isset($match[3]) ? $match[3] : 'param',
+                    $match[2],
+                    isset($match[4]),
+                    isset($match[4]) ? $match[5] : NULL
+                  );
+                  break;
+
+                case 'return':
+                  $details[1][$m][DETAIL_RETURNS]= $match[2];
+                  break;
+
+                case 'throws': 
+                  $details[1][$m][DETAIL_THROWS][]= $match[2];
+                  break;
+              }
+            }
+            break;
+
+          default:
+            // Empty
+        }
+      }
+      
+      return $details; 
+    }
+
+    /**
      * Retrieve the default class loader
      *
      * @model   static
Index: XPClass.class.php
===================================================================
--- XPClass.class.php	(revision 8325)
+++ XPClass.class.php	(working copy)
@@ -482,125 +482,11 @@
       static $details= array();
 
       if (!$class) return NULL;        // Border case
-      if (isset($details[$class])) return $details[$class];
-
-      // Retrieve class' sourcecode
-      $cl= &XPClass::_classLoaderFor($class);
-      if (!($bytes= $cl->loadClassBytes($class))) return NULL;
-
-      // Found the class, now get API documentation
-      $details[$class]= array(array(), array());
-      $annotations= array();
-      $comment= NULL;
-      $members= TRUE;
-
-      $tokens= token_get_all($bytes);
-      for ($i= 0, $s= sizeof($tokens); $i < $s; $i++) {
-        switch ($tokens[$i][0]) {
-          case T_COMMENT:
-            // Apidoc comment
-            if (strncmp('/**', $tokens[$i][1], 3) == 0) {
-              $comment= $tokens[$i][1];
-              break;
-            }
-
-            // Annotations
-            if (strncmp('#[@', $tokens[$i][1], 3) == 0) {
-              $annotations[0]= substr($tokens[$i][1], 2);
-            } elseif (strncmp('#', $tokens[$i][1], 1) == 0) {
-              $annotations[0].= substr($tokens[$i][1], 1);
-            }
-
-            // End of annotations
-            if (']' == substr(rtrim($tokens[$i][1]), -1)) {
-              $annotations= eval('return array('.preg_replace(
-                array('/@([a-z_]+),/i', '/@([a-z_]+)\(\'([^\']+)\'\)/i', '/@([a-z_]+)\(/i', '/([^a-z_@])([a-z_]+) *= */i'),
-                array('\'$1\' => NULL,', '\'$1\' => \'$2\'', '\'$1\' => array(', '$1\'$2\' => '),
-                trim($annotations[0], "[]# \t\n\r").','
-              ).');');
-            }
-            break;
-
-          case T_CLASS:
-            $details[$class]['class']= array(
-              DETAIL_COMMENT      => $comment,
-              DETAIL_ANNOTATIONS  => $annotations
-            );
-            $annotations= array();
-            $comment= NULL;
-            break;
-
-          case T_VARIABLE:
-            if (!$members) break;
-
-            // Have a member variable
-            $name= substr($tokens[$i][1], 1);
-            $details[$class][0][$name]= array(
-              DETAIL_ANNOTATIONS => $annotations
-            );
-            $annotations= array();
-            break;
-
-          case T_FUNCTION:
-            $members= FALSE;
-            while (T_STRING !== $tokens[$i][0]) $i++;
-            $m= strtolower($tokens[$i][1]);
-            $details[$class][1][$m]= array(
-              DETAIL_MODIFIERS    => 0,
-              DETAIL_ARGUMENTS    => array(),
-              DETAIL_RETURNS      => 'void',
-              DETAIL_THROWS       => array(),
-              DETAIL_COMMENT      => preg_replace('/\n     \* ?/', "\n", "\n".substr(
-                $comment, 
-                4,                              // "/**\n"
-                strpos($comment, '* @')- 2      // position of first details token
-              )),
-              DETAIL_ANNOTATIONS  => $annotations,
-              DETAIL_NAME         => $tokens[$i][1]
-            );
-            $matches= NULL;
-            preg_match_all(
-              '/@([a-z]+)\s*([^<\r\n]+<[^>]+>|[^\r\n ]+) ?([^\r\n ]+)? ?(default ([^\r\n ]+))?/',
-              $comment, 
-              $matches, 
-              PREG_SET_ORDER
-            );
-            $annotations= array();
-            $comment= NULL;
-            foreach ($matches as $match) {
-              switch ($match[1]) {
-                case 'access':
-                case 'model':
-                  $details[$class][1][$m][DETAIL_MODIFIERS] |= constant('MODIFIER_'.strtoupper($match[2]));
-                  break;
-
-                case 'param':
-                  $details[$class][1][$m][DETAIL_ARGUMENTS][]= &new Argument(
-                    isset($match[3]) ? $match[3] : 'param',
-                    $match[2],
-                    isset($match[4]),
-                    isset($match[4]) ? $match[5] : NULL
-                  );
-                  break;
-
-                case 'return':
-                  $details[$class][1][$m][DETAIL_RETURNS]= $match[2];
-                  break;
-
-                case 'throws': 
-                  $details[$class][1][$m][DETAIL_THROWS][]= $match[2];
-                  break;
-              }
-            }
-            break;
-
-          default:
-            // Empty
-        }
+      if (!isset($details[$class])) {
+        $cl= &XPClass::_classLoaderFor($class);
+        $details[$class]= $cl->getClassDetails($class);
       }
-      
-      // Return details for specified class
-      return $details[$class]; 
+      return $details[$class];
     }
 
     /**
