Index: xml/Node.class.php
===================================================================
--- xml/Node.class.php	(revision 10821)
+++ xml/Node.class.php	(working copy)
@@ -98,6 +98,7 @@
         $vars= array();
         foreach ($obj->__sleep() as $var) $vars[$var]= $obj->{$var};
       }
+      foreach ($vars as $key => $value) { if ('_' == $key{0}) unset($vars[$key]); }
 
       return self::fromArray($vars, (NULL === $name) ? get_class($obj) : $name);
     }
@@ -295,6 +296,43 @@
     }
     
     /**
+     * Retrieve XML representation as DOM element
+     *
+     * @param   php.DOMDocument doc
+     * @return  php.DOMElement
+     */
+    public function getDomNode(DOMDocument $doc) {
+      $element= $doc->createElement($this->name);
+      
+      // Set all attributes
+      foreach ($this->attribute as $key => $value) {
+        $element->setAttribute($key, htmlspecialchars($value));
+      }
+      
+      // Set content
+      switch (TRUE) {
+        case is_null($this->content): break;
+        case is_string($this->content): $element->nodeValue= htmlspecialchars($this->content); break;
+        case is_scalar($this->content): $element->nodeValue= $this->content; break;
+        
+        case $this->content instanceof CData:
+        case $this->content instanceof PCData: {
+          $element->appendChild($this->content->getDomNode($doc));
+          break;
+        }
+        
+        default: throw new XMLFormatException('Content is neither string nor cdata: '.xp::stringOf($this->content));
+      }
+      
+      // Process all children
+      foreach ($this->children as $child) {
+        $element->appendChild($child->getDomNode($doc));
+      }
+      
+      return $element;
+    }
+    
+    /**
      * Add a child node
      *
      * @param   xml.Node child
Index: xml/PCData.class.php
===================================================================
--- xml/PCData.class.php	(revision 10821)
+++ xml/PCData.class.php	(working copy)
@@ -37,7 +37,24 @@
      */
     public function __construct($pcdata) {
       $this->pcdata= $pcdata;
+    }
+    
+    /**
+     * Retrieve XML representation as DOM element
+     *
+     * @param   php.DOMDocument doc
+     * @return  php.DOMElement
+     */
+    public function getDomNode(DOMDocument $doc) {
+      $tdoc= new DOMDocument();
+      $tdoc->loadXML('<?xml version="1.0" encoding="iso-8859-1"?><t>'.$this->pcdata.'</t>');
       
+      $fragment= $doc->createDocumentFragment();
+      foreach ($tdoc->documentElement->childNodes as $node) {
+        $fragment->appendChild($doc->importNode($node, TRUE));
+      }
+      
+      return $fragment;
     }
   }
 ?>
Index: xml/Tree.class.php
===================================================================
--- xml/Tree.class.php	(revision 10821)
+++ xml/Tree.class.php	(working copy)
@@ -52,6 +52,21 @@
     }
     
     /**
+     * Retrieve XML representation as DOM document
+     *
+     * @return  php.DOMDocument
+     */
+    public function getDomTree() {
+      $doc= new DOMDocument($this->version, $this->getEncoding());
+      
+      if ($this->root) {
+        $doc->appendChild($this->root->getDomNode($doc));
+      }
+      
+      return $doc;
+    }
+    
+    /**
      * Add a child to this tree
      *
      * @param   xml.Node child 
Index: xml/DomXSLProcessor.class.php
===================================================================
--- xml/DomXSLProcessor.class.php	(revision 10821)
+++ xml/DomXSLProcessor.class.php	(working copy)
@@ -106,6 +106,19 @@
 
       $this->_checkErrors($xsl);
     }
+    
+    /**
+     * Set XSL buffer from DOMDocument
+     *
+     * @param   php.DOMDocument xsl
+     */
+    public function setXSLDocument($xsl) {
+      libxml_get_last_error() && libxml_clear_errors();
+      $this->stylesheet= $xsl;
+      strlen($this->_base) && $this->stylesheet->documentURI= $this->_base;
+      
+      $this->_checkErrors($xsl);
+    }
 
     /**
      * Set XML file
@@ -138,6 +151,17 @@
 
       $this->_checkErrors($xml);
     }
+    
+    /**
+     * Set XML buffer
+     *
+     * @param   php.DOMDocument xml
+     */
+    public function setXMLDocument($xml) {
+      libxml_get_last_error() && libxml_clear_errors();
+      $this->document= $xml;
+      $this->_checkErrors($xml);
+    }
 
     /**
      * Set XSL transformation parameters
Index: xml/CData.class.php
===================================================================
--- xml/CData.class.php	(revision 10821)
+++ xml/CData.class.php	(working copy)
@@ -34,5 +34,15 @@
     public function __construct($cdata) {
       $this->cdata= $cdata;
     }
+    
+    /**
+     * Retrieve XML representation as DOM element
+     *
+     * @param   php.DOMDocument doc
+     * @return  php.DOMElement
+     */
+    public function getDomNode(DOMDocument $doc) {
+      return $doc->createCDataSection($this->cdata);
+    }
   }
 ?>
