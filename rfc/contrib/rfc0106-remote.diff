Index: skeleton/remote/protocol/ArrayListMapping.class.php
===================================================================
--- skeleton/remote/protocol/ArrayListMapping.class.php	(revision 9905)
+++ skeleton/remote/protocol/ArrayListMapping.class.php	(working copy)
@@ -23,11 +23,10 @@
      * @return  &mixed
      */
     public function valueOf($serializer, $serialized, $context= array()) {
-      $a= new ArrayList();
-      $size= $serialized->consumeSize();
+      $a= ArrayList::newInstance($serialized->consumeSize());
       
       $serialized->offset++;  // Opening "{"
-      for ($i= 0; $i < $size; $i++) {
+      for ($i= 0; $i < $a->length; $i++) {
         $a->values[$i]= $serializer->valueOf($serialized, $context);
       }
       $serialized->offset++;  // Closing "}"
Index: skeleton/remote/protocol/XpProtocolHandler.class.php
===================================================================
--- skeleton/remote/protocol/XpProtocolHandler.class.php	(revision 9905)
+++ skeleton/remote/protocol/XpProtocolHandler.class.php	(working copy)
@@ -212,7 +212,7 @@
         pack('NN', 0, $oid),
         array(
           new ByteCountedString($method),
-          new ByteCountedString($this->serializer->representationOf(new ArrayList($args)))
+          new ByteCountedString($this->serializer->representationOf(ArrayList::newInstance($args)))
         )
       );
       $this->cat && $this->cat->infof('<<< %s', $this->stringOf($r));
Index: ports/classes/net/xp_framework/unittest/remote/SerializerTest.class.php
===================================================================
--- ports/classes/net/xp_framework/unittest/remote/SerializerTest.class.php	(revision 9905)
+++ ports/classes/net/xp_framework/unittest/remote/SerializerTest.class.php	(working copy)
@@ -332,15 +332,15 @@
       $list= $this->serializer->valueOf(
         new SerializedData('A:1:{a:2:{s:2:"la";s:2:"la";s:3:"foo";A:2:{a:1:{s:13:"verschachteln";s:7:"istToll";}s:6:"barbar";}}}')
       );
-      $this->assertEquals($list, new ArrayList(array(
+      $this->assertEquals($list, new ArrayList(
         array(
           'la'  => 'la',
-          'foo' => new ArrayList(array(
+          'foo' => new ArrayList(
             array('verschachteln' => 'istToll'),
             'barbar'
-          ))
+          )
         ))
-      ));
+      );
     }
     
     /**
