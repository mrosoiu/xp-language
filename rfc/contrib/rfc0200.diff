Index: skeleton/xml/Node.class.php
===================================================================
--- skeleton/xml/Node.class.php	(revision 14454)
+++ skeleton/xml/Node.class.php	(working copy)
@@ -6,8 +6,10 @@
  */
 
   uses(
+    'xml.Element',
     'xml.PCData',
     'xml.CData',
+    'xml.Text',
     'xml.XMLFormatException'
   );
   
@@ -23,7 +25,7 @@
    * @see   xp://xml.Tree#addChild
    * @test  xp://net.xp_framework.unittest.xml.NodeTest
    */
-  class Node extends Object {
+  class Node extends Object implements Element {
     const
       XML_ILLEGAL_CHARS   = XML_ILLEGAL_CHARS;
 
@@ -45,12 +47,18 @@
      * @param   string name
      * @param   string content default NULL
      * @param   array<string, string> attribute default array() attributes
-     * @throws  lang.IllegalArgumentException
+     * @throws  xml.XMLFormatException
      */
     public function __construct($name, $content= NULL, $attribute= array()) {
       $this->name= $name;
       $this->attribute= $attribute;
-      $this->setContent($content);
+      if (NULL !== $content) {
+        if ($content instanceof Element) {
+          $this->children= array($content);
+        } else if ('' !== $content) {
+          $this->children= array(new Text($content));
+        }
+      }
     }
 
     /**
@@ -131,6 +139,7 @@
     /**
      * Set content
      *
+     * @deprecated  Use addChild(new Text(...)) instead
      * @param   string content
      * @throws  xml.XMLFormatException in case content contains illegal characters
      */
@@ -151,6 +160,7 @@
     /**
      * Get content (all CDATA)
      *
+     * @deprecated  Use textContent() instead
      * @return  string content
      */
     public function getContent() {
@@ -158,6 +168,23 @@
     }
 
     /**
+     * Get content
+     *
+     * @return  string content
+     */
+    public function textContent() {
+      $c= '';
+      foreach ($this->children as $child) {
+        if ($child instanceof Text) {
+          $c.= $child->getContent();
+        } else if ($child instanceof self) {
+          $c.= $child->textContent();
+        }
+      }
+      return $c;
+    }
+
+    /**
      * Set an attribute
      *
      * @param   string name
@@ -234,7 +261,7 @@
     public function getSource($indent= INDENT_WRAPPED, $encoding= 'iso-8859-1', $inset= '') {
       $xml= $inset.'<'.$this->name;
       $conv= 'iso-8859-1' != $encoding;
-      
+      $children= $this->children;
       if ('string' == ($type= gettype($this->content))) {
         $content= $conv
           ? iconv('iso-8859-1', $encoding, htmlspecialchars($this->content))
@@ -257,6 +284,12 @@
         ).']]>';
       } else if ($this->content instanceof String) {
         $content= htmlspecialchars($this->content->getBytes($encoding));
+      } else if (NULL === $this->content && 1 === sizeof($this->children) && $this->children[0] instanceof Text) {
+        $children= array();
+        $content= $conv
+          ? iconv('iso-8859-1', $encoding, htmlspecialchars($this->children[0]->getContent()))
+          : htmlspecialchars($this->children[0]->getContent())
+        ;
       } else {
         $content= $this->content; 
       }
@@ -268,8 +301,12 @@
             : $value
           ).'"';
         }
+
+        // No content and no children => close tag
+        if (0 == strlen($content) && !$children) return $xml.'/>';
+        
         $xml.= '>'.$content;
-        foreach ($this->children as $child) {
+        foreach ($children as $child) {
           $xml.= $child->getSource($indent, $encoding, $inset);
         }
         return $xml.'</'.$this->name.'>';
@@ -287,15 +324,15 @@
 
         // No content and no children => close tag
         if (0 == strlen($content)) {
-          if (!$this->children) return $xml."/>\n";
+          if (!$children) return $xml."/>\n";
           $xml.= '>';
         } else {
           $xml.= '>'.($indent ? "\n  ".$inset.$content : trim($content));
         }
 
-        if ($this->children) {
+        if ($children) {
           $xml.= ($indent ? '' : $inset)."\n";
-          foreach ($this->children as $child) {
+          foreach ($children as $child) {
             $xml.= $child->getSource($indent, $encoding, $inset.'  ');
           }
           $xml= ($indent ? substr($xml, 0, -1) : $xml).$inset;
@@ -307,23 +344,33 @@
     /**
      * Add a child node
      *
-     * @param   xml.Node child
-     * @return  xml.Node added child
+     * @param   xml.Element child
+     * @return  xml.Element added child
      * @throws  lang.IllegalArgumentException in case the given argument is not a Node
      */
-    public function addChild(Node $child) {
+    public function addChild(Element $child) {
       $this->children[]= $child;
       return $child;
     }
+    
+    /**
+     * Returns whether another object is equal to this node
+     *
+     * @param   lang.Generic cmp
+     * @return  bool
+     */
+    public function equals($cmp) {
+      return $cmp instanceof self && $this->getSource(INDENT_NONE) === $cmp->getSource(INDENT_NONE);
+    }
 
     /**
      * Add a child node and return this node
      *
-     * @param   xml.Node child
+     * @param   xml.Element child
      * @return  xml.Node this
      * @throws  lang.IllegalArgumentException in case the given argument is not a Node
      */
-    public function withChild(Node $child) {
+    public function withChild(Element $child) {
       $this->addChild($child);
       return $this;
     }
Index: skeleton/xml/Element.class.php
===================================================================
--- skeleton/xml/Element.class.php	(revision 0)
+++ skeleton/xml/Element.class.php	(revision 0)
@@ -0,0 +1,23 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  /**
+   * Represents an element in an XML tree. An element will be one of the 
+   * following:
+   * <ul>
+   *   <li>A node (optionally with attributes)</li>
+   *   <li>Text</li>
+   *   <li>A comment</li>
+   *   <li>A processing instruction</li>
+   * </ul>
+   *
+   * @see   xp://xml.Tree#addChild
+   * @see   xp://xml.Node#addChild
+   */
+  interface Element {
+    
+  }
+?>

Property changes on: skeleton/xml/Element.class.php
___________________________________________________________________
Added: svn:keywords
   + Id

Index: skeleton/xml/PCData.class.php
===================================================================
--- skeleton/xml/PCData.class.php	(revision 14454)
+++ skeleton/xml/PCData.class.php	(working copy)
@@ -4,6 +4,8 @@
  * $Id$
  */
 
+  uses('xml.Element');
+
   /**
    * PCData allows to insert literal XML into a nodes contents.
    *
@@ -26,9 +28,8 @@
    *
    * @purpose  Wrapper
    */
-  class PCData extends Object {
-    public
-      $pcdata= '';
+  class PCData extends Object implements Element {
+    public $pcdata= '';
       
     /**
      * Constructor
@@ -37,7 +38,22 @@
      */
     public function __construct($pcdata) {
       $this->pcdata= $pcdata;
-      
     }
+
+    /**
+     * Retrieve XML representation
+     *
+     * @param   int indent default INDENT_WRAPPED
+     * @param   string encoding default 'iso-8859-1'
+     * @param   string inset default ''
+     * @return  string XML
+     */
+    public function getSource($indent= INDENT_WRAPPED, $encoding= 'iso-8859-1', $inset= '') {
+      $conv= 'iso-8859-1' != $encoding;
+      return $conv
+        ? iconv('iso-8859-1', $encoding, $this->pcdata)
+        : $this->pcdata
+      ;
+    }
   }
 ?>
Index: skeleton/xml/Tree.class.php
===================================================================
--- skeleton/xml/Tree.class.php	(revision 14454)
+++ skeleton/xml/Tree.class.php	(working copy)
@@ -97,11 +97,11 @@
     /**
      * Add a child to this tree
      *
-     * @param   xml.Node child 
-     * @return  xml.Node the added child
+     * @param   xml.Element child 
+     * @return  xml.Element the added child
      * @throws  lang.IllegalArgumentException in case the given argument is not a Node
      */   
-    public function addChild(Node $child) {
+    public function addChild(Element $child) {
       return $this->root->addChild($child);
     }
 
Index: skeleton/xml/parser/XMLParser.class.php
===================================================================
--- skeleton/xml/parser/XMLParser.class.php	(revision 14454)
+++ skeleton/xml/parser/XMLParser.class.php	(working copy)
@@ -110,6 +110,7 @@
           xml_set_element_handler($parser, 'onStartElement', 'onEndElement');
           xml_set_character_data_handler($parser, 'onCData');
           xml_set_default_handler($parser, 'onDefault');
+          method_exists($this->callback, 'onProcessing') && xml_set_processing_instruction_handler($parser, 'onProcessing');
         }
         
         // Parse streams while reading data
Index: skeleton/xml/Comment.class.php
===================================================================
--- skeleton/xml/Comment.class.php	(revision 0)
+++ skeleton/xml/Comment.class.php	(revision 0)
@@ -0,0 +1,79 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$
+ *
+ */
+
+  uses(
+    'xml.Element',
+    'xml.XMLFormatException'
+  );
+
+  /**
+   * Represents a comment
+   *
+   */
+  class Comment extends Object implements Element {
+    protected $content = NULL;
+
+    /**
+     * Constructor
+     *
+     * <code>
+     *   $n= new Comment('Hello World');
+     * </code>
+     *
+     * @param   string content default NULL
+     * @throws  xml.XMLFormatException
+     */
+    public function __construct($content= NULL) {
+      $this->setContent($content);
+    }
+
+    /**
+     * Set content
+     *
+     * @param   string content
+     * @throws  xml.XMLFormatException in case content contains illegal characters
+     */
+    public function setContent($content) {
+
+      // Scan the given string for illegal characters.
+      if (is_string($content)) {  
+        if (strlen($content) > ($p= strcspn($content, XML_ILLEGAL_CHARS))) {
+          throw new XMLFormatException(
+            'Content contains illegal character at position '.$p. ' / chr('.ord($content{$p}).')'
+          );
+        }
+      }
+      
+      $this->content= $content;
+    }
+    
+    /**
+     * Get content (all CDATA)
+     *
+     * @return  string content
+     */
+    public function getContent() {
+      return $this->content;
+    }
+    
+    /**
+     * Retrieve XML representation
+     *
+     * @param   int indent default INDENT_WRAPPED
+     * @param   string encoding default 'iso-8859-1'
+     * @param   string inset default ''
+     * @return  string XML
+     */
+    public function getSource($indent= INDENT_WRAPPED, $encoding= 'iso-8859-1', $inset= '') {
+      $conv= 'iso-8859-1' != $encoding;
+      return '<!--'.($conv
+        ? iconv('iso-8859-1', $encoding, htmlspecialchars($this->content))
+        : htmlspecialchars($this->content)
+      ).'-->';
+    }
+  }
+?>

Property changes on: skeleton/xml/Comment.class.php
___________________________________________________________________
Added: svn:keywords
   + Id

Index: skeleton/xml/CData.class.php
===================================================================
--- skeleton/xml/CData.class.php	(revision 14454)
+++ skeleton/xml/CData.class.php	(working copy)
@@ -4,6 +4,8 @@
  * $Id$
  */
 
+  uses('xml.Element');
+
   /**
    * CData allows to insert a CDATA section:
    *
@@ -22,9 +24,8 @@
    *
    * @purpose  Wrapper
    */
-  class CData extends Object {
-    public
-      $cdata= '';
+  class CData extends Object implements Element {
+    public $cdata= '';
       
     /**
      * Constructor
@@ -34,5 +35,21 @@
     public function __construct($cdata) {
       $this->cdata= $cdata;
     }
+
+    /**
+     * Retrieve XML representation
+     *
+     * @param   int indent default INDENT_WRAPPED
+     * @param   string encoding default 'iso-8859-1'
+     * @param   string inset default ''
+     * @return  string XML
+     */
+    public function getSource($indent= INDENT_WRAPPED, $encoding= 'iso-8859-1', $inset= '') {
+      $conv= 'iso-8859-1' != $encoding;
+      return '<![CDATA['.str_replace(']]>', ']]]]><![CDATA[>', $conv
+        ? iconv('iso-8859-1', $encoding, $this->cdata)
+        : $this->cdata
+      ).']]>';
+    }
   }
 ?>
Index: skeleton/xml/ProcessingInstruction.class.php
===================================================================
--- skeleton/xml/ProcessingInstruction.class.php	(revision 0)
+++ skeleton/xml/ProcessingInstruction.class.php	(revision 0)
@@ -0,0 +1,100 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$
+ *
+ */
+
+  uses(
+    'xml.Element',
+    'xml.XMLFormatException'
+  );
+
+  /**
+   * Represents a processing instruction
+   *
+   */
+  class ProcessingInstruction extends Object implements Element {
+    protected $name = NULL;
+    protected $content = NULL;
+
+    /**
+     * Constructor
+     *
+     * <code>
+     *   $n= new ProcessingInstruction('php', 'echo "Hello";');
+     * </code>
+     *
+     * @param   string name
+     * @param   string content default NULL
+     * @throws  xml.XMLFormatException
+     */
+    public function __construct($name, $content= NULL) {
+      $this->name= $name;
+      $this->setContent($content);
+    }
+
+    /**
+     * Sets name
+     *
+     * @param   string name
+     */
+    public function setName($name) {
+      $this->name= $name;
+    }
+    
+    /**
+     * Gets name
+     *
+     * @return  string
+     */
+    public function getName() {
+      return $this->name;
+    }
+
+    /**
+     * Set content
+     *
+     * @param   string content
+     * @throws  xml.XMLFormatException in case content contains illegal characters
+     */
+    public function setContent($content) {
+
+      // Scan the given string for illegal characters.
+      if (is_string($content)) {  
+        if (strlen($content) > ($p= strcspn($content, XML_ILLEGAL_CHARS))) {
+          throw new XMLFormatException(
+            'Content contains illegal character at position '.$p. ' / chr('.ord($content{$p}).')'
+          );
+        }
+      }
+      
+      $this->content= $content;
+    }
+    
+    /**
+     * Get content (all CDATA)
+     *
+     * @return  string content
+     */
+    public function getContent() {
+      return $this->content;
+    }
+    
+    /**
+     * Retrieve XML representation
+     *
+     * @param   int indent default INDENT_WRAPPED
+     * @param   string encoding default 'iso-8859-1'
+     * @param   string inset default ''
+     * @return  string XML
+     */
+    public function getSource($indent= INDENT_WRAPPED, $encoding= 'iso-8859-1', $inset= '') {
+      $conv= 'iso-8859-1' != $encoding;
+      return '<?'.$this->name.' '.($conv
+        ? iconv('iso-8859-1', $encoding, htmlspecialchars($this->content))
+        : htmlspecialchars($this->content)
+      ).'?>';
+    }
+  }
+?>

Property changes on: skeleton/xml/ProcessingInstruction.class.php
___________________________________________________________________
Added: svn:keywords
   + Id

Index: skeleton/xml/Text.class.php
===================================================================
--- skeleton/xml/Text.class.php	(revision 0)
+++ skeleton/xml/Text.class.php	(revision 0)
@@ -0,0 +1,79 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$
+ *
+ */
+
+  uses(
+    'xml.Element',
+    'xml.XMLFormatException'
+  );
+
+  /**
+   * Represents a text element
+   *
+   */
+  class Text extends Object implements Element {
+    protected $content = NULL;
+
+    /**
+     * Constructor
+     *
+     * <code>
+     *   $n= new Text('Hello World');
+     * </code>
+     *
+     * @param   string content default NULL
+     * @throws  xml.XMLFormatException
+     */
+    public function __construct($content= NULL) {
+      $this->setContent($content);
+    }
+
+    /**
+     * Set content
+     *
+     * @param   string content
+     * @throws  xml.XMLFormatException in case content contains illegal characters
+     */
+    public function setContent($content) {
+
+      // Scan the given string for illegal characters.
+      if (is_string($content)) {  
+        if (strlen($content) > ($p= strcspn($content, XML_ILLEGAL_CHARS))) {
+          throw new XMLFormatException(
+            'Content contains illegal character at position '.$p. ' / chr('.ord($content{$p}).')'
+          );
+        }
+      }
+      
+      $this->content= $content;
+    }
+    
+    /**
+     * Get content (all CDATA)
+     *
+     * @return  string content
+     */
+    public function getContent() {
+      return $this->content;
+    }
+    
+    /**
+     * Retrieve XML representation
+     *
+     * @param   int indent default INDENT_WRAPPED
+     * @param   string encoding default 'iso-8859-1'
+     * @param   string inset default ''
+     * @return  string XML
+     */
+    public function getSource($indent= INDENT_WRAPPED, $encoding= 'iso-8859-1', $inset= '') {
+      $conv= 'iso-8859-1' != $encoding;
+      return $conv
+        ? iconv('iso-8859-1', $encoding, htmlspecialchars($this->content))
+        : htmlspecialchars($this->content)
+      ;
+    }
+  }
+?>

Property changes on: skeleton/xml/Text.class.php
___________________________________________________________________
Added: svn:keywords
   + Id

Index: ports/classes/net/xp_framework/unittest/xml/NodeTest.class.php
===================================================================
--- ports/classes/net/xp_framework/unittest/xml/NodeTest.class.php	(revision 14454)
+++ ports/classes/net/xp_framework/unittest/xml/NodeTest.class.php	(working copy)
@@ -203,7 +203,7 @@
     public function sourceOfNodeWithContent() {
       $this->assertEquals(
         '<expr>eval(\'1 &lt;&gt; 2 &amp;&amp; \') == &quot;Parse Error&quot;</expr>', 
-        $this->sourceOf(new Node('expr', 'eval(\'1 <> 2 && \') == "Parse Error"'))
+        $this->sourceOf(new Node('expr', 'eval(\'1 <> 2 && \') == "Parse Error"'), INDENT_NONE)
       );
     }
 
@@ -215,7 +215,7 @@
     public function sourceOfNodeWithCData() {
       $this->assertEquals(
         '<text><![CDATA[Special characters: <>"\'&]]></text>', 
-        $this->sourceOf(new Node('text', new CData('Special characters: <>"\'&')))
+        $this->sourceOf(new Node('text', new CData('Special characters: <>"\'&')), INDENT_NONE)
       );
     }
 
@@ -227,7 +227,7 @@
     public function sourceOfNodeWithPCData() {
       $this->assertEquals(
         '<text>A <a href="http://xp-framework.net/">link</a> to click on</text>', 
-        $this->sourceOf(new Node('text', new PCData('A <a href="http://xp-framework.net/">link</a> to click on')))
+        $this->sourceOf(new Node('text', new PCData('A <a href="http://xp-framework.net/">link</a> to click on')), INDENT_NONE)
       );
     }
     
@@ -239,7 +239,7 @@
     public function sourceOfNodeWithStringContent() {
       $this->assertEquals(
         '<node>XP &amp; APC</node>',
-        $this->sourceOf(new Node('node', new String('XP & APC'))) 
+        $this->sourceOf(new Node('node', new String('XP & APC')), INDENT_NONE) 
       );
     }
 
@@ -250,12 +250,7 @@
     #[@test]
     public function fromObject() { 
       $this->assertEquals(
-        "<node>\n".
-        "  <id>1549</id>\n".
-        "  <color>green</color>\n".
-        "  <name>Name goes here</name>\n".
-        "  <__id/>\n".
-        "</node>",
+        '<node><id>1549</id><color>green</color><name>Name goes here</name><__id/></node>',
         $this->sourceOf(Node::fromObject(newinstance('lang.Object', array(), '{
           public $id= 1549;
           public $color= "green";
@@ -264,7 +259,7 @@
           public function __construct() {
             $this->name= new String("Name goes here");
           } 
-        }'), 'node'))
+        }'), 'node'), INDENT_NONE)
       );
     }
   }
Index: ports/classes/net/xp_framework/unittest/xml/XslCallbackTest.class.php
===================================================================
--- ports/classes/net/xp_framework/unittest/xml/XslCallbackTest.class.php	(revision 14454)
+++ ports/classes/net/xp_framework/unittest/xml/XslCallbackTest.class.php	(working copy)
@@ -209,7 +209,7 @@
     public function dateFormatCallback() {
       $date= new Date('2009-09-20 21:33:00');
       $this->assertEquals($date->toString('Y-m-d H:i:s T'), $this->runTransformation(
-        Node::fromObject($date, 'date')->getSource(),
+        Node::fromObject($date, 'date')->getSource(INDENT_NONE),
         'xp.date::format',
         array('string(/date/value)', "'Y-m-d H:i:s T'")
       ));
@@ -225,7 +225,7 @@
       $date= new Date('2009-09-20 21:33:00');
       $tz= new TimeZone('Australia/Sydney');
       $this->assertEquals($date->toString('Y-m-d H:i:s T', $tz), $this->runTransformation(
-        Node::fromObject($date, 'date')->getSource(),
+        Node::fromObject($date, 'date')->getSource(INDENT_NONE),
         'xp.date::format',
         array('string(/date/value)', "'Y-m-d H:i:s T'", "'".$tz->getName()."'")
       ));
@@ -240,7 +240,7 @@
     public function dateFormatCallbackWithEmptyTZ() {
       $date= new Date('2009-09-20 21:33:00');
       $this->assertEquals($date->toString('Y-m-d H:i:s T'), $this->runTransformation(
-        Node::fromObject($date, 'date')->getSource(),
+        Node::fromObject($date, 'date')->getSource(INDENT_NONE),
         'xp.date::format',
         array('string(/date/value)', "'Y-m-d H:i:s T'", "''")
       ));
@@ -255,7 +255,7 @@
     public function dateFormatCallbackWithoutTZ() {
       $date= new Date('2009-09-20 21:33:00');
       $this->assertEquals($date->toString('Y-m-d H:i:s T'), $this->runTransformation(
-        Node::fromObject($date, 'date')->getSource(),
+        Node::fromObject($date, 'date')->getSource(INDENT_NONE),
         'xp.date::format',
         array('string(/date/value)', "'Y-m-d H:i:s T'")
       ));
