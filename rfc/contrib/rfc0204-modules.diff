Index: skeleton/lang/ClassLoader.class.php
===================================================================
--- skeleton/lang/ClassLoader.class.php	(revision 14750)
+++ skeleton/lang/ClassLoader.class.php	(working copy)
@@ -64,6 +64,7 @@
           xp::error('[bootstrap] Classpath element ['.$element.'] not found');
         }
       }
+      xp::$registry['modules']['xp']= array(NULL, array('module' => 'xp', 'version' => '5.7.11-dev', 'requirements' => array()));
     }
     
     /**
@@ -106,9 +107,85 @@
       } else {
         self::$delegates[$l->hashCode()]= $l;
       }
+      
+      $l->providesResource('module-info.xp') && self::loadModule($l);
       return $l;
     }
+    
+    /**
+     * Finds a module
+     *
+     * @param   string module
+     * @return  string
+     */
+    public static function findModule($module) {
+      foreach (array_unique(array($module, strtok($module, '-'))) as $name) {
+        $fn= getenv('HOME').'/.xp/apps/'.$name;
+        if (is_dir($fn)) {
+          return $fn;
+        } else if (strncasecmp(PHP_OS, 'Win', 3) === 0 && file_exists($fn.'.lnk')) {
+          $c= new COM('WScript.Shell');
+          return $c->CreateShortcut($fn.'.lnk')->TargetPath;
+        }
+      }
+      return NULL;
+    }
+    
+    /**
+     * Loads a module
+     *
+     * @param   lang.IClassLoader l
+     */
+    protected static function loadModule(IClassLoader $l) {
+      $declaration= $l->getResource('module-info.xp');
+      preg_match('/module ([^\(]+)\(([^\)]+)\)( requires ([^{]+))?/', $declaration, $m);
+      $meta= array(
+        'module'       => $m[1],
+        'version'      => $m[2],
+        'requirements' => array()
+      );
+      if (isset($m[3])) {
+        preg_match_all('/([^\(]+)\(([^\)]+)\)(, )?/', $m[4], $r, PREG_SET_ORDER);
+        foreach ($r as $match) {
+          if (!isset(xp::$registry['modules'][$match[1]])) {
+            if (NULL === ($dir= self::findModule($match[1]))) {
+              raise('lang.ElementNotFoundException', 'Dependency of '.$m[1].', '.$match[1].' not found');
+            }
+            foreach (explode(PATH_SEPARATOR, rtrim(scanpath(array($dir), getenv('HOME')), PATH_SEPARATOR)) as $path) {
+              self::registerPath($path);
+            }
+          }
+          $module= xp::$registry['modules'][$match[1]][1];
 
+          // 5.7+   => must be greater than 5.7.0
+          // 5.7*   => must be greater than or equal to 5.7.0
+          // 5.7.0  => must be equal to 5.7.0
+          if ('+' === substr($match[2], -1, 1)) {
+            $cmp= substr($match[2], 0, -1);
+            $op= 'gt';
+          } else if ('*' === substr($match[2], -1, 1)) {
+            $cmp= substr($match[2], 0, -1);
+            $op= 'ge';
+          } else {
+            $cmp= $match[2];
+            $op= 'eq';
+          }
+
+          if (!version_compare($module['version'], $cmp, $op)) {
+            raise('lang.ElementNotFoundException', 'Dependency of '.$m[1].', '.$match[1].' '.$match[2].' not met, have '.$module['version']);
+          }
+
+          $meta['requirements'][]= array('module' => $match[1], 'constraint' => $match[2]);
+        }
+      }
+      $class= ucfirst(strtr($m[1], '.-', '__')).'Module';
+      with ($dyn= DynamicClassLoader::instanceFor('modules')); {
+        $dyn->setClassBytes($class, '?>'.str_replace($m[0], 'class '.$class.' extends Object ', $declaration));
+        $t= $dyn->loadClass($class);
+        xp::$registry['modules'][$m[1]]= array($t, $meta);
+      }
+    }
+
     /**
      * Unregister a class loader as a delegate
      *
Index: tools/xp/command/Runner.class.php
===================================================================
--- tools/xp/command/Runner.class.php	(revision 14750)
+++ tools/xp/command/Runner.class.php	(working copy)
@@ -221,28 +221,31 @@
         $uri= $file->getURI();
         $path= dirname($uri);
         $paths= array_flip(array_map('realpath', xp::$registry['classpath']));
-        $class= NULL;
+        $classname= NULL;
         while (FALSE !== ($pos= strrpos($path, DIRECTORY_SEPARATOR))) { 
           if (isset($paths[$path])) {
-            $class= XPClass::forName(strtr(substr($uri, strlen($path)+ 1, -10), DIRECTORY_SEPARATOR, '.'));
+            $classname= strtr(substr($uri, strlen($path)+ 1, -10), DIRECTORY_SEPARATOR, '.');
             break;
           }
-
           $path= substr($path, 0, $pos); 
         }
-
-        if (!$class) {
+        if (!$classname) {
           self::$err->writeLine('*** Cannot load class from ', $file);
           return 1;
         }
-      } else {
-        try {
-          $class= XPClass::forName($classname);
-        } catch (ClassNotFoundException $e) {
-          self::$err->writeLine('*** ', $e->getMessage());
-          return 1;
+      } else if (NULL !== ($dir= ClassLoader::findModule($classname))) {
+        foreach (explode(PATH_SEPARATOR, rtrim(scanpath(array($dir), getenv('HOME')), PATH_SEPARATOR)) as $path) {
+          ClassLoader::registerPath($path);
         }
+        $classname= xp::$registry['modules'][strtok($classname, '-')][0]->getAnnotation('main');
       }
+
+      try {
+        $class= XPClass::forName($classname);
+      } catch (ClassNotFoundException $e) {
+        self::$err->writeLine('*** ', $e->getMessage());
+        return 1;
+      }
       
       // Check whether class is runnable
       if (!$class->isSubclassOf('lang.Runnable')) {
