Index: skeleton/rdbms/sybase/SybaseConnection.class.php
===================================================================
--- skeleton/rdbms/sybase/SybaseConnection.class.php	(revision 12005)
+++ skeleton/rdbms/sybase/SybaseConnection.class.php	(working copy)
@@ -22,7 +22,6 @@
    * @purpose  Database connection
    */
   class SybaseConnection extends DBConnection {
-  
     private
       $formatter= NULL;
 
@@ -62,7 +61,7 @@
       }
 
       if (!is_resource($this->handle)) {
-        throw(new SQLConnectException(trim(sybase_get_last_message()), $this->dsn));
+        throw new SQLConnectException(trim(sybase_get_last_message()), $this->dsn);
       }
       
       $this->_obs && $this->notifyObservers(new DBEvent(__FUNCTION__, $reconnect));
@@ -91,11 +90,11 @@
      */
     public function selectdb($db) {
       if (!sybase_select_db($db, $this->handle)) {
-        throw(new SQLStatementFailedException(
+        throw new SQLStatementFailedException(
           'Cannot select database: '.trim(sybase_get_last_message()),
           'use '.$db,
           current(sybase_fetch_row(sybase_query('select @@error', $this->handle)))
-        ));
+        );
       }
       return TRUE;
     }
@@ -233,17 +232,19 @@
           // Sybase:  Client message:  Read from SQL server failed. (severity 78)
           //
           // but that seems a bit errorprone. 
-          throw(new SQLConnectionClosedException(
+          throw new SQLConnectionClosedException(
             'Statement failed: '.trim(sybase_get_last_message()), 
             $sql
-          ));
+          );
         }
-
-        throw(new SQLStatementFailedException(
-          'Statement failed: '.trim(sybase_get_last_message()), 
-          $sql,
-          current(sybase_fetch_row($error))
-        ));
+        
+        $code= current(sybase_fetch_row($error));
+        $message= trim(sybase_get_last_message());
+        if (1205 == $code) {
+          throw new SQLDeadlockException($message, $sql);
+        } else {
+          throw new SQLStatementFailedException('Statement failed: '.$message, $sql, $code);
+        }
       }
       
       if (TRUE === $result) {
Index: skeleton/rdbms/DBTableAttribute.class.php
===================================================================
--- skeleton/rdbms/DBTableAttribute.class.php	(revision 12005)
+++ skeleton/rdbms/DBTableAttribute.class.php	(working copy)
@@ -44,7 +44,7 @@
     public 
       $name=        '',
       $type=        -1,
-      $ident=       FALSE,
+      $identity=    FALSE,
       $nullable=    FALSE,
       $length=      0,
       $precision=   0,
@@ -77,10 +77,27 @@
       $this->length= $length;
       $this->precision= $precision;
       $this->scale= $scale;
-      
     }
     
     /**
+     * Returns true if another object is equal to this table attribute
+     *
+     * @param   lang.Generic cmp
+     * @return  bool
+     */
+    public function equals($cmp) {
+      return $cmp instanceof self && (
+        $this->name === $cmp->name &&
+        $this->type === $cmp->type &&
+        $this->identity === $cmp->identity &&
+        $this->nullable === $cmp->nullable &&
+        $this->length === $cmp->length &&
+        $this->precision === $cmp->precision &&
+        $this->scale === $cmp->scale
+      );
+    }
+    
+    /**
      * Returns whether this attribute is an identity field
      *
      * @return  bool
Index: skeleton/rdbms/pgsql/PostgreSQLConnection.class.php
===================================================================
--- skeleton/rdbms/pgsql/PostgreSQLConnection.class.php	(revision 12005)
+++ skeleton/rdbms/pgsql/PostgreSQLConnection.class.php	(working copy)
@@ -190,33 +190,54 @@
       $sql= call_user_func_array(array($this, 'prepare'), $args);
 
       if (!is_resource($this->handle)) {
-        if (!($this->flags & DB_AUTOCONNECT)) throw(new SQLStateException('Not connected'));
+        if (!($this->flags & DB_AUTOCONNECT)) throw new SQLStateException('Not connected');
         $c= $this->connect();
         
         // Check for subsequent connection errors
-        if (FALSE === $c) throw(new SQLStateException('Previously failed to connect.'));
+        if (FALSE === $c) throw new SQLStateException('Previously failed to connect.');
       }
       
       $this->_obs && $this->notifyObservers(new DBEvent(__FUNCTION__, $sql));
 
-      $result= pg_query($this->handle, $sql);
-
-      if (empty($result)) {
-        throw(new SQLStatementFailedException(
-          'Statement failed: '.rtrim(pg_last_error($this->handle)),
-          $sql
-        ));
+      $success= pg_send_query($this->handle, $sql);
+      if (!$success) {
+        if (PGSQL_CONNECTION_OK !== pg_connection_status($this->handle)) {
+          throw new SQLConnectionClosedException(
+            'Statement failed: '.trim(sybase_get_last_message()), 
+            $sql
+          );
+        } else {
+          throw new SQLStatementFailedException(
+            'Statement failed: '.rtrim(pg_last_error($this->handle)),
+            $sql
+          );
+        }
       }
       
-      if (TRUE === $result) {
-        $this->_obs && $this->notifyObservers(new DBEvent('queryend', TRUE));
-        return TRUE;
+      $result= pg_get_result($this->handle);
+      switch ($status= pg_result_status($result, PGSQL_STATUS_LONG)) {
+        case PGSQL_FATAL_ERROR: case PGSQL_BAD_RESPONSE: {
+          $code= pg_result_error_field($result, PGSQL_DIAG_SQLSTATE);
+          $message= pg_result_error_field($result, PGSQL_DIAG_MESSAGE_PRIMARY);
+          if ('40P01' == $code) {
+            throw new SQLDeadlockException($message, $sql);
+          } else {
+            throw new SQLStatementFailedException('Statement failed: '.$message, $sql, $code);
+          }
+        }
+        
+        case PGSQL_COMMAND_OK: {
+          $this->_obs && $this->notifyObservers(new DBEvent('queryend', TRUE));
+          return TRUE;
+        }
+        
+        default: {
+          $resultset= new PostgreSQLResultSet($result);
+          $this->_obs && $this->notifyObservers(new DBEvent('queryend', $resultset));
+
+          return $resultset;
+        }
       }
-
-      $resultset= new PostgreSQLResultSet($result);
-      $this->_obs && $this->notifyObservers(new DBEvent('queryend', $resultset));
-
-      return $resultset;
     }
     
     /**
Index: skeleton/rdbms/mysql/MySQLConnection.class.php
===================================================================
--- skeleton/rdbms/mysql/MySQLConnection.class.php	(revision 12005)
+++ skeleton/rdbms/mysql/MySQLConnection.class.php	(working copy)
@@ -254,19 +254,21 @@
         switch ($e= mysql_errno($this->handle)) {
           case 2006: // MySQL server has gone away
           case 2013: // Lost connection to MySQL server during query
-            throw(new SQLConnectionClosedException(
+            throw new SQLConnectionClosedException(
               'Statement failed: '.mysql_error($this->handle), 
               $sql, 
               $e
-            ));
-            break;
+            );
           
+          case 1213:  // Deadlock
+            throw new SQLDeadlockException(mysql_error($this->handle), $sql);
+          
           default:  
-            throw(new SQLStatementFailedException(
+            throw new SQLStatementFailedException(
               'Statement failed: '.mysql_error($this->handle), 
               $sql, 
               $e
-            ));
+            );
         }
       }
       
