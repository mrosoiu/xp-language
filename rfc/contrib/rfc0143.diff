Index: skeleton/img/util/ExifData.class.php
===================================================================
--- skeleton/img/util/ExifData.class.php	(revision 11284)
+++ skeleton/img/util/ExifData.class.php	(working copy)
@@ -9,16 +9,29 @@
     'img.ImagingException',
     'img.Image',
     'img.io.StreamReader',
-    'io.Stream'
+    'io.Stream',
+    'lang.ElementNotFoundException'
   );
 
   /**
    * Reads the EXIF headers from JPEG or TIFF
    *
+   * <code>
+   *   uses('img.util.ExifData', 'io.File');
+   *
+   *   // Use empty Exif data as default value when no Exif data is found
+   *   echo ExifData::fromFile(new File($filename), ExifData::$EMPTY)->toString();
+   * </code>
+   *
+   * @test     xp://net.xp_framework.unittest.img.ExifDataTest
+   * @see      php://exif_read_data
    * @ext      exif
    * @purpose  Utility
    */
   class ExifData extends Object {
+    public static
+      $EMPTY= NULL;
+
     public
       $height           = 0,
       $width            = 0,
@@ -39,18 +52,32 @@
       $isoSpeedRatings  = 0,
       $focalLength      = 0;
 
+    static function __static() {
+      self::$EMPTY= new self();
+    }
+
     /**
      * Read from a file
      *
      * @param   io.File file
+     * @param   mixed default default void what should be returned in case no data is found
      * @return  img.util.ExifData
-     * @throws  img.ImagingException in case extracting data fails
+     * @throws  lang.FormatException in case malformed meta data is encountered
+     * @throws  lang.ElementNotFoundException in case no meta data is available
+     * @throws  img.ImagingException in case reading meta data fails
      */
-    public static function fromFile($file) {
+    public static function fromFile(File $file) {
+      if (FALSE === getimagesize($file->getURI(), $info)) {
+        throw new ImagingException('Cannot read image information from '.$file->getURI());
+      }
+      if (!isset($info['APP1'])) {
+        if (func_num_args() > 1) return func_get_arg(1);
+        throw new ElementNotFoundException(
+          'Cannot get EXIF information from '.$file->getURI().' (no APP1 marker)' 
+        );
+      }
       if (!($info= exif_read_data($file->getURI()))) {
-        throw(new ImagingException(
-          'Cannot get EXIF information from '.$file->getURI()
-        ));
+        throw new FormatException('Cannot get EXIF information from '.$file->getURI());
       }
       
       // Calculate orientation from dimensions if not available
Index: skeleton/img/util/IptcData.class.php
===================================================================
--- skeleton/img/util/IptcData.class.php	(revision 11284)
+++ skeleton/img/util/IptcData.class.php	(working copy)
@@ -4,23 +4,33 @@
  * $Id$ 
  */
 
-  uses('util.Date', 'img.ImagingException');
+  uses(
+    'util.Date', 
+    'img.ImagingException', 
+    'lang.ElementNotFoundException'
+  );
 
   /**
-   * Reads the IPTC headers from Photoshop-files, JPEG or TIFF
+   * Reads the IPTC headers from Photoshop-files, JPEGs or TIFFs
    *
    * <code>
    *   uses('img.util.IptcData', 'io.File');
-   *   $i= IptcData::fromFile(new File($filename));
-   *   echo $i->toString();
+   *
+   *   // Use empty iptc data as default value when no iptc data is found
+   *   echo IptcData::fromFile(new File($filename), IptcData::$EMPTY)->toString();
    * </code>
    *
-   * @ext      iptc
+   * @test     xp://net.xp_framework.unittest.img.IptcDataTest
    * @purpose  Utility
+   * @see      php://iptcparse
+   * @see      http://photothumb.com/IPTCExt/
    * @see      http://www.controlledvocabulary.com/pdf/IPTC_mapped_fields.pdf
    */
   class IptcData extends Object {
-    protected
+    public static
+      $EMPTY= NULL;
+
+    public
       $title                         = '',
       $urgency                       = '',
       $category                      = '',
@@ -41,21 +51,33 @@
       $supplementalCategories        = array(),
       $originalTransmissionReference = '';
 
+    static function __static() {
+      self::$EMPTY= new self();
+    }
+
     /**
      * Read from a file
      *
      * @param   io.File file
+     * @param   mixed default default void what should be returned in case no data is found
      * @return  img.util.IptcData
-     * @throws  img.ImagingException in case extracting data fails
+     * @throws  lang.FormatException in case malformed meta data is encountered
+     * @throws  lang.ElementNotFoundException in case no meta data is available
+     * @throws  img.ImagingException in case reading meta data fails
      */
-    public static function fromFile($file) {
-      getimagesize($file->getURI(), $info);
-      if (!($info['APP13'])) {
-        throw new ImagingException(
-          'Cannot get IPTC information from '.$file->getURI()
+    public static function fromFile(File $file) {
+      if (FALSE === getimagesize($file->getURI(), $info)) {
+        throw new ImagingException('Cannot read image information from '.$file->getURI());
+      }
+      if (!isset($info['APP13'])) {
+        if (func_num_args() > 1) return func_get_arg(1);
+        throw new ElementNotFoundException(
+          'Cannot get IPTC information from '.$file->getURI().' (no APP13 marker)'
         );
       }
-      $iptc= iptcparse($info['APP13']);
+      if (!($iptc= iptcparse($info['APP13']))) {
+        throw new FormatException('Cannot parse IPTC information from '.$file->getURI());
+      }
       
       // Parse creation date
       if (3 == sscanf($iptc['2#055'][0], '%4d%2d%d', $year, $month, $day)) {
@@ -65,25 +87,25 @@
       }
 
       with ($i= new self()); {
-        $i->setTitle($iptc['2#005'][0]);
-        $i->setUrgency($iptc['2#010'][0]);
-        $i->setCategory($iptc['2#015'][0]);
-        $i->setSupplementalCategories($iptc['2#020']);
-        $i->setKeywords($iptc['2#025']);
-        $i->setSpecialInstructions($iptc['2#040'][0]);
+        $i->setTitle(@$iptc['2#005'][0]);
+        $i->setUrgency(@$iptc['2#010'][0]);
+        $i->setCategory(@$iptc['2#015'][0]);
+        $i->setSupplementalCategories(@$iptc['2#020']);
+        $i->setKeywords(@$iptc['2#025']);
+        $i->setSpecialInstructions(@$iptc['2#040'][0]);
         $i->setDateCreated($created);
-        $i->setAuthor($iptc['2#080'][0]);
-        $i->setAuthorPosition($iptc['2#085'][0]);
-        $i->setCity($iptc['2#090'][0]);
-        $i->setState($iptc['2#095'][0]);
-        $i->setCountry($iptc['2#101'][0]);
-        $i->setOriginalTransmissionReference($iptc['2#103'][0]);   
-        $i->setHeadline($iptc['2#105'][0]);
-        $i->setCredit($iptc['2#110'][0]);
-        $i->setSource($iptc['2#115'][0]);
-        $i->setCopyrightNotice($iptc['2#116'][0]);
-        $i->setCaption($iptc['2#120'][0]);
-        $i->setWriter($iptc['2#122'][0]);
+        $i->setAuthor(@$iptc['2#080'][0]);
+        $i->setAuthorPosition(@$iptc['2#085'][0]);
+        $i->setCity(@$iptc['2#090'][0]);
+        $i->setState(@$iptc['2#095'][0]);
+        $i->setCountry(@$iptc['2#101'][0]);
+        $i->setOriginalTransmissionReference(@$iptc['2#103'][0]);   
+        $i->setHeadline(@$iptc['2#105'][0]);
+        $i->setCredit(@$iptc['2#110'][0]);
+        $i->setSource(@$iptc['2#115'][0]);
+        $i->setCopyrightNotice(@$iptc['2#116'][0]);
+        $i->setCaption(@$iptc['2#120'][0]);
+        $i->setWriter(@$iptc['2#122'][0]);
       }
       return $i;
     }
@@ -167,9 +189,9 @@
     /**
      * Set DateCreated
      *
-     * @param   util.Date dateCreated
+     * @param   util.Date dateCreated default NULL
      */
-    public function setDateCreated(Date $dateCreated) {
+    public function setDateCreated(Date $dateCreated= NULL) {
       $this->dateCreated= $dateCreated;
     }
 
Index: ports/classes/net/xp_framework/unittest/img/ExifDataTest.class.php
===================================================================
--- ports/classes/net/xp_framework/unittest/img/ExifDataTest.class.php	(revision 0)
+++ ports/classes/net/xp_framework/unittest/img/ExifDataTest.class.php	(revision 0)
@@ -0,0 +1,91 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  uses('net.xp_framework.unittest.img.MetaDataTest', 'img.util.ExifData');
+
+  /**
+   * TestCase for IptcData class
+   *
+   * @see      xp://net.xp_framework.unittest.img.MetaDataTest
+   * @see      xp://img.util.ExifData
+   * @purpose  Unittest
+   */
+  class ExifDataTest extends MetaDataTest {
+
+    /**
+     * Sets up this unittest 
+     *
+     * @throws  unittest.PrerequisitesNotMetError
+     */
+    public function setUp() {
+      if (!extension_loaded('exif')) {
+        throw new PrerequisitesNotMetError('EXIF extension not loaded');
+      }
+    }
+
+    /**
+     * Extract from file and return the instance
+     *
+     * @param   io.File f
+     * @return  lang.Generic the instance
+     */
+    protected function extractFromFile(File $f) {
+      return ExifData::fromFile($f);
+    }
+
+    /**
+     * Test default value is returned if no Exif data is found
+     *
+     */
+    #[@test]
+    public function defaultValueIfNotFound() {
+      $this->assertNull(ExifData::fromFile($this->resourceAsFile('iptc-only.jpg'), NULL));
+    }
+
+    /**
+     * Test empty EXIF data
+     *
+     */
+    #[@test]
+    public function emptyExifData() {
+      $this->assertEquals(0, ExifData::$EMPTY->getWidth());
+    }
+  
+    /**
+     * Test reading Exif data from a file which contains exif-data
+     * only
+     *
+     */
+    #[@test, @expect('lang.ElementNotFoundException')]
+    public function fromFileWithoutExif() {
+      $this->extractFromFile($this->resourceAsFile('iptc-only.jpg'));
+    }
+
+    /**
+     * Test reading Exif data from a file which contains exif-data
+     * AND Exif-data
+     *
+     */
+    #[@test]
+    public function fromFileWithExifAndIptc() {
+      $i= $this->extractFromFile($this->resourceAsFile('exif-and-iptc.jpg'));
+      $this->assertEquals(1, $i->getWidth());
+      $this->assertEquals(1, $i->getHeight());
+    }
+
+    /**
+     * Test reading Exif data from a file which contains exif-data
+     * AND Exif-data
+     *
+     */
+    #[@test]
+    public function fromFile() {
+      $i= $this->extractFromFile($this->resourceAsFile('exif-only.jpg'));
+      $this->assertEquals(1, $i->getWidth());
+      $this->assertEquals(1, $i->getHeight());
+    }
+  }
+?>
Index: ports/classes/net/xp_framework/unittest/img/IptcDataTest.class.php
===================================================================
--- ports/classes/net/xp_framework/unittest/img/IptcDataTest.class.php	(revision 0)
+++ ports/classes/net/xp_framework/unittest/img/IptcDataTest.class.php	(revision 0)
@@ -0,0 +1,78 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  uses('net.xp_framework.unittest.img.MetaDataTest', 'img.util.IptcData');
+
+  /**
+   * TestCase for IptcData class
+   *
+   * @see      xp://net.xp_framework.unittest.img.MetaDataTest
+   * @see      xp://img.util.IptcData
+   * @purpose  Unittest
+   */
+  class IptcDataTest extends MetaDataTest {
+
+    /**
+     * Extract from file and return the instance
+     *
+     * @param   io.File f
+     * @return  lang.Generic the instance
+     */
+    protected function extractFromFile(File $f) {
+      return IptcData::fromFile($f);
+    }
+
+    /**
+     * Test default value is returned if no IPTC data is found
+     *
+     */
+    #[@test]
+    public function defaultValueIfNotFound() {
+      $this->assertNull(IptcData::fromFile($this->resourceAsFile('exif-only.jpg'), NULL));
+    }
+
+    /**
+     * Test empty IPTC data
+     *
+     */
+    #[@test]
+    public function emptyIptcData() {
+      $this->assertEquals('', IptcData::$EMPTY->getTitle());
+    }
+  
+    /**
+     * Test reading IPTC data from a file which contains exif-data
+     * only
+     *
+     */
+    #[@test, @expect('lang.ElementNotFoundException')]
+    public function fromFileWithoutIptc() {
+      $this->extractFromFile($this->resourceAsFile('exif-only.jpg'));
+    }
+
+    /**
+     * Test reading IPTC data from a file which contains exif-data
+     * AND iptc-data
+     *
+     */
+    #[@test]
+    public function fromFileWithExifAndIptc() {
+      $i= $this->extractFromFile($this->resourceAsFile('exif-and-iptc.jpg'));
+      $this->assertEquals('Unittest Image', $i->getTitle());
+    }
+
+    /**
+     * Test reading IPTC data from a file which contains exif-data
+     * AND iptc-data
+     *
+     */
+    #[@test]
+    public function fromFile() {
+      $i= $this->extractFromFile($this->resourceAsFile('iptc-only.jpg'));
+      $this->assertEquals('Unittest Image', $i->getTitle());
+    }
+  }
+?>
Index: ports/classes/net/xp_framework/unittest/img/exif-and-iptc.jpg
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: ports/classes/net/xp_framework/unittest/img/exif-and-iptc.jpg
___________________________________________________________________
Name: svn:executable
   + *
Name: svn:mime-type
   + application/octet-stream

Index: ports/classes/net/xp_framework/unittest/img/exif-only.jpg
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: ports/classes/net/xp_framework/unittest/img/exif-only.jpg
___________________________________________________________________
Name: svn:executable
   + *
Name: svn:mime-type
   + application/octet-stream

Index: ports/classes/net/xp_framework/unittest/img/empty.jpg
===================================================================
Index: ports/classes/net/xp_framework/unittest/img/iptc-only.jpg
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: ports/classes/net/xp_framework/unittest/img/iptc-only.jpg
___________________________________________________________________
Name: svn:executable
   + *
Name: svn:mime-type
   + application/octet-stream

