Index: remote/protocol/SerializedData.class.php
===================================================================
--- remote/protocol/SerializedData.class.php	(revision 0)
+++ remote/protocol/SerializedData.class.php	(revision 0)
@@ -0,0 +1,81 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$
+ */
+
+  /**
+   * Class that represents a chunk of serialized data
+   *
+   * @test     xp://remote.protocol.Serializer
+   * @purpose  Value object
+   */
+  class SerializedData extends Object {
+    var
+      $buffer= '',
+      $offset= 0;
+
+    /**
+     * Constructor
+     * 
+     * @access  public
+     * @param   string buffer
+     */
+    function __construct($buffer) {
+      $this->buffer= &$buffer;
+      $this->offset= 0;
+    }
+    
+    /**
+     * Consume a string ([length]:"[string]")
+     * 
+     * @access  public
+     * @return  string
+     */
+    function consumeString() {
+      $l= substr(
+        $this->buffer, 
+        $this->offset, 
+        strpos($this->buffer, ':', $this->offset)- $this->offset
+      );
+      $b= strlen($l)+ 2;              // 1 for ':', 1 for '"'
+      $v= substr($this->buffer, $this->offset + $b, $l);
+      $this->offset+= $b + $l + 2;    // 1 for '"', +1 to set the marker behind
+      return $v;
+    }
+
+    /**
+     * Consume everything up to the next ";" and return it
+     * 
+     * @access  public
+     * @param   string stop
+     * @return  string
+     */     
+    function consumeWord() {
+      $v= substr(
+        $this->buffer, 
+        $this->offset, 
+        strpos($this->buffer, ';', $this->offset)- $this->offset
+      ); 
+      $this->offset+= strlen($v)+ 1;  // +1 to set the marker behind
+      return $v;
+    }
+
+    /**
+     * Consume everything up to the next ":" character and return it
+     * 
+     * @access  public
+     * @param   string stop
+     * @return  string
+     */     
+    function consumeSize() {
+      $v= substr(
+        $this->buffer, 
+        $this->offset, 
+        strpos($this->buffer, ':', $this->offset)- $this->offset
+      ); 
+      $this->offset+= strlen($v)+ 1;  // +1 to set the marker behind
+      return $v;
+    }
+  }
+?>
Index: remote/protocol/SerializerMapping.class.php
===================================================================
--- remote/protocol/SerializerMapping.class.php	(revision 8499)
+++ remote/protocol/SerializerMapping.class.php	(working copy)
@@ -16,12 +16,11 @@
      *
      * @access  public
      * @param   &server.protocol.Serializer serializer
-     * @param   string serialized
-     * @param   &int length
+     * @param   &remote.protocol.SerializedData serialized
      * @param   array<string, mixed> context default array()
      * @return  &mixed
      */
-    function &valueOf(&$serializer, $serialized, &$length, $context= array()) { }
+    function &valueOf(&$serializer, &$serialized, $context= array()) { }
 
     /**
      * Returns an on-the-wire representation of the given value
Index: remote/protocol/ArrayListMapping.class.php
===================================================================
--- remote/protocol/ArrayListMapping.class.php	(revision 8499)
+++ remote/protocol/ArrayListMapping.class.php	(working copy)
@@ -19,20 +19,19 @@
      *
      * @access  public
      * @param   &server.protocol.Serializer serializer
-     * @param   string serialized
-     * @param   &int length
+     * @param   &remote.protocol.SerializedData serialized
      * @param   array<string, mixed> context default array()
      * @return  &mixed
      */
-    function &valueOf(&$serializer, $serialized, &$length, $context= array()) {
+    function &valueOf(&$serializer, &$serialized, $context= array()) {
       $a= &new ArrayList();
-      $size= substr($serialized, 2, strpos($serialized, ':', 2)- 2);
-      $offset= strlen($size)+ 2+ 2;
+      $size= $serialized->consumeSize();
+      
+      $serialized->offset++;  // Opening "{"
       for ($i= 0; $i < $size; $i++) {
-        $a->values[$i]= &$serializer->valueOf(substr($serialized, $offset), $len, $context);
-        $offset+= $len;
+        $a->values[$i]= &$serializer->valueOf($serialized, $context);
       }
-      $length= $offset+ 1;
+      $serialized->offset++;  // Closing "}"
       return $a;
     }
 
Index: remote/protocol/RemoteInterfaceMapping.class.php
===================================================================
--- remote/protocol/RemoteInterfaceMapping.class.php	(revision 8499)
+++ remote/protocol/RemoteInterfaceMapping.class.php	(working copy)
@@ -27,18 +27,14 @@
      * Returns a value for the given serialized string
      *
      * @access  public
-     * @param   &remote.protocol.Serializer serializer
-     * @param   string serialized
-     * @param   &int length
+     * @param   &server.protocol.Serializer serializer
+     * @param   &remote.protocol.SerializedData serialized
      * @param   array<string, mixed> context default array()
      * @return  &mixed
      */
-    function &valueOf(&$serializer, $serialized, &$length, $context= array()) {
-      $oid= substr($serialized, 2, strpos($serialized, ':', 2)- 2);
-      $offset= 2 + 2 + strlen($oid);
-      $interface= $serializer->valueOf(substr($serialized, $offset), $len, $context);
-      $offset+= $len;
-      
+    function &valueOf(&$serializer, &$serialized, $context= array()) {
+      $oid= $serialized->consumeSize();
+      $interface= $serialized->consumeSize();
       try(); {
         $iclass= &XPClass::forName($interface);
       } if (catch('ClassNotFoundException', $e)) {
@@ -56,7 +52,6 @@
         return throw($e);
       }
 
-      $length= $offset+ 1;
       return $instance;
     }
 
Index: remote/protocol/DateMapping.class.php
===================================================================
--- remote/protocol/DateMapping.class.php	(revision 8499)
+++ remote/protocol/DateMapping.class.php	(working copy)
@@ -19,15 +19,12 @@
      *
      * @access  public
      * @param   &server.protocol.Serializer serializer
-     * @param   string serialized
-     * @param   &int length
+     * @param   &remote.protocol.SerializedData serialized
      * @param   array<string, mixed> context default array()
      * @return  &mixed
      */
-    function &valueOf(&$serializer, $serialized, &$length, $context= array()) {
-      $v= substr($serialized, 2, strpos($serialized, ';', 2)- 2); 
-      $length= strlen($v)+ 3;
-      $value= &new Date((int)$v);
+    function &valueOf(&$serializer, &$serialized, $context= array()) {
+      $value= &new Date((int)$serialized->consumeWord());
       return $value;
     }
 
Index: remote/protocol/HashmapMapping.class.php
===================================================================
--- remote/protocol/HashmapMapping.class.php	(revision 8499)
+++ remote/protocol/HashmapMapping.class.php	(working copy)
@@ -19,12 +19,11 @@
      *
      * @access  public
      * @param   &server.protocol.Serializer serializer
-     * @param   string serialized
-     * @param   &int length
+     * @param   &remote.protocol.SerializedData serialized
      * @param   array<string, mixed> context default array()
      * @return  &mixed
      */
-    function &valueOf(&$serializer, $serialized, &$length, $context= array()) {
+    function &valueOf(&$serializer, &$serialized, $context= array()) {
       // No implementation
     }
 
Index: remote/protocol/XpProtocolHandler.class.php
===================================================================
--- remote/protocol/XpProtocolHandler.class.php	(revision 8499)
+++ remote/protocol/XpProtocolHandler.class.php	(working copy)
@@ -286,12 +286,12 @@
           case REMOTE_MSG_VALUE:
             $data= &ByteCountedString::readFrom($this->_sock);
             $this->cat && $this->cat->debug('<<< Response:', addcslashes($data, "\0..\37!@\177..\377"));
-            return $this->serializer->valueOf($data, $length= 0, $ctx);
+            return $this->serializer->valueOf(new SerializedData($data), $ctx);
 
           case REMOTE_MSG_EXCEPTION:
             $data= &ByteCountedString::readFrom($this->_sock);
             $this->cat && $this->cat->debug('<<< Response:', addcslashes($data, "\0..\37!@\177..\377"));
-            $reference= &$this->serializer->valueOf($data, $length= 0, $ctx);
+            $reference= &$this->serializer->valueOf(new SerializedData($data), $ctx);
             if (is('RemoteException', $reference)) {
               return throw($reference);
             } else if (is('ExceptionReference', $reference)) {
Index: remote/protocol/Serializer.class.php
===================================================================
--- remote/protocol/Serializer.class.php	(revision 8499)
+++ remote/protocol/Serializer.class.php	(working copy)
@@ -5,6 +5,7 @@
  */
 
   uses(
+    'remote.protocol.SerializedData',
     'remote.protocol.DateMapping',
     'remote.protocol.LongMapping',
     'remote.protocol.ByteMapping',
@@ -204,19 +205,18 @@
       if (NULL !== $replace) $this->packages[$name]= $replace;
       return strtr($name, $this->packages);
     }
-
+    
     /**
      * Retrieve serialized representation of a variable
      *
      * @access  public
-     * @param   string serialized
-     * @param   &int length
+     * @param   &remote.protocol.SerializedData serialized
      * @param   array context default array()
      * @return  &mixed
      * @throws  lang.ClassNotFoundException if a class cannot be found
      * @throws  lang.FormatException if an error is encountered in the format 
      */  
-    function &valueOf($serialized, &$length, $context= array()) {
+    function &valueOf(&$serialized, $context= array()) {
       static $types= NULL;
       
       if (!$types) $types= array(
@@ -234,130 +234,109 @@
         'T'   => new ClassReference('util.Date')
       );
 
-      switch ($serialized{0}) {
+      $token= $serialized->buffer{$serialized->offset};
+      $serialized->offset+= 2; 
+      switch ($token) {
         case 'N': {     // null
-          $length= 2; 
           $value= NULL;
           return $value;
         }
 
         case 'b': {     // booleans
-          $length= 4; 
-          $value= (bool)substr($serialized, 2, strpos($serialized, ';', 2)- 2);
+          $value= (bool)$serialized->consumeWord();
           return $value;
         }
 
         case 'i': {     // integers
-          $v= substr($serialized, 2, strpos($serialized, ';', 2)- 2); 
-          $length= strlen($v)+ 3;
-          $value= (int)$v;
+          $value= (int)$serialized->consumeWord();
           return $value;
         }
 
         case 'd': {     // decimals
-          $v= substr($serialized, 2, strpos($serialized, ';', 2)- 2); 
-          $length= strlen($v)+ 3;
-          $value= (float)$v;
+          $value= (float)$serialized->consumeWord();
           return $value;
         }
 
         case 's': {     // strings
-          $strlen= substr($serialized, 2, strpos($serialized, ':', 2)- 2);
-          $length= 2 + strlen($strlen) + 2 + $strlen + 2;
-          $value= substr($serialized, 2+ strlen($strlen)+ 2, $strlen);
+          $value= $serialized->consumeString();
           return $value;
         }
 
         case 'a': {     // arrays
           $a= array();
-          $size= substr($serialized, 2, strpos($serialized, ':', 2)- 2);
-          $offset= strlen($size)+ 2+ 2;
+          $size= $serialized->consumeSize();
+          $serialized->offset++;  // Opening "{"
           for ($i= 0; $i < $size; $i++) {
-            $key= $this->valueOf(substr($serialized, $offset), $len, $context);
-            $offset+= $len;
-            $a[$key]= &$this->valueOf(substr($serialized, $offset), $len, $context);
-            $offset+= $len;
+            $key= $this->valueOf($serialized, $context);
+            $a[$key]= &$this->valueOf($serialized, $context);
           }
-          $length= $offset+ 1;
+          $serialized->offset++;  // Closing "}"
           return $a;
         }
 
         case 'E': {     // generic exceptions
-          $len= substr($serialized, 2, strpos($serialized, ':', 2)- 2);
-          $instance= &new ExceptionReference(substr($serialized, 2+ strlen($len)+ 2, $len));
-          $offset= 2 + 2 + strlen($len)+ $len + 2;
-          $size= substr($serialized, $offset, strpos($serialized, ':', $offset)- $offset);
-          $offset+= strlen($size)+ 2;
+          $instance= &new ExceptionReference($serialized->consumeString());
+          $size= $serialized->consumeSize();
+          $serialized->offset++;  // Opening "{"
           for ($i= 0; $i < $size; $i++) {
-            $member= $this->valueOf(substr($serialized, $offset), $len, $context);
-            $offset+= $len;
-            $instance->{$member}= &$this->valueOf(substr($serialized, $offset), $len, $context);
-            $offset+= $len;
+            $member= $this->valueOf($serialized, $context);
+            $instance->{$member}= &$this->valueOf($serialized, $context);
           }
-          $length= $offset+ 1;
+          $serialized->offset++; // Closing "}"
           return $instance;
         }
         
         case 'O': {     // generic objects
-          $len= substr($serialized, 2, strpos($serialized, ':', 2)- 2);
-          $name= $this->packageMapping(substr($serialized, 2+ strlen($len)+ 2, $len));
+          $name= $serialized->consumeString();
           try(); {
             $class= &XPClass::forName($name);
           } if (catch('ClassNotFoundException', $e)) {
             $instance= &new UnknownRemoteObject($name);
-            $offset= 2 + 2 + strlen($len)+ $len + 2;
-            $size= substr($serialized, $offset, strpos($serialized, ':', $offset)- $offset);
-            $offset+= strlen($size)+ 2;
-            $members= array();
+            $size= $serialized->consumeSize();
+            $serialized->offset++;  // Opening "{"
             for ($i= 0; $i < $size; $i++) {
-              $member= $this->valueOf(substr($serialized, $offset), $len, $context);
-              $offset+= $len;
-              $members[$member]= &$this->valueOf(substr($serialized, $offset), $len, $context);
-              $offset+= $len;
+              $member= $this->valueOf($serialized, $context);
+              $members[$member]= &$this->valueOf($serialized, $context);
             }
-            $length= $offset+ 1;
+            $serialized->offset++; // Closing "}"
             $instance->__members= $members;
             return $instance;
           }
 
           $instance= &$class->newInstance();
-          $offset= 2 + 2 + strlen($len)+ $len + 2;
-          $size= substr($serialized, $offset, strpos($serialized, ':', $offset)- $offset);
-          $offset+= strlen($size)+ 2;
+          $size= $serialized->consumeSize();
+          $serialized->offset++;  // Opening "{"
           for ($i= 0; $i < $size; $i++) {
-            $member= $this->valueOf(substr($serialized, $offset), $len, $context);
-            $offset+= $len;
-            $instance->{$member}= &$this->valueOf(substr($serialized, $offset), $len, $context);
-            $offset+= $len;
+            $member= $this->valueOf($serialized, $context);
+            $instance->{$member}= &$this->valueOf($serialized, $context);
           }
-          $length= $offset+ 1;
+          $serialized->offset++; // Closing "}"
           return $instance;
         }
 
         case 'c': {     // builtin classes
-          $length= 4;
-          $token= substr($serialized, 2, strpos($serialized, ';', 2)- 2);
-          if (!isset($types[$token])) {
-            return throw(new FormatException('Unknown token "'.$token.'"'));
+          $type= $serialized->consumeWord();
+          if (!isset($types[$type])) {
+            return throw(new FormatException('Unknown type token "'.$type.'"'));
           }
-          return $types[$token];
+          return $types[$type];
         }
         
         case 'C': {     // generic classes
-          $len= substr($serialized, 2, strpos($serialized, ':', 2)- 2);
-          $length= 2 + strlen($len) + 2 + $len + 2;
-          $value= &new ClassReference($this->packageMapping(substr($serialized, 2+ strlen($len)+ 2, $len)));
+          $len= substr($serialized->buffer, 2, strpos($serialized->buffer, ':', 2)- 2);
+          $serialized->offset+= 2 + strlen($len) + 2 + $len + 2;
+          $value= &new ClassReference($this->packageMapping(substr($serialized->buffer, 2+ strlen($len)+ 2, $len)));
           return $value;
         }
 
         default: {      // default, check if we have a mapping
-          if (!($mapping= &$this->mapping($serialized{0}, $m= NULL))) {
+          if (!($mapping= &$this->mapping($token, $m= NULL))) {
             return throw(new FormatException(
-              'Cannot deserialize unknown type "'.$serialized{0}.'" ('.$serialized.')'
+              'Cannot deserialize unknown type "'.$token.'" ('.$serialized->toString().')'
             ));
           }
 
-          return $mapping->valueOf($this, $serialized, $length, $context);
+          return $mapping->valueOf($this, $serialized, $context);
         }
       }
     }
Index: remote/protocol/IntegerMapping.class.php
===================================================================
--- remote/protocol/IntegerMapping.class.php	(revision 8499)
+++ remote/protocol/IntegerMapping.class.php	(working copy)
@@ -19,15 +19,12 @@
      *
      * @access  public
      * @param   &server.protocol.Serializer serializer
-     * @param   string serialized
-     * @param   &int length
+     * @param   &remote.protocol.SerializedData serialized
      * @param   array<string, mixed> context default array()
      * @return  &mixed
      */
-    function &valueOf(&$serializer, $serialized, &$length, $context= array()) {
-      $v= substr($serialized, 2, strpos($serialized, ';', 2)- 2); 
-      $length= strlen($v)+ 3;
-      $value= &new Integer($v);
+    function &valueOf(&$serializer, &$serialized, $context= array()) {
+      $value= &new Integer($serialized->consumeWord());
       return $value;
     }
 
Index: remote/protocol/StackTraceElementMapping.class.php
===================================================================
--- remote/protocol/StackTraceElementMapping.class.php	(revision 8499)
+++ remote/protocol/StackTraceElementMapping.class.php	(working copy)
@@ -17,22 +17,19 @@
      *
      * @access  public
      * @param   &server.protocol.Serializer serializer
-     * @param   string serialized
-     * @param   &int length
+     * @param   &remote.protocol.SerializedData serialized
      * @param   array<string, mixed> context default array()
      * @return  &mixed
      */
-    function &valueOf(&$serializer, $serialized, &$length, $context= array()) {
-      $size= substr($serialized, 2, strpos($serialized, ':', 2)- 2);
-      $offset= strlen($size)+ 2+ 2;
+    function &valueOf(&$serializer, &$serialized, $context= array()) {
+      $size= $serialized->consumeSize();
       $details= array();
+      $serialized->offset++;  // Opening "{"
       for ($i= 0; $i < $size; $i++) {
-        $detail= $serializer->valueOf(substr($serialized, $offset), $len, $context);
-        $offset+= $len;
-        $details[$detail]= $serializer->valueOf(substr($serialized, $offset), $len, $context);
-        $offset+= $len;
+        $detail= $serializer->valueOf($serialized, $context);
+        $details[$detail]= $serializer->valueOf($serialized, $context);
       }
-      $length= $offset+ 1;
+      $serialized->offset++;  // Closing "}"
       
       $value= &new StackTraceElement(
         $details['file'],
Index: remote/protocol/ExceptionMapping.class.php
===================================================================
--- remote/protocol/ExceptionMapping.class.php	(revision 8499)
+++ remote/protocol/ExceptionMapping.class.php	(working copy)
@@ -17,31 +17,25 @@
      *
      * @access  public
      * @param   &server.protocol.Serializer serializer
-     * @param   string serialized
-     * @param   &int length
+     * @param   &remote.protocol.SerializedData serialized
      * @param   array<string, mixed> context default array()
      * @return  &mixed
      */
-    function &valueOf(&$serializer, $serialized, &$length, $context= array()) {
-      $len= substr($serialized, 2, strpos($serialized, ':', 2)- 2);
+    function &valueOf(&$serializer, &$serialized, $context= array()) {
       try(); {
-        $class= &XPClass::forName($serializer->exceptionName(substr($serialized, 2+ strlen($len)+ 2, $len)));
+        $class= &XPClass::forName($serialized->consumeString());
       } if (catch('ClassNotFoundException', $e)) {
         return throw($e);
       }
-      
-      $offset= 2 + 2 + strlen($len)+ $len + 2;
-      $size= substr($serialized, $offset, strpos($serialized, ':', $offset)- $offset);
-      $offset+= strlen($size)+ 2;
-      
+
+      $size= $serialized->consumeSize();
+      $serialized->offset++;  // Opening "{"
       $data= array();
       for ($i= 0; $i < $size; $i++) {
-        $member= $serializer->valueOf(substr($serialized, $offset), $len, $context);
-        $offset+= $len;
-        $data[$member]= &$serializer->valueOf(substr($serialized, $offset), $len, $context);
-        $offset+= $len;
+        $member= $this->valueOf($serialized, $context);
+        $data[$member]= &$this->valueOf($serialized, $context);
       }
-      $length= $offset+ 1;
+      $serialized->offset++; // Closing "}"
       
       $instance= &$class->newInstance($data['message']);
       unset($data['message']);
Index: remote/protocol/ShortMapping.class.php
===================================================================
--- remote/protocol/ShortMapping.class.php	(revision 8499)
+++ remote/protocol/ShortMapping.class.php	(working copy)
@@ -19,15 +19,12 @@
      *
      * @access  public
      * @param   &server.protocol.Serializer serializer
-     * @param   string serialized
-     * @param   &int length
+     * @param   &remote.protocol.SerializedData serialized
      * @param   array<string, mixed> context default array()
      * @return  &mixed
      */
-    function &valueOf(&$serializer, $serialized, &$length, $context= array()) {
-      $v= substr($serialized, 2, strpos($serialized, ';', 2)- 2); 
-      $length= strlen($v)+ 3;
-      $value= &new Short($v);
+    function &valueOf(&$serializer, &$serialized, $context= array()) {
+      $value= &new Short($serialized->consumeWord());
       return $value;
     }
 
Index: remote/protocol/LongMapping.class.php
===================================================================
--- remote/protocol/LongMapping.class.php	(revision 8499)
+++ remote/protocol/LongMapping.class.php	(working copy)
@@ -19,15 +19,12 @@
      *
      * @access  public
      * @param   &server.protocol.Serializer serializer
-     * @param   string serialized
-     * @param   &int length
+     * @param   &remote.protocol.SerializedData serialized
      * @param   array<string, mixed> context default array()
      * @return  &mixed
      */
-    function &valueOf(&$serializer, $serialized, &$length, $context= array()) {
-      $v= substr($serialized, 2, strpos($serialized, ';', 2)- 2); 
-      $length= strlen($v)+ 3;
-      $value= &new Long($v);
+    function &valueOf(&$serializer, &$serialized, $context= array()) {
+      $value= &new Long($serialized->consumeWord());
       return $value;
     }
 
Index: remote/protocol/ByteMapping.class.php
===================================================================
--- remote/protocol/ByteMapping.class.php	(revision 8499)
+++ remote/protocol/ByteMapping.class.php	(working copy)
@@ -19,15 +19,12 @@
      *
      * @access  public
      * @param   &server.protocol.Serializer serializer
-     * @param   string serialized
-     * @param   &int length
+     * @param   &remote.protocol.SerializedData serialized
      * @param   array<string, mixed> context default array()
      * @return  &mixed
      */
-    function &valueOf(&$serializer, $serialized, &$length, $context= array()) {
-      $v= substr($serialized, 2, strpos($serialized, ';', 2)- 2); 
-      $length= strlen($v)+ 3;
-      $value= &new Byte($v);
+    function &valueOf(&$serializer, &$serialized, $context= array()) {
+      $value= &new Byte($serialized->consumeWord());
       return $value;
     }
 
Index: remote/protocol/FloatMapping.class.php
===================================================================
--- remote/protocol/FloatMapping.class.php	(revision 8499)
+++ remote/protocol/FloatMapping.class.php	(working copy)
@@ -19,15 +19,12 @@
      *
      * @access  public
      * @param   &server.protocol.Serializer serializer
-     * @param   string serialized
-     * @param   &int length
+     * @param   &remote.protocol.SerializedData serialized
      * @param   array<string, mixed> context default array()
      * @return  &mixed
      */
-    function &valueOf(&$serializer, $serialized, &$length, $context= array()) {
-      $v= substr($serialized, 2, strpos($serialized, ';', 2)- 2); 
-      $length= strlen($v)+ 3;
-      $value= &new Float($v);
+    function &valueOf(&$serializer, &$serialized, $context= array()) {
+      $value= &new Float($serialized->consumeWord());
       return $value;
     }
 
Index: net/xp_framework/unittest/remote/SerializerTest.class.php
===================================================================
--- net/xp_framework/unittest/remote/SerializerTest.class.php	(revision 8499)
+++ net/xp_framework/unittest/remote/SerializerTest.class.php	(working copy)
@@ -220,7 +220,7 @@
     function valueOfInt() {
       $this->assertEquals(
         1,
-        $this->serializer->valueOf('i:1;')
+        $this->serializer->valueOf(new SerializedData('i:1;'))
       );
     }
 
@@ -233,7 +233,7 @@
     function valueOfByte() {
       $this->assertEquals(
         new Byte(1),
-        $this->serializer->valueOf('B:1;')
+        $this->serializer->valueOf(new SerializedData('B:1;'))
       );
     }
 
@@ -246,7 +246,7 @@
     function valueOfLong() {
       $this->assertEquals(
         new Long(12345),
-        $this->serializer->valueOf('l:12345;')
+        $this->serializer->valueOf(new SerializedData('l:12345;'))
       );
     }
 
@@ -259,7 +259,7 @@
     function valueOfFloat() {
       $this->assertEquals(
         new Float(1.5),
-        $this->serializer->valueOf('f:1.5;')
+        $this->serializer->valueOf(new SerializedData('f:1.5;'))
       );
     }
 
@@ -272,7 +272,7 @@
     function valueOfDouble() {
       $this->assertEquals(
         1.5,
-        $this->serializer->valueOf('d:1.5;')
+        $this->serializer->valueOf(new SerializedData('d:1.5;'))
       );
     }
 
@@ -286,7 +286,7 @@
     function valueOfShorts() {
       $this->assertEquals(
         new Short(1),
-        $this->serializer->valueOf('S:1;')
+        $this->serializer->valueOf(new SerializedData('S:1;'))
       );
     }
     
@@ -299,7 +299,7 @@
     function valueOfDates() {
       $this->assertEquals(
         new Date(328312800),
-        $this->serializer->valueOf('T:328312800;')
+        $this->serializer->valueOf(new SerializedData('T:328312800;'))
       );
     }
 
@@ -311,7 +311,9 @@
      */
     #[@test]
     function valueOfArrayList() {
-      $return= &$this->serializer->valueOf("A:2:{O:6:\"Person\":2:{s:2:\"id\";i:1549;s:4:\"name\";s:11:\"Timm Friebe\";}s:5:\"World\";}");
+      $return= &$this->serializer->valueOf(
+        new SerializedData("A:2:{O:6:\"Person\":2:{s:2:\"id\";i:1549;s:4:\"name\";s:11:\"Timm Friebe\";}s:5:\"World\";}"
+      ));
       $this->assertClass($return, 'lang.types.ArrayList');
       $this->assertEquals(2, sizeof($return->values));
       $this->assertEquals(new Person(), $return->values[0]);
@@ -326,8 +328,7 @@
     #[@test]
     function arrayList() {
       $list= $this->serializer->valueOf(
-        'A:1:{a:2:{s:2:"la";s:2:"la";s:3:"foo";A:2:{a:1:{s:13:"verschachteln";s:7:"istToll";}s:6:"barbar";}}}',
-        $context
+        new SerializedData('A:1:{a:2:{s:2:"la";s:2:"la";s:3:"foo";A:2:{a:1:{s:13:"verschachteln";s:7:"istToll";}s:6:"barbar";}}}')
       );
       $this->assertEquals($list, new ArrayList(array(
         array(
