Index: WorkflowXMLScriptlet.class.php
===================================================================
--- WorkflowXMLScriptlet.class.php	(revision 0)
+++ WorkflowXMLScriptlet.class.php	(revision 0)
@@ -0,0 +1,178 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  uses(
+    'scriptlet.xml.XMLScriptlet', 
+    'scriptlet.xml.workflow.routing.ClassRouter'
+  );
+
+  /**
+   * Workflow model scriptlet implementation
+   *
+   * @purpose  Base class
+   */
+  class WorkflowXMLScriptlet extends XMLScriptlet {
+    public
+      $package  = NULL;
+
+    /**
+     * Constructor
+     *
+     * @param   string package
+     * @param   string base default ''
+     */
+    function __construct($package, $base= '') {
+      parent::__construct($base);
+      $this->package= rtrim($package, '.');
+    }
+    
+    /**
+     * Create the router object. Returns a ClassRouter in this implementation
+     * which resembles the previously hardcoded behaviour.
+     *
+     * @param   scriptlet.xml.XMLScriptletRequest request
+     * @return  scriptlet.xml.workflow.routing.Router
+     */
+    protected function routerFor($request) {
+      return new ClassRouter();
+    }
+
+    /**
+     * Retrieve context class
+     *
+     * @param   scriptlet.xml.XMLScriptletRequest request
+     * @return  lang.XPClass
+     * @throws  lang.ClassNotFoundException
+     */
+    protected function getContextClass($request) {
+      return XPClass::forName($this->package.'.'.(ucfirst($request->getProduct()).'Context'));
+    }
+
+    /**
+     * Decide whether a session is needed
+     *
+     * @param   scriptlet.xml.XMLScriptletRequest request
+     * @return  bool
+     */
+    public function needsSession($request) {
+      return TRUE;
+      ($request->state && (
+        $request->state->hasHandlers() || 
+        $request->state->requiresAuthentication()
+      ));
+    }
+    
+    /**
+     * Decide whether a context is needed. Returns FALSE in this default
+     * implementation.
+     *
+     * @param   scriptlet.xml.XMLScriptletRequest request
+     * @return  bool
+     */
+    protected function wantsContext($request) {
+      return FALSE;
+    }
+    
+    /**
+     * Process workflow. Calls the state's setup() and process() 
+     * methods in this order. May NOT be overwritten by subclasses.
+     *
+     * Return FALSE from this method to indicate no further 
+     * processing is to be done
+     *
+     * @param   scriptlet.xml.XMLScriptletRequest request 
+     * @param   scriptlet.xml.XMLScriptletResponse response 
+     * @return  bool
+     */
+    protected function processWorkflow($request, $response) {
+
+      // Context initialization
+      $context= NULL;
+      if ($this->wantsContext($request) && $request->hasSession()) {
+      
+        // Set up context. The context contains - so to say - the "autoglobals",
+        // in other words, the omnipresent data such as, for example, the user
+        try {
+          $class= $this->getContextClass($request);
+        } catch (ClassNotFoundException $e) {
+          throw new HttpScriptletException($e->getMessage());
+        }
+      
+        // Get context from session. If it is not available there, set up the 
+        // context and store it to the session.
+        $cidx= $class->getName();
+        if (!($context= $request->session->getValue($cidx))) {
+          $context= $class->newInstance();
+
+          try {
+            $context->setup($request);
+          } catch (IllegalStateException $e) {
+            throw new HttpScriptletException($e->getMessage(), HTTP_INTERNAL_SERVER_ERROR);
+          } catch (IllegalArgumentException $e) {
+            throw new HttpScriptletException($e->getMessage(), HTTP_NOT_ACCEPTABLE);
+          } catch (IllegalAccessException $e) {
+            throw new HttpScriptletException($e->getMessage(), HTTP_FORBIDDEN);
+          }
+          $request->session->putValue($cidx, $context);
+        }
+
+        // Run context's process() method.
+        try {
+          $context->process($request);
+        } catch (IllegalStateException $e) {
+          throw new HttpSessionInvalidException($e->getMessage(), HTTP_BAD_REQUEST);
+        } catch (IllegalAccessException $e) {
+          throw new HttpScriptletException($e->getMessage(), HTTP_FORBIDDEN);
+        }
+
+        delete($class);
+      }
+      
+      // Routing
+      try {
+        $route= $this->routerFor($request)->route($this->package.'.state.', $request, $response, $context);
+        $route->dispatch($request, $response, $context);
+      } catch (ClassNotFoundException $e) {
+        throw new HttpScriptletException($e->getMessage(), HTTP_METHOD_NOT_ALLOWED);
+      } catch (IllegalStateException $e) {
+        throw new HttpScriptletException($e->getMessage(), HTTP_INTERNAL_SERVER_ERROR);
+      } catch (IllegalArgumentException $e) {
+        throw new HttpScriptletException($e->getMessage(), HTTP_NOT_ACCEPTABLE);
+      } catch (IllegalAccessException $e) {
+        throw new HttpScriptletException($e->getMessage(), HTTP_FORBIDDEN);
+      }
+      
+      // If dispatching returns FALSE, the context's insertStatus() method 
+      // will  not be called. This, for example, is useful when a state wants 
+      // to send a redirect.
+      if (FALSE === $r) return FALSE;
+      
+      // If there is no context, we're finished
+      if (!$context) return;
+
+      // Tell context to insert form elements. Then store it, if necessary
+      $context->insertStatus($response);
+      $context->getChanged() && $request->session->putValue($cidx, $context);
+    }
+
+    /**
+     * Process request
+     *
+     * @param   scriptlet.xml.XMLScriptletRequest request 
+     * @param   scriptlet.xml.XMLScriptletResponse response 
+     */
+    public function processRequest($request, $response) {
+      if (FALSE === $this->processWorkflow($request, $response)) {
+      
+        // The processWorkflow() method indicates no further processing
+        // is to be done. Pass result "up".
+        return FALSE;
+      }
+
+      return parent::processRequest($request, $response);
+    }
+  }
+?>

Property changes on: WorkflowXMLScriptlet.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: routing/ClassRouter.class.php
===================================================================
--- routing/ClassRouter.class.php	(revision 0)
+++ routing/ClassRouter.class.php	(revision 0)
@@ -0,0 +1,42 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  uses('scriptlet.xml.workflow.routing.StateRoute', 'scriptlet.xml.workflow.routing.Router');
+
+  /**
+   * The class router is a router implementation that will route requests
+   * to state classes by the following conventions:
+   *
+   * <pre>
+   *   State name  Class name                    
+   *   ----------- ------------------------------
+   *   /static     [package.]StaticState
+   *   /news/view  [package.]ViewNewsState
+   * </pre>
+   *
+   * @see      xp://scriptlet.xml.workflow.routing.StateRoute
+   * @see      xp://scriptlet.xml.workflow.routing.Router
+   * @purpose  Router implementation
+   */
+  class ClassRouter extends Object implements Router {
+  
+    /**
+     * Route a request
+     *
+     * @access  public
+     * @param   string package
+     * @param   scriptlet.xml.XMLScriptletRequest
+     * @param   scriptlet.xml.XMLScriptletResponse
+     * @param   scriptlet.xml.workflow.Context
+     * @return  scriptlet.xml.workflow.routing.Route
+     * @throws  lang.ClassNotFoundException in case the state class cannot be found
+     */
+    public function route($package, $request, $response, $context) {
+      $className= $package.implode('', array_map('ucfirst', array_reverse(explode('/', $request->getStateName())))).'State';
+      return new StateRoute(XPClass::forName($className)->newInstance());
+    }
+  }
+?>

Property changes on: routing/ClassRouter.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: routing/StaticRouter.class.php
===================================================================
--- routing/StaticRouter.class.php	(revision 0)
+++ routing/StaticRouter.class.php	(revision 0)
@@ -0,0 +1,41 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  uses('scriptlet.xml.workflow.routing.StateRoute', 'scriptlet.xml.workflow.routing.Router');
+
+  /**
+   * The class router is a router implementation that will route requests
+   * to state classes by the following conventions:
+   *
+   * <pre>
+   *   State name  Class name                    
+   *   ----------- ------------------------------
+   *   /static     [package.]StaticState
+   *   /news/view  [package.]NewsState
+   * </pre>
+   *
+   * @see      xp://scriptlet.xml.workflow.routing.StateRoute
+   * @see      xp://scriptlet.xml.workflow.routing.Router
+   * @purpose  Router implementation
+   */
+  class StaticRouter extends Object implements Router {
+  
+    /**
+     * Route a request
+     *
+     * @param   string package
+     * @param   scriptlet.xml.XMLScriptletRequest
+     * @param   scriptlet.xml.XMLScriptletResponse
+     * @param   scriptlet.xml.workflow.Context
+     * @return  scriptlet.xml.workflow.routing.Route
+     * @throws  lang.ClassNotFoundException in case the state class cannot be found
+     */
+    public function route($package, $request, $response, $context) {
+      $className= $package.ucfirst(strtok($request->getStateName(), '/')).'State';
+      return new StateRoute(XPClass::forName($className)->newInstance());
+    }
+  }
+?>

Property changes on: routing/StaticRouter.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: routing/Route.class.php
===================================================================
--- routing/Route.class.php	(revision 0)
+++ routing/Route.class.php	(revision 0)
@@ -0,0 +1,25 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  /**
+   * Route
+   *
+   * @see      xp://scriptlet.xml.workflow.routing.Router
+   * @purpose  Interface
+   */
+  interface Route {
+    
+    /**
+     * Dispatch this route
+     *
+     * @param   scriptlet.xml.XMLScriptletRequest
+     * @param   scriptlet.xml.XMLScriptletResponse
+     * @param   scriptlet.xml.workflow.Context
+     * @return  mixed
+     */
+    public function dispatch($request, $response, $context);
+  }
+?>

Property changes on: routing/Route.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: routing/MethodRoute.class.php
===================================================================
--- routing/MethodRoute.class.php	(revision 0)
+++ routing/MethodRoute.class.php	(revision 0)
@@ -0,0 +1,46 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  uses('scriptlet.xml.workflow.routing.Route');
+
+  /**
+   * Method route
+   *
+   * @see      xp://scriptlet.xml.workflow.routing.MethodRouter
+   * @see      xp://scriptlet.xml.workflow.routing.Route
+   * @purpose  Route implementation
+   */
+  class MethodRoute extends Object implements Route {
+    protected
+      $state  = NULL,
+      $method = NULL;
+      
+    /**
+     * Constructor
+     *
+     * @param   scriptlet.xml.workflow.AbstractState state
+     * @param   lang.reflect.Method method
+     */
+    public function __construct($state, $method) {
+      $this->state= $state;
+      $this->method= $method;
+    }
+    
+    /**
+     * Dispatch this route
+     *
+     * @param   scriptlet.xml.XMLScriptletRequest
+     * @param   scriptlet.xml.XMLScriptletResponse
+     * @param   scriptlet.xml.workflow.Context
+     * @return  mixed
+     */
+    public function dispatch($request, $response, $context) {
+      $request->state= $this->state;
+      $this->state->setup($request, $response, $context);
+      return $this->method->invoke($this->state, array($request, $response, $context));
+    }
+  } 
+?>

Property changes on: routing/MethodRoute.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: routing/StateRoute.class.php
===================================================================
--- routing/StateRoute.class.php	(revision 0)
+++ routing/StateRoute.class.php	(revision 0)
@@ -0,0 +1,44 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  uses('scriptlet.xml.workflow.routing.Route');
+
+  /**
+   * State route
+   *
+   * @see      xp://scriptlet.xml.workflow.routing.StaticRouter
+   * @see      xp://scriptlet.xml.workflow.routing.ClassRouter
+   * @see      xp://scriptlet.xml.workflow.routing.Route
+   * @purpose  Route implementation
+   */
+  class StateRoute extends Object {
+    protected
+      $state= NULL;
+      
+    /**
+     * Constructor
+     *
+     * @param   scriptlet.xml.workflow.AbstractState state
+     */
+    public function __construct($state) {
+      $this->state= $state;
+    }
+    
+    /**
+     * Dispatch this route
+     *
+     * @param   scriptlet.xml.XMLScriptletRequest
+     * @param   scriptlet.xml.XMLScriptletResponse
+     * @param   scriptlet.xml.workflow.Context
+     * @return  mixed
+     */
+    public function dispatch($request, $response, $context) {
+      $request->state= $this->state;
+      $this->state->setup($request, $response, $context);
+      return $this->state->process($request, $response, $context);
+    }
+  }
+?>

Property changes on: routing/StateRoute.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: routing/Router.class.php
===================================================================
--- routing/Router.class.php	(revision 0)
+++ routing/Router.class.php	(revision 0)
@@ -0,0 +1,28 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  uses('scriptlet.xml.workflow.routing.Route');
+
+  /**
+   * A router is a mechanism to route requests to states.
+   *
+   * @see      xp://scriptlet.xml.workflow.WorkflowXMLScriptlet#routerFor
+   * @purpose  Interface
+   */
+  interface Router {
+  
+    /**
+     * Route a request
+     *
+     * @param   string package
+     * @param   scriptlet.xml.XMLScriptletRequest
+     * @param   scriptlet.xml.XMLScriptletResponse
+     * @param   scriptlet.xml.workflow.Context
+     * @return  scriptlet.xml.workflow.routing.Route
+     */
+    public function route($package, $request, $response, $context);
+  }
+?>

Property changes on: routing/Router.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: routing/MethodRouter.class.php
===================================================================
--- routing/MethodRouter.class.php	(revision 0)
+++ routing/MethodRouter.class.php	(revision 0)
@@ -0,0 +1,55 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  uses('scriptlet.xml.workflow.routing.MethodRoute', 'scriptlet.xml.workflow.routing.Router');
+
+  /**
+   * The class router is a router implementation that will route requests
+   * to state classes' methods by the following conventions:
+   *
+   * <pre>
+   *   State name  Class name                    
+   *   ----------- -------------------------------
+   *   /static     [package.]StaticState::index()
+   *   /news/view  [package.]NewsState::view()
+   * </pre>
+   *
+   * @see      xp://scriptlet.xml.workflow.routing.MethodRoute
+   * @see      xp://scriptlet.xml.workflow.routing.Router
+   * @purpose  Router implementation
+   */
+  class MethodRouter extends Object implements Router {
+  
+    /**
+     * Route a request
+     *
+     * @param   string package
+     * @param   scriptlet.xml.XMLScriptletRequest
+     * @param   scriptlet.xml.XMLScriptletResponse
+     * @param   scriptlet.xml.workflow.Context
+     * @return  scriptlet.xml.workflow.routing.Route
+     * @throws  lang.ClassNotFoundException in case the state class cannot be found
+     * @throws  lang.IllegalArgumentException in case the operation cannot be found
+     * @throws  lang.IllegalAccessException in case the operation is not publicly accessible
+     */
+    public function route($package, $request, $response, $context) {
+      1 == sscanf($request->getStateName(), '%[^/]/%s', $name, $method) && $method= 'index';
+      $class= XPClass::forName($package.ucfirst($name).'State');
+      
+      // Check if method exists
+      if (!($m= $class->getMethod($method))) {
+        throw new IllegalArgumentException($class->getName().' does not support a '.$method.' operation');
+      }
+      
+      // Check if method is public
+      if (!Modifiers::isPublic($m->getModifiers())) {
+        throw new IllegalAccessException($class->getName().'::'.$method.' is not a public operation');
+      }
+
+      return new MethodRoute($class->newInstance(), $m);
+    }
+  }
+?>

Property changes on: routing/MethodRouter.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: routing/FacadeRoute.class.php
===================================================================
--- routing/FacadeRoute.class.php	(revision 0)
+++ routing/FacadeRoute.class.php	(revision 0)
@@ -0,0 +1,57 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  uses('scriptlet.xml.workflow.routing.Route');
+
+  /**
+   * Facade route
+   *
+   * @see      xp://scriptlet.xml.workflow.routing.FacadeRouter
+   * @see      xp://scriptlet.xml.workflow.routing.Route
+   * @purpose  Route implementation
+   */
+  class FacadeRoute extends Object implements Route {
+    protected
+      $facade    = NULL,
+      $operation = '';
+     
+    const
+      COLLECTION  = 0x0001,
+      ENTITY      = 0x0002;
+
+    /**
+     * Constructor
+     *
+     * @param   scriptlet.xml.workflow.facade.Facade facade
+     * @param   string operation
+     */
+    public function __construct($facade, $operation) {
+      $this->facade= $facade;
+      $this->operation= $operation;
+    }
+    
+    /**
+     * Dispatch this route
+     *
+     * @param   scriptlet.xml.XMLScriptletRequest
+     * @param   scriptlet.xml.XMLScriptletResponse
+     * @param   scriptlet.xml.workflow.Context
+     * @return  mixed
+     */
+    public function dispatch($request, $response, $context) {
+      static $operations= array(
+        'list'    => self::COLLECTION,
+        'search'  => self::COLLECTION,
+        'view'    => self::ENTITY,
+        'edit'    => self::ENTITY,
+        'delete'  => self::ENTITY,
+        'add'     => self::ENTITY,
+      );
+
+      $this->facade->{'do'.$this->operation}($request, $response, $context);
+    }
+  } 
+?>

Property changes on: routing/FacadeRoute.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: routing/FacadeRouter.class.php
===================================================================
--- routing/FacadeRouter.class.php	(revision 0)
+++ routing/FacadeRouter.class.php	(revision 0)
@@ -0,0 +1,46 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  uses('scriptlet.xml.workflow.routing.FacadeRoute', 'scriptlet.xml.workflow.routing.Router');
+
+  /**
+   * The facade router is a router implementation that will route requests
+   * to facades.
+   *
+   * <pre>
+   *   State name    Class name           Operation         
+   *   ------------- -------------------- ----------
+   *   /news         [package.]NewsFacade list
+   *   /news/list    [package.]NewsFacade list
+   *   /news/search  [package.]NewsFacade search
+   *   /news/view    [package.]NewsFacade view
+   *   /news/edit    [package.]NewsFacade edit
+   *   /news/add     [package.]NewsFacade add
+   *   /news/delete  [package.]NewsFacade delete
+   * </pre>
+   *
+   * @see      xp://scriptlet.xml.workflow.facade.Facade
+   * @see      xp://scriptlet.xml.workflow.routing.Router
+   * @purpose  Router implementation
+   */
+  class FacadeRouter extends Object implements Router {
+  
+    /**
+     * Route a request
+     *
+     * @param   string package
+     * @param   scriptlet.xml.XMLScriptletRequest
+     * @param   scriptlet.xml.XMLScriptletResponse
+     * @param   scriptlet.xml.workflow.Context
+     * @return  scriptlet.xml.workflow.routing.Route
+     * @throws  lang.ClassNotFoundException in case the state class cannot be found
+     */
+    public function route($package, $request, $response, $context) {
+      1 == sscanf($request->getStateName(), '%[^/]/%s', $name, $operation) && $operation= 'list';
+      return new FacadeRoute(XPClass::forName($package.ucfirst($name).'Facade')->newInstance(), $operation);
+    }
+  }
+?>

Property changes on: routing/FacadeRouter.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: routing/DelegatingRouter.class.php
===================================================================
--- routing/DelegatingRouter.class.php	(revision 0)
+++ routing/DelegatingRouter.class.php	(revision 0)
@@ -0,0 +1,64 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  uses('scriptlet.xml.workflow.routing.Router');
+
+  /**
+   * The class router is a router implementation that will delegate 
+   * requests to different routing based on rules.
+   *
+   * Example (use ClassRouter as default, map static/* to StaticRouter, 
+   * news/* to MethodRouter).
+   * <code>
+   *   new DelegatingRouter(new ClassRouter(), array(
+   *     'static' => new StaticRouter(),
+   *     'news'   => new MethodRouter()
+   *   ));
+   * </code>
+   *
+   * @see      xp://scriptlet.xml.workflow.routing.Router
+   * @purpose  Router implementation
+   */
+  class DelegatingRouter extends Object implements Router {
+    protected
+      $rules= array();
+      
+    /**
+     * Constructor.
+     *
+     * @access  public
+     * @param   scriptlet.xml.workflow.routing.Router default router
+     * @param   array<string, scriptlet.xml.workflow.Router> rules default array()
+     */
+    public function __construct($default, $rules= array()) {
+      $this->rules[0]= $default;
+      foreach (array_keys($rules) as $fragment) {
+        $this->rules[$fragment]= $rules[$fragment];
+      }
+    }
+  
+    /**
+     * Route a request
+     *
+     * @param   string package
+     * @param   scriptlet.xml.XMLScriptletRequest
+     * @param   scriptlet.xml.XMLScriptletResponse
+     * @param   scriptlet.xml.workflow.Context
+     * @return  scriptlet.xml.workflow.routing.Route
+     */
+    public function route($package, $request, $response, $context) {
+      $stateName= $request->getStateName();
+      foreach (array_filter(array_keys($this->rules)) as $pattern) {
+        if (0 == strncmp($pattern, $stateName, strlen($pattern))) {
+          return $this->rules[$pattern]->route($package, $request, $response, $context);
+        }
+      }
+      
+      // Apply default route
+      return $this->rules[0]->route($package, $request, $response, $context);
+    }
+  }
+?>

Property changes on: routing/DelegatingRouter.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: facade/DataSetFacade.class.php
===================================================================
--- facade/DataSetFacade.class.php	(revision 0)
+++ facade/DataSetFacade.class.php	(revision 0)
@@ -0,0 +1,129 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  uses(
+    'scriptlet.xml.workflow.facade.Facade', 
+    'scriptlet.xml.workflow.AbstractState',
+    'scriptlet.xml.workflow.facade.dataset.EditDataSetHandler',
+    'scriptlet.xml.workflow.facade.dataset.CreateDataSetHandler',
+    'scriptlet.xml.workflow.facade.dataset.DeleteDataSetHandler'
+  );
+
+  /**
+   * This facade works with rdbms.DataSet subclasses.
+   *
+   * @purpose  Facade implementation
+   */
+  class DataSetFacade extends AbstractState implements Facade {
+
+    /**
+     * Helper method
+     *
+     * @return  rdbms.Peer
+     */
+    protected function getPeer() {
+      return XPClass::forName($this->getClass()->getAnnotation('dataset'))->getMethod('getPeer')->invoke(NULL);
+    }
+    
+    /**
+     * Helper method
+     *
+     * @param   rdbms.Peer peer
+     * @param   rdbms.DataSet entity
+     * @return  xml.Node
+     */
+    protected function marshalEntity(Peer $peer, DataSet $entity) {
+      $e= new Node('entity');
+
+      // Primary Key
+      $id= '';
+      foreach ($peer->primary as $field) {
+        $id= '&'.$field.'='.$entity->{$field};
+      }
+      $e->setAttribute('id', substr($id, 1));
+
+      // Fields
+      foreach (array_keys($peer->types) as $field) {
+        $value= $entity->get($field);
+
+        $f= $e->addChild(new Node('field', NULL, array(
+          'name'      => $field,
+          'xsi:type'  => 'xsd:'.gettype($value)
+        )));
+
+        if (is_scalar($value)) {
+          $f->setContent($value);
+        } else if (is_null($value)) {
+          // Intentionally empty
+        } else if (is_array($value)) {
+          $f->children= Node::fromArray($value)->children;
+        } else if (is_object($value)) {
+          $f->children= Node::fromObject($value)->children;
+        }
+      }
+      
+      return $e;
+    }
+    
+    /**
+     * List operation
+     *
+     * @param   
+     * @return  
+     */
+    public function doList($request, $response, $context) {
+      $this->setup($request, $response, $context);
+      $peer= $this->getPeer();
+      $n= $response->addFormResult(new Node('collection', NULL, array(
+        'class' => $peer->identifier
+      )));
+      
+      // Field information
+      $r= $n->addChild(new Node('fields'));
+      foreach (array_keys($peer->types) as $field) {
+        $r->addChild(new Node('field', $field));
+      }
+
+      // Entity list
+      for ($iterator= $peer->iteratorFor(new Criteria()); $iterator->hasNext(); ) {
+        $n->addChild($this->marshalEntity($peer, $iterator->next()));
+      }
+    }
+
+    /**
+     * Edit operation
+     *
+     * @param   
+     * @return  
+     */
+    public function doEdit($request, $response, $context) {
+      $this->addHandler(new EditDataSetHandler(new DataSetWrapper($this->getPeer())));
+      $this->setup($request, $response, $context);
+    }
+
+    /**
+     * New operation
+     *
+     * @param   
+     * @return  
+     */
+    public function doNew($request, $response, $context) {
+      $this->addHandler(new CreateDataSetHandler(new DataSetWrapper($this->getPeer())));
+      $this->setup($request, $response, $context);
+    }
+
+    /**
+     * Delete operation
+     *
+     * @param   
+     * @return  
+     */
+    public function doDelete($request, $response, $context) {
+      $this->addHandler(new DeleteDataSetHandler(new DataSetWrapper($this->getPeer(), TRUE)));
+      $this->setup($request, $response, $context);
+    }
+  }
+?>

Property changes on: facade/DataSetFacade.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: facade/dataset/DataSetWrapper.class.php
===================================================================
--- facade/dataset/DataSetWrapper.class.php	(revision 0)
+++ facade/dataset/DataSetWrapper.class.php	(revision 0)
@@ -0,0 +1,83 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  uses(
+    'scriptlet.xml.workflow.Wrapper', 
+    'scriptlet.xml.workflow.IFormresultAggregate',
+    'scriptlet.xml.workflow.facade.dataset.FieldTypeMap'
+  );
+
+  /**
+   * Wrapper implementation for DataSets.
+   *
+   * @see      xp://rdbms.DataSet
+   * @see      xp://scriptlet.xml.workflow.facade.DataSetFacade
+   * @purpose  Generic Wrapper
+   */
+  class DataSetWrapper extends Wrapper implements IFormresultAggregate {
+    protected
+      $peer   = NULL;
+
+    /**
+     * Constructor
+     *
+     * @param   rdbms.Peer peer
+     * @param   bool view default FALSE
+     */
+    public function __construct($peer, $view= FALSE) {
+      $this->setPeer($peer, $view);
+    }
+  
+    /**
+     * Set Peer.
+     *
+     * @param   rdbms.Peer peer
+     * @param   bool view
+     */
+    public function setPeer($peer, $view) {
+      $this->peer= $peer;
+      
+      // Register param info by looking at the peer instance's types
+      foreach ($peer->types as $name => $defines) {
+        if ($defines[3]) continue;    // Omit identity fields
+        
+        // XXX FIXME XXX not nice
+        if ($view) {
+          $this->registerParamInfo(
+            $name,
+            OCCURRENCE_OPTIONAL,
+            $default= NULL,
+            $caster= NULL,
+            $precheck= NULL, 
+            $postcheck= NULL,
+            FieldTypeMap::typeOf($defines[1]),
+            $values= array()
+          );
+        } else {
+          $this->registerParamInfo(
+            $name,
+            $defines[2] ? OCCURRENCE_OPTIONAL : OCCURRENCE_UNDEFINED,
+            $default= NULL,
+            FieldTypeMap::casterFor($defines[1]),
+            $precheck= NULL, 
+            $postcheck= NULL,
+            FieldTypeMap::typeOf($defines[1]),
+            $values= array()
+          );
+        }
+      }
+    }
+
+    /**
+     * Get Peer
+     *
+     * @return  rdbms.Peer
+     */
+    public function getPeer() {
+      return $this->peer;
+    }
+  }
+?>

Property changes on: facade/dataset/DataSetWrapper.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: facade/dataset/DeleteDataSetHandler.class.php
===================================================================
--- facade/dataset/DeleteDataSetHandler.class.php	(revision 0)
+++ facade/dataset/DeleteDataSetHandler.class.php	(revision 0)
@@ -0,0 +1,48 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$
+ */
+
+  uses(
+    'rdbms.Criteria',
+    'scriptlet.xml.workflow.facade.dataset.DataSetHandler'
+  );
+  
+  /**
+   * Handler for deleting DataSets
+   *
+   * @see      xp://scriptlet.xml.workflow.facade.DataSetFacade
+   * @purpose  Generic Handler
+   */
+  class DeleteDataSetHandler extends DataSetHandler {
+
+    /**
+     * Retrieve the entity by its primary
+     *
+     * @param   rdbms.Peer
+     * @param   scriptlet.xml.workflow.WorkflowScriptletRequest request 
+     * @param   scriptlet.xml.Context context
+     * @return  rdbms.DataSet
+     */
+    protected function getEntity($peer, $request, $context) {
+      $criteria= new Criteria();
+      foreach ($peer->primary as $field) {
+        $criteria->add($field, $request->getParam($field), EQUAL);
+      }
+
+      return $peer->iteratorFor($criteria)->next();
+    }
+    
+    /**
+     * Handle the entity that has been worked on
+     *
+     * @param   rdbms.DataSet
+     * @param   scriptlet.xml.workflow.WorkflowScriptletRequest request 
+     * @param   scriptlet.xml.Context context
+     */
+    protected function handleSubmittedEntity($entity, $request, $context) {
+      $entity->delete();
+    }
+  }
+?>

Property changes on: facade/dataset/DeleteDataSetHandler.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: facade/dataset/CreateDataSetHandler.class.php
===================================================================
--- facade/dataset/CreateDataSetHandler.class.php	(revision 0)
+++ facade/dataset/CreateDataSetHandler.class.php	(revision 0)
@@ -0,0 +1,47 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$
+ */
+
+  uses(
+    'rdbms.Criteria',
+    'scriptlet.xml.workflow.facade.dataset.DataSetHandler'
+  );
+  
+  /**
+   * Handler for creating DataSets
+   *
+   * @see      xp://scriptlet.xml.workflow.facade.DataSetFacade
+   * @purpose  Generic Handler
+   */
+  class CreateDataSetHandler extends DataSetHandler {
+
+    /**
+     * Retrieve the entity by its primary
+     *
+     * @param   rdbms.Peer
+     * @param   scriptlet.xml.workflow.WorkflowScriptletRequest request 
+     * @param   scriptlet.xml.Context context
+     * @return  rdbms.DataSet
+     */
+    protected function getEntity($peer, $request, $context) {
+      return $peer->newObject();
+    }
+    
+    /**
+     * Handle the entity that has been worked on
+     *
+     * @param   rdbms.DataSet
+     * @param   scriptlet.xml.workflow.WorkflowScriptletRequest request 
+     * @param   scriptlet.xml.Context context
+     */
+    protected function handleSubmittedEntity($entity, $request, $context) {
+      foreach ($this->wrapper->getParamNames() as $field) {
+        $entity->set($field, $this->wrapper->getValue($field));
+      }
+
+      $entity->insert();
+    }
+  }
+?>

Property changes on: facade/dataset/CreateDataSetHandler.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: facade/dataset/EditDataSetHandler.class.php
===================================================================
--- facade/dataset/EditDataSetHandler.class.php	(revision 0)
+++ facade/dataset/EditDataSetHandler.class.php	(revision 0)
@@ -0,0 +1,52 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$
+ */
+
+  uses(
+    'rdbms.Criteria',
+    'scriptlet.xml.workflow.facade.dataset.DataSetHandler'
+  );
+  
+  /**
+   * Handler for editing DataSets
+   *
+   * @see      xp://scriptlet.xml.workflow.facade.DataSetFacade
+   * @purpose  Generic Handler
+   */
+  class EditDataSetHandler extends DataSetHandler {
+
+    /**
+     * Retrieve the entity by its primary
+     *
+     * @param   rdbms.Peer
+     * @param   scriptlet.xml.workflow.WorkflowScriptletRequest request 
+     * @param   scriptlet.xml.Context context
+     * @return  rdbms.DataSet
+     */
+    protected function getEntity($peer, $request, $context) {
+      $criteria= new Criteria();
+      foreach ($peer->primary as $field) {
+        $criteria->add($field, $request->getParam($field), EQUAL);
+      }
+
+      return $peer->iteratorFor($criteria)->next();
+    }
+    
+    /**
+     * Handle the entity that has been worked on
+     *
+     * @param   rdbms.DataSet
+     * @param   scriptlet.xml.workflow.WorkflowScriptletRequest request 
+     * @param   scriptlet.xml.Context context
+     */
+    protected function handleSubmittedEntity($entity, $request, $context) {
+      foreach ($this->wrapper->getParamNames() as $field) {
+        $entity->set($field, $this->wrapper->getValue($field));
+      }
+
+      $entity->update();
+    }
+  }
+?>

Property changes on: facade/dataset/EditDataSetHandler.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: facade/dataset/DataSetHandler.class.php
===================================================================
--- facade/dataset/DataSetHandler.class.php	(revision 0)
+++ facade/dataset/DataSetHandler.class.php	(revision 0)
@@ -0,0 +1,109 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$
+ */
+
+  uses(
+    'scriptlet.xml.workflow.Handler',
+    'scriptlet.xml.workflow.facade.dataset.DataSetWrapper'
+  );
+  
+  /**
+   * Handler for DataSet modifications (new, edit, delete).
+   *
+   * @see      xp://scriptlet.xml.workflow.facade.DataSetFacade
+   * @purpose  Base class
+   */
+  abstract class DataSetHandler extends Handler {
+
+    /**
+     * Constructor
+     *
+     * @param   
+     */
+    public function __construct($wrapper) {
+      parent::__construct();
+      $this->setWrapper($wrapper);
+    }
+
+    /**
+     * Get identifier.
+     *
+     * @param   scriptlet.xml.workflow.WorkflowScriptletRequest request
+     * @param   scriptlet.xml.Context context
+     * @return  string
+     */
+    public function identifierFor($request, $context) {
+      return get_class($this).'#'.$request->getQueryString();
+    }
+    
+    /**
+     * Retrieve the entity to work on
+     *
+     * @param   rdbms.Peer
+     * @param   scriptlet.xml.workflow.WorkflowScriptletRequest request 
+     * @param   scriptlet.xml.Context context
+     * @return  rdbms.DataSet
+     */
+    protected abstract function getEntity($peer, $request, $context);
+
+    /**
+     * Handle the entity that has been worked on
+     *
+     * @param   rdbms.DataSet
+     * @param   scriptlet.xml.workflow.WorkflowScriptletRequest request 
+     * @param   scriptlet.xml.Context context
+     */
+    protected abstract function handleSubmittedEntity($entity, $request, $context);
+    
+    /**
+     * Setup
+     *
+     * @param   scriptlet.xml.workflow.WorkflowScriptletRequest request 
+     * @param   scriptlet.xml.Context context
+     * @return  bool
+     */
+    public function setup($request, $context) {
+      $peer= $this->wrapper->getPeer();
+      $entity= $this->getEntity($peer, $request, $context);
+      
+      // Set formvalues
+      foreach (array_keys($peer->types) as $field) {
+        $this->setFormValue($field, $entity->get($field));
+      }
+      
+      // Save for usage in handleSubmittedData()
+      $this->setValue('entity', $entity);
+      return TRUE;
+    }
+    
+    /**
+     * Handle submitted data.
+     *
+     * @param   scriptlet.xml.XMLScriptletRequest request
+     * @param   scriptlet.xml.workflow.Context context
+     * @return  boolean
+     */
+    public function handleSubmittedData($request, $context) {
+
+      // Modify the entity. If an error occurs, add an error to this handler.
+      //
+      // Error type
+      // ==========
+      // * SQL statement fails: 'sql+stmt:[ERROR-CODE]' 
+      // * Other SQL error: 'sql+generic:[EXCEPTION-CLASS-NAME]'
+      try {
+        $this->handleSubmittedEntity($this->getValue('entity'), $request, $context);
+      } catch (SQLStatementFailedException $e) {
+        $this->addError('sql+stmt:'.$e->getErrorcode(), '*', $e->getMessage());
+        return FALSE;
+      } catch (SQLException $e) {
+        $this->addError('sql+generic:'.$e->getClassName(), '*', $e->getMessage());
+        return FALSE;
+      }
+      
+      return TRUE;
+    }
+  }
+?>

Property changes on: facade/dataset/DataSetHandler.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: facade/dataset/FieldTypeMap.class.php
===================================================================
--- facade/dataset/FieldTypeMap.class.php	(revision 0)
+++ facade/dataset/FieldTypeMap.class.php	(revision 0)
@@ -0,0 +1,89 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  uses('rdbms.FieldType');
+
+  /**
+   * (Insert class' description here)
+   *
+   * @ext      extension
+   * @see      reference
+   * @purpose  purpose
+   */
+  class FieldTypeMap extends Object {
+  
+    public static function typeOf($fieldType) {
+      static $types= array(
+        FieldType::BINARY        => 'core:string',   
+        FieldType::BIT           => 'core:number',     
+        FieldType::CHAR          => 'core:string',    
+        FieldType::DATETIME      => 'core:date',  
+        FieldType::DATETIMN      => 'core:date',  
+        FieldType::DECIMAL       => 'core:number',   
+        FieldType::DECIMALN      => 'core:number',  
+        FieldType::FLOAT         => 'core:number',   
+        FieldType::FLOATN        => 'core:number',   
+        FieldType::IMAGE         => 'core:string',   
+        FieldType::INT           => 'core:number',     
+        FieldType::INTN          => 'core:number',    
+        FieldType::MONEY         => 'core:string',   
+        FieldType::MONEYN        => 'core:string',   
+        FieldType::NCHAR         => 'core:string',   
+        FieldType::NUMERIC       => 'core:number',   
+        FieldType::NUMERICN      => 'core:number',  
+        FieldType::NVARCHAR      => 'core:string',  
+        FieldType::REAL          => 'core:number',    
+        FieldType::SMALLDATETIME => 'core:date',
+        FieldType::SMALLINT      => 'core:number',  
+        FieldType::SMALLMONEY    => 'core:string',
+        FieldType::SYSNAME       => 'core:string',   
+        FieldType::TEXT          => 'core:text',    
+        FieldType::TIMESTAMP     => 'core:string', 
+        FieldType::TINYINT       => 'core:number',   
+        FieldType::VARBINARY     => 'core:string', 
+        FieldType::VARCHAR       => 'core:string', 
+      );
+      
+      return $types[$fieldType];
+    }
+    
+    public static function casterFor($fieldType) {
+      static $casters= array(
+        FieldType::BINARY        => NULL,   
+        FieldType::BIT           => NULL,     
+        FieldType::CHAR          => NULL,    
+        FieldType::DATETIME      => array('scriptlet.xml.workflow.casters.ToDate'),  
+        FieldType::DATETIMN      => array('scriptlet.xml.workflow.casters.ToDate'),  
+        FieldType::DECIMAL       => array('scriptlet.xml.workflow.casters.ToFloat'),   
+        FieldType::DECIMALN      => array('scriptlet.xml.workflow.casters.ToFloat'),  
+        FieldType::FLOAT         => array('scriptlet.xml.workflow.casters.ToFloat'),
+        FieldType::FLOATN        => NULL,   
+        FieldType::IMAGE         => NULL,   
+        FieldType::INT           => array('scriptlet.xml.workflow.casters.ToInteger'),     
+        FieldType::INTN          => array('scriptlet.xml.workflow.casters.ToInteger'),    
+        FieldType::MONEY         => NULL,   
+        FieldType::MONEYN        => NULL,   
+        FieldType::NCHAR         => NULL,   
+        FieldType::NUMERIC       => array('scriptlet.xml.workflow.casters.ToInteger'),   
+        FieldType::NUMERICN      => array('scriptlet.xml.workflow.casters.ToInteger'),  
+        FieldType::NVARCHAR      => NULL,  
+        FieldType::REAL          => array('scriptlet.xml.workflow.casters.ToFloat'),    
+        FieldType::SMALLDATETIME => array('scriptlet.xml.workflow.casters.ToDate'),
+        FieldType::SMALLINT      => array('scriptlet.xml.workflow.casters.ToInteger'),  
+        FieldType::SMALLMONEY    => NULL,
+        FieldType::SYSNAME       => NULL,   
+        FieldType::TEXT          => NULL,    
+        FieldType::TIMESTAMP     => NULL, 
+        FieldType::TINYINT       => array('scriptlet.xml.workflow.casters.ToInteger'),
+        FieldType::VARBINARY     => NULL, 
+        FieldType::VARCHAR       => NULL, 
+      );
+
+      return $casters[$fieldType];
+    }
+  
+  }
+?>

Property changes on: facade/dataset/FieldTypeMap.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: facade/Facade.class.php
===================================================================
--- facade/Facade.class.php	(revision 0)
+++ facade/Facade.class.php	(revision 0)
@@ -0,0 +1,15 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  /**
+   * Facade
+   *
+   * @purpose  Interface
+   */
+  interface Facade {
+
+  }
+?>

Property changes on: facade/Facade.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

