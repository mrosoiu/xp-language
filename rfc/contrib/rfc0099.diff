Index: skeleton/rdbms/finder/FinderException.class.php
===================================================================
--- skeleton/rdbms/finder/FinderException.class.php	(revision 0)
+++ skeleton/rdbms/finder/FinderException.class.php	(revision 0)
@@ -0,0 +1,21 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  uses('util.ChainedException');
+
+  /**
+   * Indicates an exception occured while using the Finder API. All
+   * methods will wrap exceptions into an instance of this class or
+   * a subclass of it. The causing exception is available via the 
+   * getCause() method.
+   *
+   * @see      xp://util.ChainedException
+   * @purpose  Chained exception
+   */
+  class FinderException extends ChainedException {
+  
+  }
+?>

Property changes on: skeleton/rdbms/finder/FinderException.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: skeleton/rdbms/finder/Finder.class.php
===================================================================
--- skeleton/rdbms/finder/Finder.class.php	(revision 0)
+++ skeleton/rdbms/finder/Finder.class.php	(revision 0)
@@ -0,0 +1,215 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  define('ENTITY',     '<? extends DataSet>');
+  define('COLLECTION', '<? extends DataSet>[]');
+
+  uses(
+    'rdbms.finder.FinderException',
+    'rdbms.finder.FinderMethod',
+    'rdbms.finder.NoSuchEntityException',
+    'lang.MethodNotImplementedException'
+  );
+
+  /**
+   * A finder is a collection of criteria for a given rdbms.Peer object.
+   *
+   * Declaration:
+   * <code>
+   *   class JobFinder extends Finder {
+   *     public function getPeer() {
+   *       return Job::getPeer();
+   *     }
+   *
+   *     #[@finder(kind= ENTITY)]
+   *     public function byPrimary($pk) {
+   *       return new Criteria(array('job_id', $pk, EQUAL));
+   *     }
+   *
+   *     #[@finder(kind= COLLECTION)]
+   *     public function expiredJobs() {
+   *       return new Criteria(array('expire_at', Date::now(), GREATER_EQUAL));
+   *     }
+   *   }
+   * </code>
+   *
+   * Finding single entities:
+   * <code>
+   *   $jf= new JobFinder();
+   *   $job= $jf->find($jf->byPrimary(10));
+   * </code>
+   *
+   * Reflective use:
+   * <code>
+   *   $jf= new JobFinder();
+   *
+   *   Console::writeLine($jf->getClassName(), ' provides the following list methods:');
+   *   foreach ($jf->collectionMethods() as $m) {
+   *     Console::writeLine('- ', $m->getName());
+   *   }
+   * </code>
+   *
+   * Finding a collection of entities:
+   * <code>
+   *   // Hardcoded version
+   *   $jf->findAll($jf->expiredJobs(10));
+   *
+   *   // Generic access version
+   *   $jf->findAll($jf->method('expiredJobs')->invoke(array(10)));
+   * </code>
+   *
+   * Iterating on a collection of entities:
+   * <code>
+   *   for ($iterator= $jf->iterate($jf->expiredJobs(10)); $iterator->hasNext(); ) {
+   *     Console::writeLine($iterator->next());
+   *   }
+   * </code>
+   *
+   * @purpose  Base class for all finder
+   */
+  abstract class Finder extends Object {
+  
+    /**
+     * Returns the associated peer objects
+     *
+     * @return  rdbms.Peer
+     */
+    public abstract function getPeer();
+    
+    /**
+     * Helper methods for *Methods() methods.
+     *
+     * @param   string kind
+     * @return  rdbms.finder.FinderMethod[]
+     */
+    protected function finderMethods($kind) {
+      $r= array();
+      foreach ($this->getClass()->getMethods() as $m) {
+        if (
+          $m->hasAnnotation('finder') &&
+          (NULL === $kind || $kind == $m->getAnnotation('finder', 'kind'))
+        ) $r[]= new FinderMethod($this, $m);
+      }
+      return $r;
+    }
+
+    /**
+     * Returns all finder methods
+     *
+     * @see     xp://rdbms.finder.Finder#entityMethods
+     * @see     xp://rdbms.finder.Finder#collectionMethods
+     * @return  rdbms.finder.FinderMethod[]
+     */
+    public function allMethods() {
+      return $this->finderMethods(NULL);
+    }
+
+    /**
+     * Returns all finder methods that return a single entity
+     *
+     * @return  rdbms.finder.FinderMethod[]
+     */
+    public function entityMethods() {
+      return $this->finderMethods(ENTITY);
+    }
+
+    /**
+     * Returns all finder methods that return a colleciton of entities
+     *
+     * @return  rdbms.finder.FinderMethod[]
+     */
+    public function collectionMethods() {
+      return $this->finderMethods(COLLECTION);
+    }
+
+    /**
+     * Retrieve a single finder method. Returns the all() method if the 
+     * name argument is NULL
+     *
+     * @param   string name
+     * @return  rdbms.finder.FinderMethod in case the method does not exist or is no finder
+     * @throws  rdbms.finder.FinderException
+     */
+    public function method($name) {
+      NULL === $name && $name= 'all';
+
+      if (!($m= $this->getClass()->getMethod($name))) {
+        throw new FinderException('No such finder', new MethodNotImplementedException($name));
+      }
+      if (!$m->hasAnnotation('finder')) {
+        throw new FinderException('Not a finder', new IllegalArgumentException($m->getName()));
+      }
+      
+      return new FinderMethod($this, $m);
+    }
+    
+    /**
+     * Returns an empty criteria object
+     *
+     * @return  rdbms.Criteria
+     */
+    #[@finder(kind= COLLECTION)]
+    public function all() {
+      return new Criteria();
+    }
+    
+    /**
+     * Find a single entity by specified criteria.
+     *
+     * @param   rdbms.Criteria
+     * @return  rdbms.DataSet
+     * @throws  rdbms.finder.NoSuchEntityException
+     * @throws  rdbms.finder.FinderException
+     */
+    public function find($criteria) {
+      $list= $this->findAll($criteria);
+
+      switch ($s= sizeof($list)) {
+        case 1: return $list[0];            // OK, we expect exactly one element
+
+        case 0: throw new NoSuchEntityException(
+          'Entity does not exist', 
+          new IllegalStateException('No results for '.$criteria->toString())
+        );
+
+        default: throw new FinderException(
+          'Query returned more than one result ('.$s.')', 
+          new IllegalStateException('')
+        );
+      }
+    }
+
+    /**
+     * Find a list of entities by specified criteria..
+     *
+     * @param   rdbms.Criteria
+     * @return  rdbms.DataSet[]
+     * @throws  rdbms.finder.FinderException
+     */
+    public function findAll($criteria) {
+      try {
+        return $this->getPeer()->doSelect($criteria);
+      } catch (SQLException $e) {
+        throw new FinderException('Failed finding '.$this->getPeer()->identifier, $e);
+      }
+    }
+
+    /**
+     * Iterate on a list of entities by specified criteria..
+     *
+     * @param   rdbms.Criteria
+     * @return  rdbms.ResultIterator
+     * @throws  rdbms.finder.FinderException
+     */
+    public function iterate($criteria) {
+      try {
+        return $this->getPeer()->iteratorFor($criteria);
+      } catch (SQLException $e) {
+        throw new FinderException('Failed finding '.$this->getPeer()->identifier, $e);
+      }
+    }
+  }
+?>

Property changes on: skeleton/rdbms/finder/Finder.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: skeleton/rdbms/finder/FinderMethod.class.php
===================================================================
--- skeleton/rdbms/finder/FinderMethod.class.php	(revision 0)
+++ skeleton/rdbms/finder/FinderMethod.class.php	(revision 0)
@@ -0,0 +1,84 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  /**
+   * Represents a finder method. Finder methods are methods inside
+   * a rdbms.finder.Finder subclass that are decorated with the
+   * "finder" annotation.
+   *
+   * There are two kinds of finder methods
+   * <ol>
+   *   <li>Those that return a single entity, finder(kind= ENTITIY)</li>
+   *   <li>Those that return a collection fo entities, finder(kind= COLLECTION)</li>
+   * </ol>
+   *
+   * @see      xp://rdbms.finder.Finder
+   * @purpose  Method wrapper
+   */
+  class FinderMethod extends Object {
+    protected
+      $finder= NULL, 
+      $method= NULL;
+
+    /**
+     * Constructor
+     *
+     * @param   rdbms.finder.Finder finder
+     * @param   lang.reflect.Method method
+     */
+    function __construct($finder, $method) {
+      $this->finder= $finder;
+      $this->method= $method;
+    }
+    
+    /**
+     * Gets this method's kind
+     *
+     * @return  string kind one of ENTITY | COLLECTION
+     */
+    function getKind() {
+      return current($this->method->getAnnotation('finder'));
+    }
+ 
+    /**
+     * Returns this method's name
+     *
+     * @return  string method name
+     */
+    function getName() {
+      return $this->method->getName();
+    }
+   
+    /**
+     * Creates a string representation of this object
+     *
+     * @return  string
+     */
+    function toString() {
+      return sprintf(
+        '%s(%s %s::%s())',
+        $this->getClassName(),
+        $this->getKind(),
+        $this->finder->getClassName(),
+        $this->method->getName()
+      );
+    }
+  
+    /**
+     * Invokes this method
+     *
+     * @param   mixed[] args default array()
+     * @return  mixed
+     */
+    function invoke($args= array()) {
+      try {
+        return $this->method->invoke($this->finder, $args);
+      } catch (Throwable $e) {
+        throw new FinderException($this->method->getName().' invocation failed', $e);
+      }
+    }
+  }
+?>

Property changes on: skeleton/rdbms/finder/FinderMethod.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: skeleton/rdbms/finder/FinderAdapter.class.php
===================================================================
--- skeleton/rdbms/finder/FinderAdapter.class.php	(revision 0)
+++ skeleton/rdbms/finder/FinderAdapter.class.php	(revision 0)
@@ -0,0 +1,37 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  uses('rdbms.finder.Finder');
+
+  /**
+   * Adapter that makes rdbms.Peer objects usable as finders.
+   *
+   * @see      xp://rdbms.Peer
+   * @purpose  Finder / Peer Adapter
+   */
+  class FinderAdapter extends Finder {
+    protected 
+      $peer= NULL;
+
+    /**
+     * Constructor
+     *
+     * @param   rdbms.Peer peer
+     */
+    public function __construct($peer) {
+      $this->peer= $peer;
+    }
+
+    /**
+     * Retrieve this finder's peer object
+     *
+     * @return  rdbms.Peer
+     */
+    public function getPeer() {
+      return $this->peer;
+    }
+  }
+?>

Property changes on: skeleton/rdbms/finder/FinderAdapter.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: skeleton/rdbms/finder/NoSuchEntityException.class.php
===================================================================
--- skeleton/rdbms/finder/NoSuchEntityException.class.php	(revision 0)
+++ skeleton/rdbms/finder/NoSuchEntityException.class.php	(revision 0)
@@ -0,0 +1,18 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  uses('rdbms.finder.FinderException');
+
+  /**
+   * Indicates a specific entity could not be found
+   *
+   * @see      xp://rdbms.finder.FinderException#find
+   * @purpose  Chained exception
+   */
+  class NoSuchEntityException extends FinderException {
+  
+  }
+?>

Property changes on: skeleton/rdbms/finder/NoSuchEntityException.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: ports/classes/net/xp_framework/unittest/rdbms/FinderTest.class.php
===================================================================
--- ports/classes/net/xp_framework/unittest/rdbms/FinderTest.class.php	(revision 0)
+++ ports/classes/net/xp_framework/unittest/rdbms/FinderTest.class.php	(revision 0)
@@ -0,0 +1,261 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  uses(
+    'unittest.TestCase',
+    'rdbms.DriverManager',
+    'rdbms.ConnectionManager',
+    'net.xp_framework.unittest.rdbms.mock.MockConnection',
+    'net.xp_framework.unittest.rdbms.dataset.JobFinder'
+  );
+
+  /**
+   * TestCase
+   *
+   * @see      xp://rdbms.finder.Finder
+   * @purpose  Unit test
+   */
+  class FinderTest extends TestCase {
+
+    static function __static() {
+      DriverManager::register(
+        'mock', 
+        XPClass::forName('net.xp_framework.unittest.rdbms.mock.MockConnection')
+      );
+      ConnectionManager::getInstance()->register(
+        DriverManager::getConnection('mock://mock/JOBS?autoconnect=1'), 
+        'jobs'
+      );
+    }
+
+    /**
+     * Helper method which invokes the finder's method() method and un-wraps
+     * exceptions thrown.
+     *
+     * @param   string name
+     * @return  rdbms.finder.FinderMethod
+     * @throws  lang.Throwable
+     */
+    protected function method($name) {
+      try {
+        return $this->fixture->method($name);
+      } catch (FinderException $e) {
+        throw $e->getCause();
+      }
+    }
+
+    /**
+     * Helper methods
+     *
+     * @return  net.xp_framework.unittest.rdbms.mock.MockConnection
+     */
+    protected function getConnection() {
+      return ConnectionManager::getInstance()->getByHost('jobs', 0);
+    }
+
+    /**
+     * Sets up test case
+     *
+     */
+    public function setUp() {
+      $this->fixture= new JobFinder();
+    }
+    
+    /**
+     * Tests the getPeer() method
+     *
+     */
+    #[@test]
+    public function peerObject() {
+      $this->assertClass($this->fixture->getPeer(), 'rdbms.Peer');
+    }
+
+    /**
+     * Tests the getPeer() method returns the same Peer instance that 
+     * Job::getPeer() returns.
+     *
+     */
+    #[@test]
+    public function jobPeer() {
+      $this->assertEquals($this->fixture->getPeer(), Job::getPeer());
+    }
+
+    /**
+     * Tests the entityMethods() method
+     *
+     */
+    #[@test]
+    public function entityMethods() {
+      $methods= $this->fixture->entityMethods();
+      $this->assertEquals(1, sizeof($methods));
+      $this->assertClass($methods[0], 'rdbms.finder.FinderMethod');
+      $this->assertEquals(ENTITY, $methods[0]->getKind());
+      $this->assertEquals('byPrimary', $methods[0]->getName());
+      $this->assertSubClass($methods[0]->invoke(array($pk= 1)), 'rdbms.SQLExpression');
+    }
+
+    /**
+     * Tests the collectionMethods() method
+     *
+     */
+    #[@test]
+    public function collectionMethods() {
+      static $invocation= array(
+        'all'         => array(),
+        'newestJobs'  => array(),
+        'expiredJobs' => array(),
+        'similarTo'   => array('Test')
+      );
+
+      $methods= $this->fixture->collectionMethods();
+      $this->assertEquals(4, sizeof($methods)); // three declared plu all()
+      foreach ($methods as $method) {
+        $this->assertClass($method, 'rdbms.finder.FinderMethod');
+        $name= $method->getName();
+        $this->assertEquals(COLLECTION, $method->getKind(), $name);
+        $this->assertEquals(TRUE, isset($invocation[$name]), $name);
+        $this->assertSubClass($method->invoke($invocation[$name]), 'rdbms.SQLExpression', $name);
+      }
+    }
+
+    /**
+     * Tests the allMethods() method
+     *
+     */
+    #[@test]
+    public function allMethods() {
+      $methods= $this->fixture->allMethods(); // four declared plu all()
+      $this->assertEquals(5, sizeof($methods));
+    }
+
+    /**
+     * Tests the method() method
+     *
+     */
+    #[@test]
+    public function byPrimaryMethod() {
+      $method= $this->fixture->method('byPrimary');
+      $this->assertClass($method, 'rdbms.finder.FinderMethod');
+      $this->assertEquals('byPrimary', $method->getName());
+      $this->assertEquals(ENTITY, $method->getKind());
+    }
+    
+    /**
+     * Tests the method() method throws an exception when passed a 
+     * non-existant method name
+     *
+     */
+    #[@test, @expect('lang.MethodNotImplementedException')]
+    public function nonExistantMethod() {
+      $this->method('@@NON-EXISTANT@@');
+    }
+
+    /**
+     * Tests the method() method throws an exception when passed a 
+     * method name which refers to a non-finder method.
+     *
+     */
+    #[@test, @expect('lang.IllegalArgumentException')]
+    public function notAFinderMethod() {
+      $this->method('getPeer');
+    }
+    
+    /**
+     * Tests find(byPrimary())
+     *
+     */
+    #[@test]
+    public function findByExistingPrimary() {
+      $this->getConnection()->setResultSet(new MockResultSet(array(
+        0 => array(   // First row
+          'job_id'      => 1,
+          'title'       => $this->getName(),
+          'valid_from'  => Date::now(),
+          'expire_at'   => NULL
+        )
+      )));
+      $entity= $this->fixture->find($this->fixture->byPrimary(1));
+      $this->assertClass($entity, 'net.xp_framework.unittest.rdbms.dataset.Job');
+    }
+
+    /**
+     * Tests find(byPrimary()) for the situation when nothing is returned.
+     *
+     */
+    #[@test, @expect('rdbms.finder.NoSuchEntityException')]
+    public function findByNonExistantPrimary() {
+      $this->fixture->find($this->fixture->byPrimary(0));
+    }
+
+    /**
+     * Tests find(byPrimary()) for the situation when more than one result
+     * is returned.
+     *
+     */
+    #[@test, @expect('rdbms.finder.FinderException')]
+    public function unexpectedResults() {
+      $this->getConnection()->setResultSet(new MockResultSet(array(
+        0 => array(   // First row
+          'job_id'      => 1,
+          'title'       => $this->getName(),
+          'valid_from'  => Date::now(),
+          'expire_at'   => NULL
+        ),
+        1 => array(   // Second row
+          'job_id'      => 2,
+          'title'       => $this->getName().' #2',
+          'valid_from'  => Date::now(),
+          'expire_at'   => NULL
+        )
+      )));
+      $this->fixture->find($this->fixture->byPrimary(1));
+    }
+
+    /**
+     * Tests findAll(newestJobs())
+     *
+     */
+    #[@test]
+    public function findNewestJobs() {
+      $this->getConnection()->setResultSet(new MockResultSet(array(
+        0 => array(   // First row
+          'job_id'      => 1,
+          'title'       => $this->getName(),
+          'valid_from'  => Date::now(),
+          'expire_at'   => NULL
+        ),
+        1 => array(   // Second row
+          'job_id'      => 2,
+          'title'       => $this->getName().' #2',
+          'valid_from'  => Date::now(),
+          'expire_at'   => NULL
+        )
+      )));
+      $collection= $this->fixture->findAll($this->fixture->newestJobs());
+      $this->assertEquals(2, sizeof($collection));
+    }
+
+    /**
+     * Tests find() wraps SQLExceptions into FinderExceptions
+     *
+     */
+    #[@test, @expect('rdbms.finder.FinderException')]
+    public function findWrapsSQLException() {
+      $this->getConnection()->makeQueryFail(6010, 'Not enough power');
+      $this->fixture->find(new Criteria());
+    }
+
+    /**
+     * Tests findAll() wraps SQLExceptions into FinderExceptions
+     *
+     */
+    #[@test, @expect('rdbms.finder.FinderException')]
+    public function findAllWrapsSQLException() {
+      $this->getConnection()->makeQueryFail(6010, 'Not enough power');
+      $this->fixture->findAll(new Criteria());
+    }
+  }
+?>

Property changes on: ports/classes/net/xp_framework/unittest/rdbms/FinderTest.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

