Index: collections/FileElement.class.php
===================================================================
--- collections/FileElement.class.php	(revision 0)
+++ collections/FileElement.class.php	(revision 0)
@@ -0,0 +1,48 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  /**
+   * Represents a file element
+   *
+   * @see      xp://io.collections.FolderCollection
+   * @purpose  Interface
+   */
+  class FileElement extends Object {
+    var
+      $uri= '';
+
+    /**
+     * Constructor
+     *
+     * @access  publid
+     * @param   string uri
+     */
+    function __construct($uri) {
+      $this->uri= $uri;
+    }
+
+    /**
+     * Returns this element's URI
+     *
+     * @access  public
+     * @return  string
+     */
+    function getURI() { 
+      return $this->uri;
+    }
+
+    /**
+     * Creates a string representation of this object
+     *
+     * @access  public
+     * @return  string
+     */
+    function toString() { 
+      return $this->getClassName().'('.$this->uri.')';
+    }
+
+  } implements(__FILE__, 'io.collections.IOElement');
+?>

Property changes on: collections/FileElement.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: collections/FileCollection.class.php
===================================================================
--- collections/FileCollection.class.php	(revision 0)
+++ collections/FileCollection.class.php	(revision 0)
@@ -0,0 +1,101 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  uses('io.collections.FileElement');
+
+  /**
+   * File collection
+   *
+   * @see      xp://io.collections.IOCollection
+   * @purpose  IOCollection implementation
+   */
+  class FileCollection extends Object {
+    var
+      $uri = '';
+    
+    var
+      $_hd = NULL;
+      
+    /**
+     * Constructor
+     *
+     * @access  public
+     * @param   string uri
+     */
+    function __construct($uri) {
+      $this->uri= rtrim(realpath($uri), DIRECTORY_SEPARATOR).DIRECTORY_SEPARATOR;
+    }
+    
+    /**
+     * Returns this element's URI
+     *
+     * @access  public
+     * @return  string
+     */
+    function getURI() {
+      return $this->uri;
+    }
+    
+    /**
+     * Open this collection
+     *
+     * @access  public
+     */
+    function open() { 
+      $this->_hd= opendir($this->uri);
+    }
+
+    /**
+     * Rewind this collection (reset internal pointer to beginning of list)
+     *
+     * @access  public
+     */
+    function rewind() { 
+      rewinddir($this->_hd);
+    }
+  
+    /**
+     * Retrieve next element in collection. Return NULL if no more entries
+     * are available
+     *
+     * @access  public
+     * @return  &io.collection.IOElement
+     */
+    function &next() { 
+      do {
+        if (FALSE === ($entry= readdir($this->_hd))) return NULL;
+      } while ('.' == $entry || '..' == $entry);
+      
+      $qualified= $this->uri.$entry; 
+      if (is_dir($qualified)) {
+        $next= &new FileCollection($qualified);
+      } else {
+        $next= &new FileElement($qualified);
+      }
+      return $next;
+    }
+
+    /**
+     * Close this collection
+     *
+     * @access  public
+     */
+    function close() { 
+      closedir($this->_hd);
+    }
+
+    /**
+     * Creates a string representation of this object
+     *
+     * @access  public
+     * @return  string
+     */
+    function toString() { 
+      return $this->getClassName().'('.$this->uri.')';
+    }
+  
+  } implements(__FILE__, 'io.collections.IOCollection');
+?>

Property changes on: collections/FileCollection.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: collections/IOElement.class.php
===================================================================
--- collections/IOElement.class.php	(revision 0)
+++ collections/IOElement.class.php	(revision 0)
@@ -0,0 +1,22 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  /**
+   * IO Element
+   *
+   * @purpose  Interface
+   */
+  class IOElement extends Interface {
+
+    /**
+     * Retrieve this element's URI
+     *
+     * @access  public
+     * @return  string
+     */
+    function getURI() { }
+  }
+?>

Property changes on: collections/IOElement.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: collections/iterate/FilteredIOCollectionIterator.class.php
===================================================================
--- collections/iterate/FilteredIOCollectionIterator.class.php	(revision 0)
+++ collections/iterate/FilteredIOCollectionIterator.class.php	(revision 0)
@@ -0,0 +1,61 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$
+ */
+
+  uses('io.collections.iterate.IOCollectionIterator');
+
+
+  /**
+   * Iterates over elements of a folder, only returning those elements that
+   * are accepted by the specified filter.
+   *
+   * <code>
+   *   uses(
+   *     'io.collections.FileCollection',
+   *     'io.collections.iterate.FilteredIOCollectionIterator',
+   *     'io.collections.iterate.RegexFilter'
+   *   );
+   *
+   *   $origin= &new FileCollection('/etc');
+   *   for (
+   *     $i= &new FilteredIOCollectionIterator($origin, new RegexFilter('/\.jpe?g$/i')); 
+   *     $i->hasNext(); 
+   *   ) {
+   *     Console::writeLine('Element ', xp::stringOf($i->next()));
+   *   }
+   * </code>
+   *
+   * @see      xp://io.collections.iterate.IOCollectionIterator
+   * @purpose  Iterator
+   */
+  class FilteredIOCollectionIterator extends IOCollectionIterator {
+    var
+      $filter    = NULL;
+    
+    /**
+     * Constructor
+     *
+     * @access  public
+     * @param   &io.collections.IOCollection collection
+     * @param   &io.collections.iterate.Filter filter
+     * @param   bool recursive default FALSE whether to recurse into subdirectories
+     */
+    function __construct(&$collection, &$filter, $recursive= FALSE) {
+      parent::__construct($collection, $recursive);
+      $this->filter= &$filter;
+    }
+    
+    /**
+     * Whether to accept a specific element
+     *
+     * @access  protected
+     * @param   &io.collections.IOElement element
+     * @return  bool
+     */
+    function acceptElement(&$element) {
+      return $this->filter->accept($element);
+    }
+  }
+?>

Property changes on: collections/iterate/FilteredIOCollectionIterator.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: collections/iterate/IOCollectionIterator.class.php
===================================================================
--- collections/iterate/IOCollectionIterator.class.php	(revision 0)
+++ collections/iterate/IOCollectionIterator.class.php	(revision 0)
@@ -0,0 +1,113 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$
+ */
+
+  uses('io.IOCollection');
+
+  /**
+   * Iterates over elements of a collection.
+   *
+   * <code>
+   *   uses(
+   *     'io.collections.FileCollection',
+   *     'io.collections.iterate.IOCollectionIterator'
+   *   );
+   *
+   *   $origin= &new FileCollection('/etc');
+   *
+   *   for ($i= &new IOCollectionIterator($origin); $i->hasNext(); ) {
+   *     Console::writeLine('Element ', xp::stringOf($i->next()));
+   *   }
+   * </code>
+   *
+   * @purpose  Iterator
+   */
+  class IOCollectionIterator extends Object {
+    var
+      $collections = array(),
+      $recursive   = FALSE;
+    
+    var
+      $_element    = NULL;
+    
+    /**
+     * Constructor
+     *
+     * @access  public
+     * @param   &io.collections.IOCollection collection
+     * @param   bool recursive default FALSE whether to recurse into subdirectories
+     */
+    function __construct(&$collection, $recursive= FALSE) {
+      $this->collections= array(&$collection);
+      $this->collections[0]->open();
+      $this->recursive= $recursive;
+    }
+
+    /**
+     * Whether to accept a specific element. Always returns TRUE in this
+     * implementation - overwrite in subclasses...
+     *
+     * @access  protected
+     * @param   &io.collections.IOElement element
+     * @return  bool
+     */
+    function acceptElement(&$element) {
+      return TRUE;
+    }
+    
+    /**
+     * Returns true if the iteration has more elements. (In other words,
+     * returns true if next would return an element rather than throwing
+     * an exception.)
+     *
+     * @access  public
+     * @return  bool
+     */
+    function hasNext() {
+      if ($this->_element) return TRUE; // next() not yet invoked, previously found entry available
+
+      do {
+        // End of collection, pop off stack and continue if there are more, 
+        // returning otherwise
+        $this->_element= &$this->collections[0]->next();
+        if (NULL === $this->_element) {
+          $this->collections[0]->close();
+          array_shift($this->collections);
+
+          if (empty($this->collections)) return FALSE; else continue;
+        }
+
+        // Check whether to recurse into subcollections
+        if ($this->recursive && is('io.collections.IOCollection', $this->_element)) {
+          array_unshift($this->collections, $this->_element);
+          $this->collections[0]->open();
+        }
+        
+        // Check to see if the element is accepted. In case it isn't, continue searching
+        if ($this->acceptElement($this->_element)) return TRUE;
+      } while ($this->collections);
+
+      return FALSE;
+    }
+    
+    /**
+     * Returns the next element in the iteration.
+     *
+     * @access  public
+     * @return  &io.collections.IOElement
+     * @throws  util.NoSuchElementException when there are no more elements
+     */
+    function &next() {
+      if (!$this->hasNext()) {
+        return throw(new NoSuchElementException('No more  entries'));
+      }
+      
+      $next= $this->_element;
+      $this->_element= NULL;
+      return $next;
+    }  
+
+  } implements(__FILE__, 'util.Iterator');
+?>

Property changes on: collections/iterate/IOCollectionIterator.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: collections/iterate/RegexFilter.class.php
===================================================================
--- collections/iterate/RegexFilter.class.php	(revision 0)
+++ collections/iterate/RegexFilter.class.php	(revision 0)
@@ -0,0 +1,39 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  /**
+   * Regular expression iteration filter
+   *
+   * @see      php://preg_match
+   * @purpose  Iteration Filter
+   */
+  class RegexFilter extends Object {
+    var
+      $pattern= '';
+      
+    /**
+     * Constructor
+     *
+     * @access  public
+     * @param   string pattern a Perl-compatible regular expression
+     */
+    function __construct($pattern) {
+      $this->pattern= $pattern;
+    }
+  
+    /**
+     * Accepts an element
+     *
+     * @access  public
+     * @param   &io.collections.IOElement element
+     * @return  bool
+     */
+    function accept(&$element) {
+      return (bool)preg_match($this->pattern, $element->getURI());
+    }
+  
+  } implements(__FILE__, 'io.collections.iterate.IterationFilter');
+?>

Property changes on: collections/iterate/RegexFilter.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: collections/iterate/IterationFilter.class.php
===================================================================
--- collections/iterate/IterationFilter.class.php	(revision 0)
+++ collections/iterate/IterationFilter.class.php	(revision 0)
@@ -0,0 +1,25 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  /**
+   * Iteration filter
+   *
+   * @see      xp://io.folder.iterate.FilteredFolderIterator
+   * @purpose  Interface
+   */
+  class IterationFilter extends Interface {
+  
+    /**
+     * Accepts an element
+     *
+     * @access  public
+     * @param   &io.collections.IOElement element
+     * @return  bool
+     */
+    function accept(&$element) { }
+  
+  }
+?>

Property changes on: collections/iterate/IterationFilter.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

Index: collections/IOCollection.class.php
===================================================================
--- collections/IOCollection.class.php	(revision 0)
+++ collections/IOCollection.class.php	(revision 0)
@@ -0,0 +1,47 @@
+<?php
+/* This class is part of the XP framework
+ *
+ * $Id$ 
+ */
+
+  uses('io.collections.IOElement');
+
+  /**
+   * IO Collection interface
+   *
+   * @purpose  Interface
+   */
+  class IOCollection extends IOElement {
+
+    /**
+     * Open this collection
+     *
+     * @access  public
+     */
+    function open() { }
+
+    /**
+     * Rewind this collection (reset internal pointer to beginning of list)
+     *
+     * @access  public
+     */
+    function rewind() { }
+  
+    /**
+     * Retrieve next element in collection. Return NULL if no more entries
+     * are available
+     *
+     * @access  public
+     * @return  &io.collection.IOElement
+     */
+    function &next() { }
+
+    /**
+     * Close this collection
+     *
+     * @access  public
+     */
+    function close() { }
+
+  }
+?>

Property changes on: collections/IOCollection.class.php
___________________________________________________________________
Name: svn:keywords
   + Id

