RFC 0010: Type casts
========================================================================
$Id$

@authors: friebe
@created: Mon Nov 22 20:58:08 CET 2004
@status: draft
@category: <core>

Scope of Change
---------------
The core function cast() is changed to support class hierarchies 
correctly. Also, cast() should no longer change the passed variable.

Rationale
---------
The current model allows users to cast between arbitrary types.


Functionality
-------------

Motivation
~~~~~~~~~~
Consider the following sourcecode:
<?php
  $user= $session->getValue('user');
  echo $user->getUsername();
?>

Because HttpSession::getValue() returns anything, we cannot be really sure
that we get a user object, or an object at all; in both cases we'd see a
fatal error occuring.

We could now rewrite the code to:
<?php
  $user= $session->getValue('user');
  if (!$user instanceof User) {
    throw new IllegalStateException('Session key "user" is not a User instance');
  }
  echo $user->getUsername();
?>

This RFC suggests to rewrite that to the following:
<?php
  $user= cast($session->getValue('user'), 'com.example.vo.User');
  echo $user->getUsername();
?>

The cast function would raise an exception in case the value returned is 
not a User instance, thus yielding the same behaviour as the second 
example.

Syntax
~~~~~~
<pre>
  T cast(Generic expression= NULL, TypeRef::T class)
<pre>

Null values
~~~~~~~~~~~
Null values are casted to xp::null().

<?php
  $session->putValue('user', NULL);
  $user= cast($session->getValue('user'), 'com.example.vo.User');
  echo $user->getUsername();    // *** NullPointerException ***
?>

Primitives
~~~~~~~~~~
Primitives can not be cast. An IllegalArgumentException will be raised
if a primitive is passed as value.

Objects
~~~~~~~
An object can be cast to:
* Its own class
* One of its superclasses
* One of its interfaces

<?php
  class AbstractConnection extends Object implements Traceable {
    // ...
  }
  
  class Connection extends AbstractConnection implements Observer { 
    // ...
  }
  
  $c= new Connection();
  $a= new AbstractConnection();

  cast($c, 'Connection');           // OK, self
  cast($c, 'AbstractConnection');   // OK, parent class
  cast($c, 'lang.Object');          // OK, parent class
  cast($c, 'util.Observer');        // OK, interface implemented
  cast($c, 'util.log.Traceable');   // OK, interface implemented

  cast($c, 'lang.types.String');    // ClassCastException, unrelated class
  cast($a, 'Connection');           // ClassCastException, subclass
?>

If the destination class does not exist, a lang.ClassNotFoundException
will be thrown.

<?php
  cast(new Object(), 'FooBar')      // *** ClassNotFoundException ***
?>

Dependencies
------------
New class:
* lang.ClassCastException
  Thrown to indicate hierarchy errors (see above for example)


Related documents
-----------------
- http://de3.php.net/manual/en/language.types.type-juggling.php
  PHP Manual: Type Juggling


Comments
--------
- friebe, Mon Nov 22 23:47:13 CET 2004
  Implementation and test scripts created

- friebe, Sun May 27 12:40:48     2007
  Rejected, we have a cast() function (though without all the checks
  suggested here). It is so seldomly used that it might even be worth 
  to think about removing it; but probably the best idea is to just
  leave everything as-is.

- friebe, Sat Dec 22 17:52:51     2007
  Revived this rejected RFC

<EOF>
