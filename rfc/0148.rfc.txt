RFC 0148: Bytes type
========================================================================
$Id$

@authors: friebe
@created: Sun Dec 23 00:00:08     2007
@status: implemented, Mon Feb 11 21:51:27     2008
@category: lang.types

Scope of Change
---------------
A new type wrapper class lang.types.Bytes will be added. It represents
an array of bytes (byte[] in Java).


Rationale
---------
* Type to detect binary data to be used in numerous APIs (SOAP, XMLRPC,
  EASC, ...)
* Forward-compatibility with Unicode version


Functionality
-------------

Bytes class
~~~~~~~~~~~
The public API is as follows:
<code>
  class Bytes extends Object {

    /**
     * Constructor.
     *
     * @param   mixed initial default NULL
     * @throws  lang.IllegalArgumentException in case argument is of incorrect type.
     */
    public function __construct($initial= NULL) {
      // ...
    }    

    /**
     * Returns this byte list's size
     *
     * @return  string
     */
    public function size() {
      // ...
    }
  }
</code>

Examples
~~~~~~~~
<code>
  // Creates an empty byte array
  $bytes= new Bytes();
  
  // Creates a byte array from a string
  $bytes= new Bytes('Hello');
  
  // Creates a byte array from an array of bytes
  $bytes= new Bytes(array('H', 'e', 'l', 'l', 'o'));
  
  // Creates a byte array from an array of ints
  $bytes= new Bytes(array(72, 101, 108, 108, 111));
  
  // Creates a byte array from of Byte objects
  $bytes= new Bytes(array(new Byte(72), new Byte(105)));
</code>

Overloading
~~~~~~~~~~~
The bytes class overloads array access operations:
<code>
  $bytes= new Bytes('Hello');
  
  // Read first byte (h= lang.types.Byte(72))
  $h= $bytes[0];
  
  // Write second byte (by either supplying a string literal, an int,
  // or a lang.types.Byte object)
  $bytes[1]= 'a';
  $bytes[1]= 72;
  $bytes[1]= new Byte(72);
  
  // Append a byte (Bytes is now equal to "H" "e" "l" "l" "o" "!")
  $bytes[]= '!';
  
  // Remove a byte (Bytes is now what is was before appending)
  unset($bytes[5]);
</code>

The bytes class also overloads the string conversion so it will work
with any of PHP's string functions:
<code>
  $s= (string)new Bytes('Hello');           // s= string(5) "Hello"
  echo new Bytes('Hello');                  // "Hello" is output
  $s= strtr(new Bytes('Hello'), 'e', 'a');  // s= string(5) "Hallo"
</code>

Furthermore, iteration is supported. The following example prints
"72,101,108,108,111,END" (without the quote signs).
<code>
  foreach (new Bytes('Hello') as $byte) {
    echo $byte->intValue(), ',';
  }
  echo 'END';
</code>

Further lang.types API integration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The lang.types.String's and lang.types.Character's getBytes() methods are
changed to return a Bytes instance instead of a primitive string.

<code>
  // b= lang.types.Bytes{\303 \274 b e r c o d er}
  $b= create(new String('übercoder', 'iso-8859-1'))->getBytes('utf-8');
  
  // b = lang.types.Bytes{\303 \274}
  $b= create(new Character('ü', 'iso-8859-1'))->getBytes('utf-8');
  
  // s= lang.types.String{übercoder}
  $s= new String(new Bytes("\303\274bercoder"), 'utf-8');

  // c= lang.types.Character{ü}
  $c= new Character(new Bytes("\303\274"), 'utf-8');
</code>

Integration with other APIs: SOAP
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The SOAP API will recognize lang.types.Bytes objects and render them as
SOAP:Base64Binary during serialization. SOAP:Base64Binary data will be 
returned as lang.types.Bytes objects during deserialization.


Integration with other APIs: XMLRPC
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The XMLRPC API will recognize lang.types.Bytes objects and render them as
Base64 during serialization. Base64 data will be returned as lang.types.Bytes 
objects during deserialization.


Integration with other APIs: EASC
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
EASC will map lang.types.Bytes objects to byte[] on the Java-Side and 
byte[] from the Java-Side to lang.types.Bytes objects. At the moment, byte
arrays are mapped to an array of Byte[] objects, which is significantly
larger in storage space.

The token used for byte arrays will be "Y" (because "B" and "b" are 
already taken for lang.type.Byte and lang.type.Boolean).


Security considerations
-----------------------
n/a


Speed impact
------------
n/a


Dependencies
------------

BC break in EASC API for byte[]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Suppose we have a method called getByteArray() returning (Java notation used)
new byte[] { (byte)1, (byte)2 }. 

This is what will be returned:
<code>
  // Before: lang.types.ArrayList[2] { 
  //   lang.types.Byte(1), 
  //   lang.types.Byte(2) 
  // }
  $before= $remote->getByteArray();
  
  // After: lang.types.Bytes(2) { \1, \2 }
  $after= $remote->getByteArray();
</code>



Related documents
-----------------
- RFC #146
  Unicode RFC

- http://xp-framework.net/rfc/contrib/rfc0148.diff
  Implementing patch


Comments
--------

<EOF>
