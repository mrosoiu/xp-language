RFC 0050: RDBMS Criteria API enhancement
========================================================================
$Id$

@authors: friebe
@created: Thu Jan  5 15:43:13     2006
@status: discussion, ends at Mon Jan  16 12:00:00 CET 2006
@category: rdbms

Scope of Change
---------------
The rdbms.Criteria::add() method will be changed to accept either the 
current list of arguments (string key, mixed value, const comparison)
or a new and more flexible Criterion instance.


Rationale
---------
The current way does not permit construction of complex SQL queries.


Functionality
-------------

1) Simple criteria
~~~~~~~~~~~~~~~~~~
SQL:
<pre>
  select ... where domainname = "thekid.de"
</pre>

Current (and still valid) functionality:
<?php
  new Criteria(array('domainname', 'thekid.de', EQUAL));
?>

New functionality, using the Restrictions factory:
<?php
  new Criteria(Restrictions::equal('domainname', 'thekid.de'));
?>

New functionality, using the Property object:
<?php
  $domainname= &Property::forName('domainname');
  new Criteria($domainname->equal('thekid.de'));
?>


2) Using OR
~~~~~~~~~~~
SQL:
<pre>
  select ... where expire_at > "2006-01-05" or deleted = 1
</pre>

Current (and still valid) functionality:
<?php
  // Not feasible with Criteria's old API, need to use hardcoded SQL
  new Statement(
    'select ... where expire_at > %s or deleted = %d',
    Date::now(),
    TRUE
  );
?>

New functionality, using the Restrictions factory:
<?php
  new Criteria(Restrictions::anyOf(
    Restrictions::greaterThan('expire_at', Date::now()),
    Restrictions::equal('deleted', TRUE)
  ));
?>

New functionality, using the Property object:
<?php
  $expire_at= &Property::forName('expire_at');
  $deleted= &Property::forName('deleted');

  new Criteria(Restrictions::anyOf(
    $expire_at->greaterThan(Date::now()),
    $deleted->equal(TRUE)
  ));
?>

Implementation
~~~~~~~~~~~~~~
There are two variants:

1) Patch Criteria minimally to support the Criterion instances.

2) Change Criteria to use the SimpleExpression class for the
   current API.

See below for diffs.


Security considerations
-----------------------
n/a


Speed impact
------------
- Variant #1: An instance check in add() and one for every condition
  added in the toSQL() loop.

- Variant #2: One instance check in add(), but uses of objects 
  instead of simple arrays in Criteria's member conditions.


Dependencies
------------
- For variant #2, the SimpleExpression class would need to be added to
  Criteria's uses() list.


Related documents
-----------------
- http://www.hibernate.org/
  Relational Persistence for Java and .NET

- http://www.hibernate.org/hib_docs/v3/api/org/hibernate/criterion/package-summary.html
  Package org.hibernate.criterion (a framework for defining restriction 
  criteria and order criteria).

- http://xp-framework.net/downloads/rfc0050-1.diff
  Implementation variant #1

- http://xp-framework.net/downloads/rfc0050-2.diff
  Implementation variant #2

Comments
--------
- friebe, Tue Jan 10 17:19:32 CET 2006
  The methods Restrictions::eitherOf() and Restrictions::bothOf() have 
  funny-sounding names. Maybe we can come up with better ones?

- friebe, Tue Jan 10 17:20:06 CET 2006
  The methods in the Restrictions and Property classes generally have 
  quite long names. Hibernate uses ge() instead of greaterThanOrEqualTo(). 
  Should we abbreviate this far?

- friebe, Thu Jan 12 12:31:18 CET 2006
  I think we should just rename eitherOf() to anyOf() and then support
  two *or more* arguments, and bothOf() to allOf(), doing the same
  to the argument list.

- friebe, Thu Jan 12 12:44:40 CET 2006
  Implementation variant #1 patch is out-of-date, the changes suggested
  in the previous comment are only available in the patch for #2.

<EOF>
