RFC 0103: Coding standards adjustements for XP5
========================================================================
$Id$

@authors: friebe
@created: Wed Dec 20 12:48:40 CET 2006
@status: implemented, Wed Dec 27 15:30:55 CET 2006
@category: <infrastructure>

Scope of Change
---------------
Coding standards will be adjusted to the new language version.


Rationale
---------
- New keywords
- Modifiers


Functionality
-------------

References
~~~~~~~~~~
References are no longer needed and thus disallowed.


Method modifiers & API-Doc tags
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Because we have method modifiers the @access und @model tags will become
obsolete.

XP4:
<code>
  /**
   * Gets the Logger instance
   *
   * @model   static
   * @access  public
   * @return  &util.log.Logger
   */
  function &getInstance() {
    // ...
  }
</code>

XP5:
<code>
  /**
   * Gets the Logger instance
   *
   * @return  util.log.Logger
   */
  public static function getInstance() {
    // ...
  }
</code>

Please also note the reference have disappeared!


Method modifiers order
~~~~~~~~~~~~~~~~~~~~~~
Method modifiers should be given in the following order:

<pre>
  [access] static abstract final
</pre>

[access] is one on public, private or protected.

Examples:
<code>
  protected function __construct() { }
  public static function getInstance() { }
  public abstract function run();
  protected final function getMessage() { }
</code>


Type hints
~~~~~~~~~~
In PHP5, type hints can be used to ensure types on method invocation. These
type hints include any type of object and the keyword "array". For scalar
types, the type hint must be omitted (supplying "string" as type hint will
make the engine try to look up a class called "string").

Type hints are optional.

Example:
<code>
  /**
   * Adds a test
   *
   * @param   Test t
   * @return  Test the added test
   */
  public function addTest(Test $t) { 
    $this->tests[]= $t;
    return $t;
  }
</code>

If addTest() is called with - say - a Date object, an IllegalArgumentException
will be thrown (see RFC #0100).


Interface and abstract methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Interface methods and methods with the abstract modifier may not include a
method body. The correct syntax is a semi-colon after the method declaration,
without any whitespace:

<code>
  interface Filter {
    public function accept($e);
  }

  abstract class Command {
    public abstract function run();
  }
</code>


Try / Throw / Catch Statements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Because try, throw and catch are now supported by the language, the 
following changes are necessary:
<pre>
* The (); needs to be removed from try
* Because catch and throw are now real keywords, they require
  whitespace in front of the opening bracket
* throw does not require ().
</pre>

XP4:
<code>
  try(); {
    throw(new IllegalArgumentException('*BLAM*'));
  } if (catch('IllegalArgumentException', $e)) {
    // ...
  }
</code>

XP5:
<code>
  try {
    throw new IllegalArgumentException('*BLAM*');
  } catch (IllegalArgumentException $e) {
    // ...
  }
</code>


Security considerations
-----------------------
n/a


Speed impact
------------
n/a


Dependencies
------------
This will change the version number to 5.1.0


Related documents
-----------------
- http://xp-framework.net/devel/coding.html
  XP Coding standards

- http://xp-framework.net/rfc/contrib/rfc0103/ports-no-ref.diff
  Diff against ports w/o references

- http://xp-framework.net/rfc/contrib/rfc0103/skeleton-no-ref.diff
  Diff against skeleton w/o references


Comments
--------

<EOF>
