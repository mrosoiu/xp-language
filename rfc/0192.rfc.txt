RFC 0192: Logging API enhancements
========================================================================
$Id$

@authors: kiesel, friebe
@created: Fri Oct 30 10:10:53 CET 2009
@status: implemented, Fri Dec  4 17:53:37     2009
@target: 5.7.6
@category: util.log

Scope of Change
---------------
The logging API util.log will be internally refactored and support new log 
format tokens.
At the same time, the generation of the filename of a LogAppender will become
the appender's duty - it will be able to generate updated filenames after a
day turnaround.

Rationale
---------

Tokens
~~~~~~

The token format was changed to support more tokens, some of which require
rather expensive calculations at runtime. As the old sprintf() approach was
simple, it required calculating all possible values every time, regardless of
whether they were used or not.
The new approach implements an on-demand calculation of parameters and is
easier from human readability perspective.


Configuration evaluation
~~~~~~~~~~~~~~~~~~~~~~~~

Evaluation of configuration settings will be delegated on to the instance
that actually makes use of the configuration.


Functionality
-------------
The refactoring is composed of the following:
<summary>
- Creating a new LoggingEvent class which will carry information about 
  the date, level, pid, category and message.
- Changing the LogAppender::append() method's signature from varargs
  to this new class
- Creating a new LogLayout object that will take care of formatting 
  this event.

</summary>

LoggingEvent
~~~~~~~~~~~~
The event class is a value object which captures a single log entry:
<code>
  class LoggingEvent extends Object {

    /**
     * Creates a new logging event
     *
     * @param   util.log.LogCategory category
     * @param   int timestamp
     * @param   int pid
     * @param   int level one debug, info, warn or error
     * @param   string message
     */
    public function __construct($category, $timestamp, $pid, $level, $message) {
      // ...
    }
  }
</code>

LogLayout
~~~~~~~~~
The layout class 
<code>
  abstract class Layout extends Object {
  
    /**
     * Formats a logging event according to this layout
     *
     * @param   util.log.LoggingEvent event
     * @return  string
     */
    public abstract function format(LoggingEvent $event);
  }
  
  class PatternLayout extends Layout {

    /**
     * Creates a new pattern layout
     *
     * @param   string pattern a pattern containing placeholder tokens
     */
    public function __construct($pattern) {
      // ...
    }
    
    /**
     * Formats a logging event according to this layout
     *
     * @param   util.log.LoggingEvent event
     * @return  string
     */
    public function format(LoggingEvent $event) {
      // ...
    }
  }
</code>

The placeholder tokens used for <tt>util.log.PatternLayout</tt> are:
. {DATE}     => prints the current date in datefmt format
. {PID}      => prints process id of current process
. {LEVEL}    => prints level of log message
. {CATEGORY} => prints category
. {MESSAGE}  => prints message

The old tokens will still be supported for BC until XP 5.8.


Configuration
~~~~~~~~~~~~~

Eg. the FileAppender will be given the original config setting for its filename
so it will be enabled to generate a new filename once the an external event
(eg. midnight) will lead to a newly generated filename.


Security considerations
-----------------------
n/a

Speed impact
------------
n/a


Dependencies
------------
n/a


Related documents
-----------------
* RFC #0064 - RollingFileAppender
* http://logging.apache.org/log4net/release/sdk/log4net.Layout.PatternLayout.html


Comments
--------

<EOF>
