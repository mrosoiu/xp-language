RFC 0067: Add debug logging to remote API
========================================================================
$Id$

@authors: ohinckel
@created: Tue Aug  1 14:12:13 CEST 2006
@status: implemented, Fri Aug 18 16:52:40 CEST 2006
@category: remote

Scope of Change
---------------
A new function setTrace() will be added to the class remote.Remote which
can be used to specify a util.LogCategory for logging requests and
responses.


Rationale
---------
Currently it's very hard to debug the requests/responses between PHP
client and EASC server. To ease the debugging process, it should be
possible to set a LogCategory which is used for logging all requests
and responses.


Functionality
-------------
Setting a trace for remote.Remote class should go like this:
<?php
  $url= 'xp://jboss01.example.com/';
  
  $l= &Logger::getInstance();
  $pool= &HandlerInstancePool::getInstance();
  $handler= &$pool->acquire($url);
  $handler->setTrace($l->getCategory());

  try(); {
    $remote= &Remote::forName($url);
  } if (catch('RemoteException', $e)) {
    return throw($e);
  }
  
  // Proceed with invoking some stuff
  ...
?>

Example logged output:
<code>
[10:48:40 32525 debug] >>> remote.protocol.XpProtocolHandler(pimperator4.schlund.de:6448) echoHash([
  0 => [
    localpart => "xp"
    domain => "php3.de"
  ]
])
[10:48:40 32525 debug] <<< [
  localpart => "xp"
  domain => "php3.de"
]
</code>

The string representation of the passed parameters and the represenation
of the reponse is generated using xp::stringOf() function.

A more detailed logging would also be possible which shows the RAW data
sent between client and server:
<code>
[09:43:12 9089 debug] >>> remote.protocol.XpProtocolHandler(pimperator4.schlund.de:6448) LOOKUP xp/demo/Roundtrip
[09:43:12 9089 debug] >>> Request: [
  0 => xp/demo/Roundtrip
]
[09:43:12 9089 debug] <<< Response: I:3479658:{s:46:"net.xp_framework.beans.stateless.RoundtripHome";}
[09:43:12 9089 debug] <<< Proxy·0(handler= remote.RemoteInvocationHandler)
[09:43:12 9089 debug] >>> remote.protocol.XpProtocolHandler(pimperator4.schlund.de:6448) 3479658::create([
])
[09:43:12 9089 debug] >>> Request: [
  0 => create
  1 => A:0:{}
]
[09:43:12 9089 debug] <<< Response: I:1757497:{s:42:"net.xp_framework.beans.stateless.Roundtrip";}
[09:43:12 9089 debug] <<< Proxy·1(handler= remote.RemoteInvocationHandler)
[09:43:12 9089 debug] >>> remote.protocol.XpProtocolHandler(pimperator4.schlund.de:6448) 1757497::echoHash([
  0 => [
    localpart => "xp"
    domain => "php3.de"
  ]
])
[09:43:12 9089 debug] >>> Request: [
  0 => echoHash
  1 => A:1:{a:2:{s:9:"localpart";s:2:"xp";s:6:"domain";s:7:"php3.de";}}
]
[09:43:12 9089 debug] <<< Response: a:2:{s:9:"localpart";s:2:"xp";s:6:"domain";s:7:"php3.de";}
[09:43:12 9089 debug] <<< [
  localpart => "xp"
  domain => "php3.de"
]
</code>

Security considerations
-----------------------
n/a


Speed impact
------------
Slight performance issues while setting and checking the LogCategory and
while logging stuff.


Dependencies
------------
n/a


Related documents
-----------------
n/a


Comments
--------
- ohinckel, Tue Aug  1 14:23:04 CEST 2006
  Which requests do we need to log? I think it would be enough to only
  log requests made by invoke(). Other requests, like begin(), end(),
  rollback(), could be ignored in the first step.

- ohinckel, Tue Aug  1 14:26:27 CEST 2006
  Should setTrace() return TRUE or FALSE in case a ProtocolHandler
  implements util.log.Traceable? Maybe it should always return TRUE to
  be able to use constructs like this:
<?php
  $remote= &Remote::forName('xp://jboss01.example.com/') &&
  $remote->setTrace($cat) &&
  $remote->invokeThisFunction($args);
?>

- ohinckel, Weg Aug  2 08:09:41 CEST 2006
  First initial testing patch:
  http://xp-framework.net/rfc/contrib/rfc0067.diff

- ohinckel, Thu Aug  3 09:55:30 CEST 2006
  Maybe it would also be nice to have the JNDI name of the current bean
  which is used to invoke a function.

- ohinckel, Thu Aug  3 10:50:49 CEST 2006
  I modified the patch to include a better string representation for the
  lang.reflect.Proxy class (to avoid bloat in the logging) and to log
  also begin(), rollback(), commit(), initialize() and lookup().

- ohinckel, Fri Aug  4 09:41:20 CEST 2006
  Added more logging to the patch which logs the RAW data sent between
  client and server. This information also includes the object id (OID)
  which can be used to identify the bean/interface (see commen #4). But
  maybe this extended logging is a way to heavy.

- kiesel, Fri Aug  4 10:57:13 CEST 2006
  The JNDI name is not stored nor used anywhere besides the naming lookup
  for EASC, so it probably not available in the proxy objects for
  later logging.

- friebe, Tue Aug  8 12:04:35 CEST 2006
  I think raw data logging should be separated (by loglevel) from the 
  other events like invocation, lookup and transactions.

- friebe, Mon Aug 14 16:39:17 CEST 2006
  Supplying a toString() method to lang.reflect.Proxy is not a good 
  idea, it should be treated just as any other method and be proxied
  to the invocation handler - I'd suggest to remove this from the 
  patch and create a new RFC instead!

  Same goes for hashCode() and equals(), btw...

- friebe, Mon Aug 14 17:01:03 CEST 2006
  Logging in intialize() does not work! Reason is that when
  $remote->setTrace($cat); is called it's already to late for this...

- friebe, Tue Aug 15 13:31:14 CEST 2006
  New patch available, setting setTrace() is now done on HandlerInstancePool.

<EOF>
