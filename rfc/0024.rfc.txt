RFC 0024: Resource Pool
========================================================================
$Id$

@authors: friebe, kiesel
@created: Mon May  9 17:36:34 CEST 2005
@status: draft
@category: util

Scope of Change
---------------
A new singleton named ResourcePool will be added. It contains instances
of the following elements: Database connections, property files, logger
categories, LDAP clients and RMI objects.


Rationale
---------
Unify ConnectionManager, PropertyManager and Logger APIs.


Functionality
-------------

The following elements implement the Resource interface:

* Property files
  Namespace : xp://env
  Contains  : util.Properties

* Database connections
  Namespace : xp://env/rdbms
  Contains  : rdbms.DBConnection

* Logfiles
  Namespace : xp://env/log
  Contains  : util.log.LogCategory

* LDAP clients
  Namespace : xp://env/naming
  Contains  : peer.ldap.LDAPClient

* RMI
  Namespace : xp://env/remote
  Contains  : rmi.Remote


Resource interface
~~~~~~~~~~~~~~~~~~
<?php
  /**
   * Resource marker interface
   *
   * @purpose  Interface  
   */
  class Resource extends Interface {

  }
?>

Defining a class needs an object from the Resource Pool
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
  class MyClass extends Object {
  
    function __construct() {
      ResourcePool::injectFor($this);
    }
  
    #[@inject(name = 'xp://env/rdbms/orders')]
    function setConnection(&$conn) {
      $this->conn= &$conn;
    }  

  }
?>

Example #1: Registering the database connection to the "orders" database
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
  $pool= &ResourcePool::getInstance();
  $pool->bind(
    'xp://env/rdbms/orders', 
    DriverManager::getConnection('mysql://...')
  );
?>

Example #2: Get an rdbms.DBConnection instance by name "orders"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
  $pool= &ResourcePool::getInstance();
  $conn= &$pool->lookup('xp://env/rdbms/orders');
?>


Security considerations
-----------------------
n/a


Speed impact
------------
n/a


Dependencies
------------
n/a


Related documents
-----------------
- EJB 3.0 Dependency Injection Annotations
  http://www.caucho.com/resin-3.0/ejb3/bean-ann.xtp#@Inject

- Initial implementation
  http://experiments.xp-framework.net/?people,friebe,resourcepool

- Inversion of Control Containers and the Dependency Injection pattern
  http://www.martinfowler.com/articles/injection.html 

Comments
--------
- friebe, Wed May 11 16:53:13 CEST 2005
  Is requires() a good idea? Do we want to "waste" new syntax for this?

- friebe, Fri May 13 11:59:32 CEST 2005
  Maybe we should use the static initializer? Is setupFor() a good name?

- friebe, Sun May 29 17:53:17     2005
  bind() sounds better.

- friebe, Sun May 29 18:25:54     2005
  Static initializer won't work because we're initializing instance 
  variables. We need to invoke bind() in the constructor.

- friebe, Wed Jun 28 12:10:04 CEST 2006
  Maybe ResourcePool::attachTo($this); is better than 
  ResourcePool::injectFor($this);?

<EOF>
