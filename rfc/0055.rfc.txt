RFC 0055: Make xp::stringOf() fatal error safe
========================================================================
$Id$

@authors: friebe, muc
@created: Thu Feb  9 19:05:34 CET 2006
@status: draft
@category: <core>

Scope of Change
---------------
The xp::stringOf() core utility will be rewritten no longer to use 
var_export().


Rationale
---------
The PHP function var_export() can cause fatal errors in certain situations:
<pre>
  Fatal error: var_export(): Cannot use output buffering in output
  buffering display handlers
  in [...]/skeleton/util/log/LogAppender.class.php
  on line 41
</pre>


Functionality
-------------
Here's the concrete implementation:
<?php
  // {{{ public string stringOf(&mixed arg [, bool callToString= TRUE])
  //     Returns a string representation of the given argument
  function stringOf(&$arg, $callToString= TRUE) {
    if (is_string($arg)) {
      return '"'.$arg.'"';
    } else if (is_bool($arg)) {
      return $arg ? 'true' : 'false';
    } else if (is_null($arg) || is_a($arg, 'null')) {
      return 'null';
    } else if (is_int($arg) || is_float($arg)) {
      return (string)$arg;
    } else if (is_a($arg, 'Object') && $callToString) {
      return $arg->toString();
    } else if (is_array($arg)) {
      $r= "[\n";
      foreach (array_keys($arg) as $key) {
        $r.= '  '.$key.' => '.xp::stringOf($arg[$key])."\n";
      }
      return $r.']';
    } else if (is_object($arg)) {
      $r= xp::nameOf(get_class($arg))." {\n";
      foreach (array_keys(get_object_vars($arg)) as $key) {
        $r.= '  '.$key.' => '.xp::stringOf($arg->{$key})."\n";
      }
      return $r.'}';
    } else if (is_resource($arg)) {
      return 'resource(type= '.get_resource_type($arg).', id='.(int)$arg.')';
    }
  }
  // }}}
?>

Security considerations
-----------------------
n/a


Speed impact
------------
Slower, because userland code will be used.


Dependencies
------------
n/a


Related documents
-----------------
n/a


Comments
--------
n/a

<EOF>
