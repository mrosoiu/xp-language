RFC 0055: Make xp::stringOf() fatal error safe
========================================================================
$Id$

@authors: friebe, muc
@created: Thu Feb  9 19:05:34 CET 2006
@status: discussion, ends Mon Feb 20 18:00:00 CET 2006
@category: <core>

Scope of Change
---------------
The xp::stringOf() core utility will be rewritten no longer to use 
var_export().


Rationale
---------
The PHP function var_export() can cause fatal errors in certain situations:
<pre>
  Fatal error: var_export(): Cannot use output buffering in output
  buffering display handlers
  in [...]/skeleton/util/log/LogAppender.class.php
  on line 41
</pre>


Functionality
-------------
The xp::stringOf() utility will return a string representation of a given
argument depending on its type:

Strings
~~~~~~~
The value is returned with enclosing double quotes:
<pre>
  "String"
</pre>

Booleans
~~~~~~~~
The value returned represents the two states of a boolean, TRUE and FALSE,
as follows:
<pre>
  true
  false
</pre>

Null and xp::null()
~~~~~~~~~~~~~~~~~~~
The representation of both of these null references is always:
<pre>
  null
</pre>

Numerics
~~~~~~~~
For both int and float values, the PHP string representation of these is
returned:
<pre>
  1.4
  -1.2
  -10
  6100
</pre>

Objects
~~~~~~~
An instance of any class extending lang.Object will have its toString()
method called. The results therefore depend on the implementation.

In case the optional callToString argument is set to default, the
representation will be the same as for any other object (e.g. stdClass).
The member variables are printed directly whereas the values 
associated with them are printed using xp::stringOf():
<pre>
  fully.qualified.ClassName {
    __id => "0.82536100 1139511047"
    value => "String"
    length => 6
    offset => 1
  }
</pre>

Arrays
~~~~~~
An array is represented by its key/value pairs. As there is no way to
separated "numeric arrays" [ 1, 2, 3] from hashmaps [ a => b, b => c ]
all arrays are treated as hashmaps, its keys being directly printed,
its values applied via xp::stringOf():
<pre>
  [
    0 => 1
    1 => 2
    2 => 3
  ]
  
  [
    foo => "bar"
    bar => 2,
    baz => TestString(6) { String }
  ]
</pre>

Resources
~~~~~~~~~
A resource is represented by its type and id:
<pre>
  resource(type= stream, id= 24)
</pre>


Security considerations
-----------------------
n/a


Speed impact
------------
Slower, because userland code will be used.


Dependencies
------------
n/a


Related documents
-----------------

Implementation
~~~~~~~~~~~~~~
- http://xp-framework.net/downloads/rfc0055.diff
  Patch against lang.base.php

- http://xp-framework.net/downloads/StringOfTest.class.phps
  Testcase

Places where var_export() is used
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<pre>
   # classname
  -- ------------------------------------------------
   3 text.parser.DaemonMailParser
   3 com.google.soap.search.GoogleSearchResult
   2 xml.soap.interop.Round2BaseClient
   2 xml.soap.SOAPMessage
   2 net.xp_framework.webservices.interop.Round2Handler
   2 com.microsoft.format.chm.CHMFile
   1 xml.uddi.BusinessList
   1 xml.soap.SOAPFaultException
   1 xml.soap.Parameter
   1 xml.XMLFormatException
   1 util.log.LogCategory
   1 util.log.LogAppender
   1 util.Hashmap
   1 text.StringUtil
   1 text.PHPTokenizer
   1 security.cert.X509Certificate
   1 rdbms.Peer
   1 rdbms.DataSet
   1 rdbms.DBEvent
   1 peer.sieve.SieveClient
   1 peer.mail.Message
   1 peer.irc.IRCConnection
   1 org.htdig.HtdigResultset
   1 org.htdig.HtdigEntry
   1 org.gnu.readline.ReadLine
   1 lang.Thread
   1 lang.Object
</pre>

Comments
--------
- kiesel, Wed Feb 15 12:33:34 CET 2006
  I think null and xp::null should be distinguishable as they do not
  behave the same way

- kiesel, Wed Feb 15 12:34:47 CET 2006
  Changing the signature of the xp::stringOf() method is not preferrable. 
  I'd vote for removing the $callToString parameter and have toString()
  called always - keeping current behavior.

- friebe, Wed Feb 15 17:38:53 CET 2006
  The $callToString argument was added to endless prevent recursion in 
  the following case:
<?php
  class FooBar extends Object {
    function toString() {
      return xp::stringOf($this);
    }
  }
  
  echo xp::stringOf(new FooBar());
?>

- friebe, Wed Feb 15 17:40:09 CET 2006
  The function is generally not recursion-protected, 
  xp::stringOf($GLOBALS) will lead to an endless loop.

- kiesel, Mon Feb 20 11:48:25 CET 2006
  xp::stringOf() should not be able (allowed) to introspect an objects
  internal structure - this is a violation to the member access rules.
  Instead it should only call toString(), which in return does not rely
  on xp::stringOf() knowing anything about it. It is responsible for
  converting its own representation to a string. xp::stringOf may be used 
  within toString() for non-object values.


<EOF>
