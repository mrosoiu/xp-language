RFC 0055: Make xp::stringOf() fatal error safe
========================================================================
$Id$

@authors: friebe, muc
@created: Thu Feb  9 19:05:34 CET 2006
@status: draft
@category: <core>

Scope of Change
---------------
The xp::stringOf() core utility will be rewritten no longer to use 
var_export().


Rationale
---------
The PHP function var_export() can cause fatal errors in certain situations:
<pre>
  Fatal error: var_export(): Cannot use output buffering in output
  buffering display handlers
  in [...]/skeleton/util/log/LogAppender.class.php
  on line 41
</pre>


Functionality
-------------
The xp::stringOf() utility will return a string representation of a given
argument depending on its type:

Strings
~~~~~~~
The value is returned with enclosing double quotes:
<pre>
  "String"
</pre>

Booleans
~~~~~~~~
The value returned represents the two states of a boolean, TRUE and FALSE,
as follows:
<pre>
  true
  false
</pre>

Null and xp::null()
~~~~~~~~~~~~~~~~~~~
The representation of both of these null references is always:
<pre>
  null
</pre>

Numerics
~~~~~~~~
For both int and float values, the PHP string representation of these is
returned:
<pre>
  1.4
  -1.2
  -10
  6100
</pre>

Objects
~~~~~~~
An instance of any class extending lang.Object will have its toString()
method called. The results therefore depend on the implementation.

In case the optional callToString argument is set to default, the
representation will be the same as for any other object (e.g. stdClass).
The member variables are printed directly whereas the values 
associated with them are printed using xp::stringOf():
<pre>
  fully.qualified.ClassName {
    __id => "0.82536100 1139511047"
    value => "String"
    length => 6
    offset => 1
  }
</pre>

Arrays
~~~~~~
An array is represented by its key/value pairs. As there is no way to
separated "numeric arrays" [ 1, 2, 3] from hashmaps [ a => b, b => c ]
all arrays are treated as hashmaps, its keys being directly printed,
its values applied via xp::stringOf():
<pre>
  [
    0 => 1
    1 => 2
    2 => 3
  ]
  
  [
    foo => "bar"
    bar => 2,
    baz => TestString(6) { String }
  ]
</pre>

Resources
~~~~~~~~~
A resource is represented by its type and id:
<pre>
  resource(type= stream, id= 24)
</pre>


Security considerations
-----------------------
n/a


Speed impact
------------
Slower, because userland code will be used.


Dependencies
------------
n/a


Related documents
-----------------
- http://xp-framework.net/downloads/rfc0055.diff
  Patch against lang.base.php

- http://xp-framework.net/downloads/StringOfTest.class.phps
  Testcase

Comments
--------
n/a

<EOF>
