RFC 0040: Annotation-based XML marshalling/unmarshalling
========================================================================
$Id$

@authors: friebe
@created: Thu Oct 20 17:31:22 CEST 2005
@status: implemented, Fri Nov 11 10:52:07 CET 2005
@category: xml

Scope of Change
---------------
A new API will be created to map XML to objects (and vice versa) by means
of annotations. Also, the package "xml.xp" will be deprecated.


Rationale
---------
Be able to deserialize any XML document and serialize objects to any XML.


Functionality
-------------

1) Unmarshalling
~~~~~~~~~~~~~~~~
Consider the following XML:

<pre>
  <dialog id="file.open">
    <caption>Open a file</caption>
  </dialog>
</pre>

This can be mapped to a dialog object by declarting the following class:

<code>
  class Dialog extends Object {
    var
      $id       = '',
      $caption  = '';

    #[@xmlmapping(element= '@id')]
    function setId($id) {
      $this->id= $id;
    }

    #[@xmlfactory(element= '@id')]
    function getId() {
      return $this->id;
    }

    #[@xmlmapping(element= 'caption')]
    function setCaption($caption) {
      $this->caption= $caption;
    }

    #[@xmlfactory(element= 'caption')]
    function getCaption() {
      return $this->caption;
    }
  }
</code>

...and using the following script:
<code>
  $dialog= &Unmarshaller::unmarshal($xml, 'Dialog');
  echo 'Unmarshalled XML= ', xp::stringOf($dialog);
</code>

2) Marshalling
~~~~~~~~~~~~~~
Assuming we've declared the class as above, the following sourcecode will
create XML from the object:

<code>
  $dialog= &new Dialog();
  $dialog->setId('file.open');
  $dialog->setCaption('Open a file');

  $xml= Marshaller::marshal($dialog);
  echo 'Marshalled object= ', xp::stringOf($xml);
</code>


Security considerations
-----------------------
n/a


Speed impact
------------
n/a


Dependencies
------------
n/a


Related documents
-----------------
- Castor
  http://castor.org/xml-mapping.html

- PHP 5 version
  http://xp-framework.info/xml/xp.en_US/news/view?10

Comments
--------
- friebe, Thu Nov 10 11:56:43 CET 2005
  What's a good package name for this new API?

- friebe, Thu Nov 10 12:04:04 CET 2005
  How about "meta". http://en.wikipedia.org/wiki/Meta says: 'Meta (Greek: 
  "about," "beyond"), is a common English prefix, used to indicate a 
  concept which is an abstraction from another concept, used to analyze 
  the latter.'
  
<EOF>
