RFC 0140: FTP API enhancements
========================================================================
$Id$

@authors: friebe
@created: Sat Oct 13 16:53:48     2007
@status: draft
@category: peer.ftp

Scope of Change
---------------
The peer.ftp API will be enhanced in the following ways:
* There will be a new method peer.ftp.FtpDir::hasEntry()
* The peer.ftp.FtpDir::getEntry() method will be overloaded for
  two purposes: 1) iteration (as current) 2) getting a single entry (new)
* There will be a new method peer.ftp.FtpConnection::rootDir()
* There will be a new method peer.ftp.FtpDir::makeDir() method 
  which is basically the same as peer.ftp.FtpConnection::makeDir()
  but will throw an exception if directory creation fails and return 
  the created directory instead of a boolean value.
* There will be two methods on peer.ftp.FtpEntry to up- and download 
  entries which will work using the io.streams API

Rationale
---------
* Prevent having to use raw FTP functions
* Consistency


Functionality
-------------

Checking for entry existance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
  $c= new FtpConnection('ftp://user:pass@example.com');
  $c->connect();

  // Current functionality #1 {{{
  if (-1 == ftp_size($c->handle, '/'.$filename)) {
    // $filename does not exist
  }
  // }}}
  
  // Current functionality #2 {{{
  if (!($dir= $c->getDir('/'))) {
    throw new FileNotFoundException('Dir does not exist');
  }
  $exists= FALSE;
  while ($e= $dir->getEntry()) {
    if ($e->getName() == $filename) {
      $exists= TRUE;
      break;
    }
  }
  // }}}
  
  // New functionality {{{
  if (!$c->getDir('/')->hasEntry($filename)) {
    // $filename does not exist
  }
  // }}}
?>

Retrieving the root directory
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
  $c= new FtpConnection('ftp://user:pass@example.com');
  $c->connect();

  // Current functionality {{{
  $root= $c->getDir('/');
  // }}}
  
  // New functionality {{{
  $root= $c->rootDir();
  // }}}
?>


Exceptions for makeDir()
~~~~~~~~~~~~~~~~~~~~~~~~
<?php
  $c= new FtpConnection('ftp://user:pass@example.com');
  $c->connect();

  // Current functionality {{{
  if (FALSE === $c->makeDir(new FtpDir('/admin'))) {
    // Failed creating directory "admin"
  }
  $dir= $c->getDir('/admin');
  // }}}
  
  // New functionality {{{
  try {
    $dir= $c->rootDir()->makeDir(new FtpDir('admin'));
  } catch (IOException $e) {
    // Failed creating directory "admin"
  }
  // }}}
?>

Retrieving a single entry
~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
  $c= new FtpConnection('ftp://user:pass@example.com');
  $c->connect();

  // Current functionality {{{
  if (!($dir= $c->getDir('admin'))) {
    throw new FileNotFoundException('Admin dir does not exist');
  }
  $entry= NULL;
  while ($e= $dir->getEntry()) {
    if ($e->getName() == $name) {
      $entry= $e;
      break;
    }
  }
  if (!$entry) {
    throw new FileNotFoundException('File not found');
  }
  // }}}
  
  // New functionality {{{
  $entry= $c->getDir('admin')->getEntry($name);
  // }}}
?>

Downloading entries
~~~~~~~~~~~~~~~~~~~
<?php
  $c= new FtpConnection('ftp://user:pass@example.com');
  $c->connect();

  // Current functionality {{{
  try {
    $c->get('/'.$filename, $local);
  } catch (IOException $e) {
    // - Remote file did not exist
    // - Local file not writeable
    // - Other socket error
  }
  // }}}
  
  // New functionality {{{
  try {
    $c->rootDir()->getEntry($filename)->downloadTo(new FileOutputStream(new File($local)));
  } catch (FileNotFoundException $e) {
    // Remote file not found
  } catch (SocketException $e) {
    // Socket error
  } catch (IOException $e) {
    // Local file not writeable
  }
  // }}}
?>

Uploading entries
~~~~~~~~~~~~~~~~~
<?php
  $c= new FtpConnection('ftp://user:pass@example.com');
  $c->connect();

  // Current functionality {{{
  try {
    $c->put($local, '/'.$filename);
  } catch (IOException $e) {
    // - Remote file did not writeable
    // - Local file did not exist
    // - Other socket error
  }
  // }}}
  
  // New functionality {{{
  try {
    $c->rootDir()->getEntry($filename)->uploadFrom(new FileInputStream(new File($local)));
  } catch (FileNotFoundException $e) {
    // Local file not found
  } catch (SocketException $e) {
    // Socket error
  } catch (IOException $e) {
    // Remote file not writeable
  }
  // }}}
?>


Security considerations
-----------------------
n/a


Speed impact
------------
n/a


Dependencies
------------
- peer.ftp.FtpConnection::makeDir() will be deprecated by
  peer.ftp.FtpDir::makeDir()


Related documents
-----------------

Comments
--------

<EOF>
