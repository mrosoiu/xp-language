RFC 0189: Extension methods
========================================================================
$Id$

@authors: friebe
@created: Sat Aug 29 13:49:46     2009
@status: draft
@category: <core>

Scope of Change
---------------
Extension methods will be added to the XP Framework.


Rationale
---------
* Provide an easy way to add functionality to existing classes
* Provide BC layers
* Get rid of "Helper" and "Util" classes


Functionality
-------------
Extension methods let you "add" methods to existing types without having
to change the respective type itself. They are declared in a regular 
class as static methods, albeit being called as if they were instance 
methods on objects of the type they extend. Seen from the outside, using 
extension methods does not differ from calling methods actually defined 
inside that type.

Declaration
~~~~~~~~~~~
Given this, to implement an extension method "sorted" for the ArrayList
class so that it can be used as in the example from the beginning, we 
declare the following:

<code>
  class ArraySortingExtension extends Object {
  
    static function __static() {
      xp::extensions('lang.types.ArrayList', __CLASS__);
    }
    
    #[@extension]
    public static function sorted(ArrayList $self) {
      // Implementation here
    }
  }
</code>

There are two essential parts in this declaration: First of all, the
static initializer, which registers this class as a provider for extension
methods for the lang.types.ArrayList class. Second, the extension method
itself, which is declared <tt>public static</tt> and receives the ArrayList
instance to work on as its first parameter.

Using it
~~~~~~~~
Although extension methods are defined static, they are called using 
instance method syntax. However, extension methods are only available
if they're explicitly imported! This can be done by adding the extension
method class to the <tt>uses()</tt> list:

<code>
  uses('com.example.extensions.ArraySortingExtension');
</code>

Once this is achieved our example will work and the <tt>sorted()</tt>
call will yield an ArrayList containing the sorted values <tt>1, 2, 3</tt>.

Restrictions
~~~~~~~~~~~~
Because of the way they're implemented, extension methods can only operate
on a type's public API. Extension methods are really only syntactic sugar,
backed by static method calls to an extension class. Thus, the following
two calls are equivalent from a protection level point of view.

<code>
  $sorted= $array->sorted();
  $sorted= ArraySortingExtension::sorted($array);
</code>

If you look at the second it becomes clear why only public methods can 
be called!

Furthermore, extension methods can only add functionality. Extension 
methods cannot overwrite existing methods. Thus, the following extension 
method will never be executed because the <tt>XPClass</tt> class already
has a <tt>getName()</tt> method:

<code>
  class XPClassExtensions extends Object {
    public static function getName(XPClass $self) { ... }
  }
</code>

The same applies for the methods defined in <tt>lang.Object</tt> itself,
every other object inherits these: <tt>hashCode()</tt>, <tt>equals()</tt>,
<tt>getClassName()</tt>, <tt>getClass()</tt> and <tt>toString()</tt>.


Security considerations
-----------------------
n/a


Speed impact
------------
Extension methods are around 7 times slower than regular methods. If not
used, they don't impose a performance implication.


Dependencies
------------
n/a


Related documents
-----------------
* http://news.xp-framework.net/article/313/2009/08/29/
* http://msdn.microsoft.com/en-us/library/bb383977.aspx
* http://groovy.codehaus.org/Pimp+my+Library+Pattern
* http://www.oreillynet.com/onjava/blog/2007/12/extension_methods_proposals.html
* http://weblogs.java.net/blog/forax/archive/2007/11/java_7_extensio.html
* http://journal.stuffwithstuff.com/2008/02/09/c-extension-methods-not-just-for-breakfast/
* http://www.codeproject.com/KB/cs/ExtensionUnitTests.aspx
* http://blog.getpaint.net/2008/07/03/c-extension-methods-portability-aid/
* http://www.zorched.net/2008/01/03/implementing-mixins-with-c-extension-methods/
* http://stackoverflow.com/questions/299515/c-reflection-to-identify-extension-methods
* http://msdn.microsoft.com/en-us/library/system.runtime.compilerservices.extensionattribute.aspx

Comments
--------
friebe, Sat Aug 29 13:52:34     2009
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Extension methods have been implement in the 5_8 branch.

<EOF>
