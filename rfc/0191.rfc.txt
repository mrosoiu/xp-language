RFC 0191: New CSV API
========================================================================
$Id$

@authors: friebe
@created: Sat Sep 12 15:52:42     2009
@status: draft
@target: 5.7.5
@category: text.csv

Scope of Change
---------------
An API for processing CSV files will be created and put into a new
package called <tt>text.csv</tt>.


Rationale
---------
The current classes - text.CSVGenerator and text.parser.CSVParser - are 
clumsy to use and almost not flexible.


Functionality
-------------
To read data from a CSV file, CsvReader instance is created. To write data
to a CSV file, a CsvWriter is used.

Reading
~~~~~~~
<code>
  $in= new CsvListReader(new TextReader(new FileInputStream('in.csv')));

  $header= $in->getHeader();
  while ($record= $in->read()) {
    Console::writeLine('- ', $record);
  }

  $in->close();
</code>

Other implementations:
* CsvObjectReader - reads objects from a CSV file, mapping the header
  columns to class properties
* CsvBeanReader - like CsvObjectReader, but uses setters to access 
  properties.
* CsvListReader - reads CSV files and returns values as string-array


Writing
~~~~~~~
<code>
  $out= new CsvListWriter(new TextWriter(new FileOutputStream('out.csv')));
  
  $out->setHeader(array('name', 'city', 'zip'));
  $out->write(array('Timm', 'Karlsruhe', 76137));
  $out->write(array('Alex', 'Karlsruhe', 76131));
  
  $out->close();
</code>

Other implementations:
* CsvObjectWriter - writes objects to a CSV file, mapping class properties
  to columns.
* CsvBeanWriter - like CsvObjectWriter, but uses getters to access
  properties.
* CsvListWriter - writes string-array to CSV files 


Security considerations
-----------------------
n/a


Speed impact
------------
n/a


Dependencies
------------
The classes text.CSVGenerator and text.parser.CSVParser will be 
deprecated.


Related documents
-----------------
* RFC #0190 - for the TextReader and TextWriter classes.
* http://supercsv.sourceforge.net/codeExamples_general.html

Comments
--------

<EOF>
