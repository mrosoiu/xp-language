RFC 0035: Interceptors for FTP storage
========================================================================
$Id$

@authors: friebe, gelli, olli
@created: Wed Aug 24 12:40:35 CEST 2005
@status: draft
@category: peer.ftp.server

Scope of Change
---------------
An API will be added to the peer.ftp.server package to allow attaching
interceptors that can "veto" FTP commands.

Rationale
---------
In some cases, especially when working with more systems to set up a
FTP storage (e.g. filesystem and database), it's necessary to do
additional checks when modifying the storage (e.g. renaming a file,
uploading/replacing a file).
Further this can be used to do some permission checks using other
systems (e.g. LDAP or databases).

Functionality
-------------
An interceptor can throw an exception to indicate that processing with
this command is not acceptable and the command will be aborted. When
throwing an exception an additional error message can be passed to the
FTP server which sends it to the client to clarify what the problem is
and why the command has been aborted.

Interceptable actions
~~~~~~~~~~~~~~~~~~~~~
- Creating an entry (collection or element)
- Reading an element
- Modifying an element
- Renaming an entry (collection or element)
- Deleting an entry (collection or element)
- Changing an entry (collection or element)'s permissions
- Changing a directory

Example (abbreviated):
<?php

  // Interface class
  class StorageActionInterceptor extends Interface {
  
    function onDelete(&$entry) { }
  
    function onCreate(&$entry) { }
    
    ...
  }
  
  // Default interceptor which implements all functions returning TRUE
  class DefaultInterceptor {
  
    function onCreate() { return TRUE; }
    
    ...
    
  } implements('peer.ftp.server.intercept.StorageActionInterceptor'); 

  // Special interceptor for delete command
  class DeleteInterceptor extends DefaultInterceptor {
    
    function onDelete(&$entry) {
      if ($this->conn->query('...')) return throw(new IllegalStateException('...'));

      return TRUE;
    }
  }
  
  // Add a global interceptor (applies to entire storage)
  $storage->addInterceptor(new DeleteInterceptor());
  
  // Add an interceptor for the base "/check/only/in/this/path", idea #1
  $storage->addInterceptorFor('/check/only/in/this/path', new DeleteInterceptor());
  
  // Add an interceptor for the base "/check/only/in/this/path", idea #2
  $storage->addInterceptorFor(
    new PathCondition('/check/only/in/this/path'),
    new DeleteInterceptor()
  );
  
  // Add an interceptor for the base "/check/only/in/this/path", idea #3
  // In this example, we'd only check between 3 AM and 4 AM (maybe because
  // we have an extensive indexer search or backup running)
  $storage->addInterceptorFor(
    array(new PathCondition('/check/only/in/this/path'), new TimeCondition('03:00', '04:00')),
    new DeleteInterceptor()
  );
?>

Note: The DefaultInterceptor class implements the 

  peer.ftp.server.intercept.StorageActionInterceptor 
  
interface and returns TRUE to all methods so that subclasses need not redefine
them if they desire no actions.

Interceptor priority
~~~~~~~~~~~~~~~~~~~~

It's possible to add more than one interceptors to a storage. They'll be
invoked in the same order as added to the storage. If an interceptor
returns FALSE - indicating the command should be aborted - the following
interceptors will not be invoked!

Conditional interceptors are only invoked, when all the conditions match
or returns TRUE. If any of the condition fails the interceptor will not
be invoked.

Security considerations
-----------------------
n/a

Speed impact
------------
Makes FTP server a bit slower, but only when interceptors are added.

Dependencies
------------
n/a

Related documents
-----------------
n/a

Comments
--------
- friebe, Wed Aug 24 13:33:30 CEST 2005
  Maybe addConditionalInterceptor() is a better name for addInterceptorFor()?

- olli, Thu Aug 25 08:51:21 CEST 2005
  We should add a second parameter to the interceptor functions to pass a
  context (e.g. the FtpSession)

<EOF>
