RFC 0113: Include PHP5 SOAP extension
========================================================================
$Id: template.txt 5001 2005-04-18 12:10:58Z friebe $

@authors: kiesel, rene
@created: Wed Feb  7 11:39:03 CET 2007
@status: draft
@category: webservices.soap

Scope of Change
---------------
To make XP's SOAP implementation co-exist with the PHP5 SOAP extension,
the following classes must be renamed:
  . webservices.soap.SoapHeader
  . webservices.soap.SoapClient
  
as they clash with classes brought in by the extension (which we cannot
change).

The following classes will be moved from

webservices.soap.SOAPHeaderElement.class.php
webservices.soap.SOAPMapping.class.php      
webservices.soap.SOAPNode.class.php         
webservices.soap.SOAPHeader.class.php     
webservices.soap.XPSoapClient.class.php     

into their own subpackage of webservices.soap 

webservices.soap.xp.SOAPHeaderElement.class.php
webservices.soap.xp.SOAPMapping.class.php      
webservices.soap.xp.SOAPNode.class.php         
webservices.soap.xp.XPSOAPHeader.class.php     
webservices.soap.xp.XPSoapClient.class.php

Rationale
---------
XP provides its own SOAP support which is enterprise-proven, but is not 
a feature-complete SOAP implementation. Furthermore, it makes use of 
class names that PHP5 ext/soap also uses. You must not compile PHP with 
SOAP and use XP SOAP with the same PHP installation.

Despite of that, it'd be a good addition to provide an interface to let
the programmer decide which SOAP implementation he wants to use as the
back-end without having to care about the decision in what he does.

Functionality
-------------
In the first step - to clear the way - the above mentioned classes will
be prefixed with XP.

Second, the SOAP API will follow the Factory Pattern, so new clients will
not be constructed directly, but instanciated through a factory, or a driver
manager similar to what the XP framework offers in the rdbms package.

Third, it has become a common practice to derive particular SOAP clients
from class SOAPClient when generating or writing the client class. Due to 
the changes mentioned before, this is not possible any more then, because
the derivation will bind the class to a certain SOAP implementation.
Instead, clients should become simple objects with a $client member that
gets inserted on object instantiation through the factory.

I introduced a new class called SoapDriver as a test. The usage is pretty 
straight forward.

For example:
SoapDriver::getInstance()->fromEndpoint(http://somesoapservice/is/here/, 
  'urn:someSoapMethod');

This will create an instance of the SoapDriver using the XPSoapClient (which
is the default driver). The Soapcall itself hasn't changed:
->invoke($method, $vars).

The method "selectDriver($driver)" will let you change to a different Soap-
Driver (Right now,SOAPNATIVE and SOAPXP are supported).

You can also use WSDL-Mode:

SoapDriver::getInstance()->fromWsdl(http://somesoapservice/is/here/, 
'urn:someSoapMethod');

WSDL is only supported by the PHP5-soap-extension and _not_ by the XPSoapClient.




How to migrate your classes from the old SoapClient to the new SoapDriver:

First of all:
Your class must extend Object and not SoapDriver as it used to be with the 
'old' XPSoapClient.
As a next step you should change the uses() to the correct ones. You can 
probably drop most SoapClient related classes as they are probably all included
by SoapDriver.
Of course webservices.soap.SoapDriver has to be in the uses().

Your Contructor may look something like this (non-WSDL mode):

function __construct($endpoint) {
  parent::__construct(
    new SOAPHTTPTransport($endpoint),
    'urn:SomeThing'
  );

  $this->registerMapping(
    new QName('http://namespace', 'SoapValue'),
    XPClass::forName('you.wanna.map.to.this.class')
  );
}

this now changes to:

function __construct($endpoint) {
  $sd= SoapDriver::getInstance();
  $this->client= $sd->fromEndpoint($endpoint, '$urn:SomeThing', XP); 

  $this->registerMapping(
    new QName('http://namespace', 'SoapValue'),
    XPClass::forName('you.wanna.map.to.this.class')
  );
}

The third parameter of the fromEndpoint() method is the preferred driver.
Build-in constants for the drivers are XP (for the XPSoapClient) and 
NATIVE (for the PHP5 extension). The preferred driver is optional.
You also won't have to pass the endpoint as an SOAPHTTPTransport-object
anymore, the class now converts the string automatically.
The syntax for the classmapping hasn't changed.

The invocation of the class hasn't changed:

function checkFooBarStatus($foo) {
  return $this->client->invoke(
    'someSoapFunction',
    new Parameter('foo', new SoapLong($foo))
  );
}

So let's go back to the constructor:

Let's say you want to use WSDL all of a sudden:

function __construct($endpoint) {
  $sd= SoapDriver::getInstance();
  $this->client= $sd->fromWsdl($endpoint); 

  $this->registerMapping(
    new QName('http://namespace', 'SoapValue'),
    XPClass::forName('you.wanna.map.to.this.class')
  );
}

Of course the $endpoint string now needs to point to the WSDL-file.

WSDL is right now only supported in the native soap client, so the 
SoapDriver automatically chooses the native Soap Client (if it's 
build into your php binaries).
But since we also included the possibility to register your own Soap
client as a driver, you can also choose a different preferred driver.
So if you want to select a different driver the method call looks 
like this:

$this->client= $sd->fromWsdl($endpoint, '', XP);

We wanted to keep the method signature consistend, that's why the
second parameter is empty. This may change during rfc-discussion.

In the above example SoapDriver will switch automatically to the
NATIVE driver, because XPSoap is not capable of WSDL.


Security considerations
-----------------------
n/a

Speed impact
------------
n/a

Dependencies
------------
n/a

Related documents
-----------------
http://experiments.xp-framework.net/?arena,rfc0113/
Comments
--------
- kiesel, Wed Feb  7 13:12:36 CET 2007
  Should the SoapClient receive an URL as first parameter instead of a
  SOAPHTTPTransport in the future? Not like there was ever a need for a
  different transport that that.

- rene, Fri Mar 16 13:19:16 CET 2007
  Should SOAPHeaderElement also be renamed for consistencies sake?

<EOF>
