RFC 0022: uses() support for PHP stream API
========================================================================
$Id$

@authors: friebe
@created: Mon Apr 18 13:20:23     2005
@status: draft
@category: <core>

Scope of Change
---------------
The core function uses() will be changed to accept parameters with stream 
references (scheme://target). It should not mangle these parameters when 
giving them to the include statement.


Rationale
---------
With this new functionality, classes can be loaded from locations other
than the filesystem by means of uses().


Functionality
-------------
The include statement, as any other file-related function within PHP, 
supports stream wrappers (even if the URL fopen wrappers are enabled,
it does support user-space wrappers).

Example
~~~~~~~
<?php
  // Load from filesystem
  uses('util.Date', 'util.DateUtil');
  
  // Load from date.cca archive
  uses('cca+xp://date.cca/util.Date', 'cca+xp://date.cca/util.DateUtil'); 
?>

Parameter format
~~~~~~~~~~~~~~~~

With arguments:
<pre>
  [scheme]"+xp://"[arguments]"/"[fully_qualified_class_name]
</pre>

Without arguments:
<pre>
  [scheme]"+xp://"[fully_qualified_class_name]
</pre>

* The scheme may consist of any alphanumeric character and the "+" sign.

* The arguments may contain any character.

* The fully qualified class name is the package and class name concatenated
  together, e.g. "util.profiling.Timer". Nothing may follow this string.

* In general, the entire string must be parseable by parse_url().

* The postfix "+xp" in the scheme definition is necessary for following 
  two reasons:

  1) Security: It will prevent from using the builtin http://, https://
     and ftp:// wrappers.

  2) Namespacing: If you *want* to use a http:// - wrapper and the 
     builtin wrapper is disabled due to PHP configuration settings, you
     could not write your own without redefining the scheme name to
     something else.

uses() enhancement
~~~~~~~~~~~~~~~~~~
The core function uses() will be enhanced so that it recognizes "+xp://" in
an argument.

The following then happens:

1) The wrapper type (scheme) is determined from the argument.

2) The wrapper implementation is loaded from the sapi/[type].uwrp.php
   ("uwrp" stands for "uses wrapper"). Loading this file may not fail.

3) The stream wrapper is registered to a class called "uwrp·"[scheme]
   (the middle dot is produced by pressing AltGr + . on the keyboard
   or of course by copying it from above).

4) The entire string is passed to the include() statement so that the
   wrapper is invoked.

5) The fully qualified class name is determined from everything after
   the last "/" in the argument. For "enum+xp://enum.Suit", the class
   name would be "enum.Suit", for "cca+xp://date.cca/util.Date", it
   would be "util.Date".

6) The class' short name is calculated from the fully qualified class
   name by using the xp::reflect() functionality.

Note: Step 2 and 3 are only executed once.


Security considerations
-----------------------
This patch enables you to include content from "unsafe" locations such 
as HTTP by defining a wrapper for it and then writing
<?php uses('http+xp://example.com/unsafe/classes/util.Date'); ?>
but, in this case, you asked for it.

What you should *NEVER* do is to write uses($variable) or 
uses('de.thekid.'.$variable) - not even if you're sure what $variable
contains - use the classloader API for this!


Speed impact
------------
The patch decreases the overall speed of the uses() statement by a 
fraction of a millisecond.

Profiled sourcecode
~~~~~~~~~~~~~~~~~~~
<?php
  uses('util.Date', 'util.DateUtil');
?>

Timings
~~~~~~~
Before: Average of 0.01530 seconds
After:  Average of 0.01531 seconds

(100 runs each)


Dependencies
------------
- PHP >= 4.3.x


Related documents
-----------------
- PHP Manual: Stream Functions
  http://de3.php.net/manual/en/ref.stream.php
 
- Patch against lang.base.php
  http://xp-framework.net/downloads/rfc0022.diff

- Wrapper implementation
  http://xp-framework.net/downloads/enum.uwrp.phps

Comments
--------
n/a

<EOF>
