RFC 0174: io.collections interface additions / io.streams integration
========================================================================
$Id$

@authors: friebe
@created: Mon Oct 20 16:41:26     2008
@status: discussion, ends Mon Feb 02 18:00:00     2009
@category: io.collections

Scope of Change
---------------
New methods will be added to the io.collections.IOElement interface:
* Origin accessors: Return / set the collection these elements originate from
* Stream accessors: Return streams to read from / write to this element


Rationale
---------
Transparent iteration on filesystem, FTP and other implementations.


Functionality
-------------
Discovering the origin of an IOElement returned from an iteration may 
be used for debugging and display purposes. It will be complemented by
a setter for iterators to inject the collection:

<code>
  public io.collections.IOCollection getOrigin();
  public void setOrigin(io.collections.IOCollection $origin);
</code>

To read from and write to elements returned from an iteration process,
this API will be collected to the io.streams API:

<code>
  public io.streams.InputStream getInputStream();
  public io.streams.OutputStream getOutputStream();
</code>

Example
~~~~~~~
Consider the following sourcecode:
<code>
  $origin= new FileCollection('documents');
  foreach (new IOCollectionIterator($origin) as $element) {
    Console::writeLine(file_get_contents($element->getURI())); // !!!
  }
</code>

If we exchange <tt>$origin</tt>, which holds a FileCollection, with a 
FtpCollection (for instance, others see below) the <tt>file_get_contents()</tt> 
call will break.

<summary>
More I/O Collections
~~~~~~~~~~~~~~~~~~~~
The following implementations exist or are drafted:

* io.collections.FileCollection - filesystem
* io.collections.XarCollection - XAR archives
* peer.ftp.collections.FtpCollection - FTP directories
* io.zip.collections.ZipCollection - inside ZIP archives (see RFC #0175)
</summary>

Corrected version
~~~~~~~~~~~~~~~~~
<code>
  $origin= new FileCollection('documents');
  foreach (new IOCollectionIterator($origin) as $element) {
    for ($is= $element->getInputStream(); $is->available() > 0; ) {
      Console::write($is->read());
    }
  }
</code>

Supporting additions
~~~~~~~~~~~~~~~~~~~~
To read an IOElements' contents completely into a buffer in a single call,
the <tt>io.streams.Streams</tt> class will be extended:

<code>
  // Method signature
  public lang.types.Bytes readAll(io.streams.InputStream $is);
  
  // Usage in above example
  foreach (...) {
    Console::writeLine(Streams::readAll($element->getInputStream()));
  }
</code>


Security considerations
-----------------------
None.


Speed impact
------------
None.


Dependencies
------------
Dependency <tt>io.collections -> io.streams</tt>


Related documents
-----------------
[http://xp-framework.net/rfc/contrib/rfc0174.diff Implementing patch]


Comments
--------
friebe, Tue Oct 21 10:41:36     2008
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Should <tt>io.streams.Streams::readAll()</tt> close the stream it gets
passed or should it have a parameter <tt>boolean close= TRUE</tt>?

<EOF>
