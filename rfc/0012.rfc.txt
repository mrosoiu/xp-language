RFC 0012: RMI
========================================================================
$Id$

@authors: friebe
@created: Tue Jan  4 11:31:11 CET 2005
@status: draft
@category: rmi

Scope of Change
---------------
The RMI collection will be completely overhauled.

Rationale
---------
We want to be able to create an API that is more similar to the one used
in Java RMI. This way, we can create a XP -> EJB bridge and talk to our
application server in the same way than to that.

Functionality
-------------
The functionality tries to be similar to what we know from Java. 

Client side
~~~~~~~~~~~
A simple Java client there looks like this (abbreviated example):
<code>
  Properties env = new Properties();
  env.setProperty(Context.PROVIDER_URL, "jnp://example.com:1099");

  InitialContext ctx= new InitialContext(env);

  try {
    Object ref= ctx.lookup("website/Search");
    search= (SearchRemoteHome) PortableRemoteObject.narrow(
      ref, 
      SearchRemoteHome.class
    );
  } finally {
    initialContext.close();
  }
  
  instance = search.create();
  
  // Now, we can invoke methods on the instance
</code>

In PHP, we usually do not have long-running applications (a web page is 
requested, the script is compiled, then executed, then shut down). 
Therefore, the naming lookup should be made optional for performance
reasons.

The interface class used in both client and server:
<?php
  class ISearch extends Interface {

    /**
     * Execute a search
     *
     * @access  public
     * @param   string query
     * @return  string[] results
     */
    function execute($query) { }
  
  }
?>

Using the PHP access API without naming lookups:
<?php
  $search= &Remote::forName('rmi://127.0.0.1:4444/ISearch');

  // Now, we can invoke methods on the instance
  var_dump($search->execute('Hello'));
?>

Using the PHP access API with naming lookup:
<?php
  Naming::setProvider(new RemoteNamingProvider('example.com', 1099));

  $search= &Naming::lookup('website/ISearch');

  // Now, we can invoke methods on the instance
  var_dump($search->execute('Hello'));
?>

Authentication
~~~~~~~~~~~~~~
Every remote stub contains a public member "context" which lets you pass
certain information to the service. If, for instance, authentication is
required, we call the context's addAuthorization() method and pass it an
authorization object.

Using the PHP access API without naming lookups:
<?php
  $context= &new RemoteContext();
  $context->addAuthorization(new PasswordAuth('username', 'password'));

  $search= &Remote::forName('rmi://127.0.0.1:4444/ISearch', $context);

  // Now, we can invoke methods on the instance
  var_dump($search->execute('Hello'));
?>

Using the PHP access API with naming lookup:
<?php
  Naming::setProvider(new RemoteNamingProvider('example.com', 1099));

  $context= &new RemoteContext();
  $context->addAuthorization(new PasswordAuth('username', 'password'));

  $search= &Naming::lookup('website/ISearch', $context);
  
  // Now, we can invoke methods on the instance
  var_dump($search->execute('Hello'));
?>

Server side
~~~~~~~~~~~
XXX TBD XXX


Interaction
~~~~~~~~~~~
1) Optionally: The client issues a naming lookup and retrieves the fully
   qualified URI to the remote object (as seen above: 
   rmi://127.0.0.1:4444/ISearch). This remote specification includes:
   
   * The protocol (here: rmi)
   * The host name (here: 127.0.0.1 a.k.a. localhost)
   * The port (here: 4444)
   * The interface name (here: ISearch)

   The remote spec is passed to the Remote class which constructs a
   proxy instance. If you'd like to hardcode all this information, you
   may use the Remote class directly (first example) - you'll need to
   live with all the downsides of that, then, but will also save 
   yourself the naming lookup.

2) The client loads the protocol class and passes it the fully qualified
   URL (as peer.URL object).

3) The client initiates the communication with the server using the
   protocol class.

4) The client calls a method on the server and reads the results.

5) Repeat 4 if needed

6) The client disconnects. No need to say goodbye.

RMI Protocol
~~~~~~~~~~~~
XXX TBD XXX


Dependencies
------------
BC break in rmi or new package.

Related documents
-----------------
- http://www.javacoffeebreak.com/articles/javarmi/javarmi.html
  Introduction to Java RMI

- http://java.sun.com/developer/onlineTraining/rmi/RMI.html
  jGuru: Remote Method Invocation (RMI)
  
Comments
--------
- friebe, Tue Jan  4 11:35:38 CET 2005
  Maybe also look at ICE (http://zeroc.com/)

- friebe, Wed Jan 19 11:44:56 CET 2005
  First idea on authentication

- friebe, Wed Jan 19 12:51:36 CET 2005
  Second idea on authentication
  
<EOF>
