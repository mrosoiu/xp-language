RFC 0197: Type literals in tokens
========================================================================
$Id$

@authors: friebe
@created: Thu Feb 18 14:46:09     2010
@status: discussion, ends Thu Feb 25 16:40:45     2010
@target: 5.8.0
@category: <core>

Scope of Change
---------------
A common way to denote type literals in generated sourcecode will be 
introduced.


Rationale
---------
An example of where this is used is the type dispatching methods 
described in RFC #0195. Another example is generics generation, 
as described in RFC #0193.


Functionality
-------------
The type literals as used in strings in the XP Framework or literals 
in the XP Language are currently defined as:

<summary>
Primitives (lang.Primitive):
* string
* int
* double
* bool

Value types (lang.XPClass):
* lang.types.String (class, PHP literal: String)
* lang.Runnable (interface, PHP literal: Runnable)
* lang.reflect.Parameter (package class, PHP literal: lang·reflect·Parameter)

Special types (lang.Type):
* var (omit type in PHP)
* void (only for use in return types, PHP doesn't support this)
</summary>


Requirements
~~~~~~~~~~~~
The following issues must be addressed:

* The type literals used in generated sourcecode need to obey PHP's
  syntax rules for class and method names (see "related documents").
* Because PHP's class and method tokens are case-insensitive, there
  must be a way to distinguish classes and primitives with the same
  name, e.g. the String class vs. the string primitive.
* Fully qualified class names (using the middle-dot) must be supported.
* There must be a way to distinguish generated tokens from those a 
  user has written, for reflection.


Definitions
~~~~~~~~~~~
Derived from this, the following definitions can be made:

<summary>
A primitive is denoted by the sign <tt>þ</tt> (Alt-Gr+P) and the 
primitive's name. Examples: <tt>þstring</tt>, <tt>þint</tt>.

A value type is denoted by its literal form, that is, what is
written inside the type declaration. Examples: <tt>String</tt>,
<tt>Runnable</tt>, <tt>lang·reflect·Parameter</tt>.

Type and method names containing these tokens include two
middle-dots (<tt>··</tt>, Alt-Gr+.) and the tokens thereafter.
Tokens are separated by a <tt>¸</tt>, Alt-Gr+´).
</summary>


Example: Method generation
~~~~~~~~~~~~~~~~~~~~~~~~~~
Because methods are unique by name in PHP, we need to generate a 
dispatcher method and one for each variant:
Source:
<code>
  public string serialize(string $in) { ... }
  public string serialize(lang.types.String $in) { ... }
</code>

Generated:
<code>
  public function serialize··þstring($in) { ... }
  public function serialize··String($in) { ... }
  public function serialize($in) {
    // Dispatching code
  }
</code>


Example: Class generation
~~~~~~~~~~~~~~~~~~~~~~~~~
Here, classes will be generated by the <tt>create()</tt> function.
Because class names must be unique in PHP, we will need to generate
a class for each permutation of a generic type.

Declaration:
<code>
  public class HashTable<K, V> implements Map<K, V> { ... }
</code>

Invocation:
<code>
  $t= new HashTable<string, Object>();
  $t= new HashTable<lang.types.String, lang.reflect.Parameter>();
</code>

Generated:
<code>
  class HashTable··þstring¸Object extends Vector { ... }
  class HashTable··String¸lang·reflect·Parameter extends Vector { ... }
</code>


Security considerations
-----------------------
n/a


Speed impact
------------
n/a


Dependencies
------------
Changes to core functionality, thus 5.8-SERIES.


Related documents
-----------------
* RFC #0037 - Fully qualified class names (where the middle-dot was
  originally defined as usage).
* http://lxr.php.net/source/ZendEngine2/zend_language_scanner.l#1329 -
  regex for PHP class and method tokens (a "LABEL").


Comments
--------

<EOF>
