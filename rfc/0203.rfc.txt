RFC 0203: Unbuffered queries
========================================================================
$Id$

@authors: friebe
@created: Mon May  3 13:28:13     2010
@status: draft
@category: rdbms

Scope of Change
---------------
Unbuffered queries will be supported by a dedicated API. Instead of using
<tt>rdbms.DBConnection::query()</tt> (or any of the insert, update, delete
or select methods), the result-only <tt>rdbms.DBConnection::open()</tt>
method will support unbuffered queries.


Rationale
---------
Incremental row processing to save memory.


Functionality
-------------
A note on unbuffered queries from http://de3.php.net/mysql_unbuffered_query:
<summary>
mysql_unbuffered_query() sends the SQL query query to MySQL without 
automatically fetching and buffering the result rows as mysql_query() 
does. This saves a considerable amount of memory with SQL queries that 
produce large result sets, and you can start working on the result set 
immediately after the first row has been retrieved as you don't have 
to wait until the complete SQL query has been performed.
</summary>

Current situation
~~~~~~~~~~~~~~~~~
The XP Framework offers unbuffered queries as a connection attribute, which
is more than unusable (and mostly unknown): It will run ALL queries on this
connection unbuffered.

<code>
  $conn= DriverManager::getConnection('sybase://...@.../?unbuffered=1');
</code>

Unfortunately, the benefits of unbuffered queries come at a cost: you cannot 
open another query on the same connection before you haven't read the complete 
number of rows from the existing query.

New functionality
~~~~~~~~~~~~~~~~~
This RFC proposes a new method for running an unbuffered query, <tt>open()</tt>.
It will work the same as <tt>query()</tt> but by using another verb it will 
be distinguishable from the default usage.

<code>
  $q= $conn->open('select ...');    // Instead of query()
  while ($r= $q->next()) {

    // [...process record...]
    
  }
  $q->close();
</code>

The verb "open" also suggests something is created and should be closed 
again, and that this cannot be done twice.

Showcase
~~~~~~~~
Memory usage with the <tt>query()</tt> method:
<pre>
  Before query()    : 2752.148kB
  After query()     : 7606.969kB
  During iteration  : 7608.867kB
  After iteration   : 2754.344kB
</pre>
Memory usage with the new <tt>open()</tt> method:
<pre>
  Before open()     : 2752.148kB
  After open()      : 2762.641kB
  During iteration  : 2764.898kB
  After iteration   : 2754.344kB
</pre>

DataSets
~~~~~~~~
Using unbuffered queries in conjunction with <tt>rdbms.DataSet</tt> 
classes is supported in the <tt>rdbms.Peer::iteratorFor()</tt> method
by passing <tt>FALSE</tt> to its new <tt>buffered</tt> parameter which
defaults to <tt>TRUE</tt>.

<code>
  $it= Person::getPeer()->iteratorFor(new Criteria(...), FALSE);
  while ($it->hasNext()) {
    $person= $it->next();
    
    // Do something with $person
  }
</code>

Again, inside the while loop, no other queries on the same connection 
may be issued. Even existing relation queries on the <tt>Person</tt> 
class may cause further SQL statements to be sent (e.g., 
<tt>Person::getDepartment()</tt>) and will break the iteration.


Security considerations
-----------------------
n/a


Speed impact
------------
It's faster to use unbuffered queries. 


Dependencies
------------
Changes to <tt>rdbms.DBConnection::query0()</tt> method, an optional 
boolean parameter "buffered" will be added (defaulting to TRUE). It 
is suggested although not required that all database classes extending 
from this base class change their signature as follows:
<pre>
  -protected function query0($sql) { ... }
  +protected function query0($sql, $buffered= TRUE) { ... }
</pre>

The old functionality will continue to work but will be deprecated,
and removed in the over-next major release, 5.9.0


Related documents
-----------------
Unbuffered query implementations in PHP:
* http://de3.php.net/mysql_unbuffered_query
* http://de3.php.net/sybase_unbuffered_query
* http://de3.php.net/sqlite_unbuffered_query

Implementing patch:
* http://xp-framework.net/rfc/contrib/rfc0203.diff

Comments
--------
friebe, Mon May  3 14:59:36     2010
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Asked on mailinglist whether people think we can add this to 5.7.9,
planned for May 10th, 2010; kind of a short notice... let's see!

<EOF>
