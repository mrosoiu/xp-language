<?xml version="1.0" encoding="iso-8859-1"?>
<document title="XP::Development::Introduction">
  <main>
    <content>
      <title>Coding standards</title>
      <editor>$Id$</editor>
      
      <para>
        <caption>Why Coding Standards?</caption>
        <text>
          <quote>
          Code conventions are important to programmers for a number of reasons: 
            <ul>
              <li>80% of the lifetime cost of a piece of software goes to maintenance. </li>
              <li>Hardly any software is maintained for its whole life by the original author. </li>
              <li>Code conventions improve the readability of the software, allowing engineers to 
                  understand new code more quickly and thoroughly. </li>
              <li>If you ship your source code as a product, you need to make sure it is as well 
                  packaged and clean as any other product you create.</li> 
              <li>For the conventions to work, every person writing software must conform to the 
                  code conventions. Everyone. </li>
            </ul>
          </quote>
        </text>
      </para>
      <para>
        <caption>Comments at the beginning of a file</caption>
        <text>
          The comment at the top of a file should contain the Id-Tag, that is at least
          &#36;Id&#36; and a short description what's included. We recommend a C-notation
          style comment:

          <pre><![CDATA[/* This class is part of the XP framework
 *
 * ]]>&#36;Id&#36;<![CDATA[
 */
 ]]></pre>

          This comment is supposed to be written directly behind the opening &lt;php and is
          of exactly above form. The short description should not exceed one line and the
          Id tag must be included before the first add / commit as &#36;Id&#36; and just
          written like that.
        </text>
      </para>
      <para>
        <caption>&lt;?php and ?&gt;</caption>
        <text>
          Next to &lt;?php ... ?&gt; there is no other form of opening tags allowed (e.g.
          &lt;% %&gt; or &lt;? ?&gt;). This form is XML-conform and thus future safe. &lt;?
          will result in a "Not well formed" error message in any XML parser.
        </text>
      </para>
      <para>
        <caption>Filenames</caption>
        <text>
          Filenames look like following:
          <ul>
            <li>Classes<br/>
                Files containing a class have to be named like the class (see below) and
                always contain just one class. The suffix is .class.php.
                <pre><![CDATA[GenericWizard.class.php
GUI.class.php]]></pre>
            </li>
            <li>Includes<br/>
                Include should - if possible - *not* be used. Instead one may think about
                propertyfiles or a class.
            </li>
            <li>"Normal" pages<br/>
                These should be named with a sensible name which will be underlined and
                clearified by the path. Word separation should be done with the underline
                (_).
                <pre><![CDATA[index.php
edit/mail.php
edit/mail_notify.php]]></pre>
            </li>
          </ul>
        </text>
      </para>
      <para>
        <caption>Indenting</caption>
        <text>
          Indenting within one file must be unified, indenting width is two spaces.
          Tabs may never be used. Actually, in public SVN repository gatekeeper
          scripts exists which block any commits containing tabs to class files.
        </text>
      </para>
      <para>
        <caption>Line length</caption>
        <text>
          Lines with more than 80 chars should not be written. Examples for documentation
          purposes should even only contain no more than 70 chars (sending via
          E-Mail).
        </text>
      </para>
      <para>
        <caption>Line wraps</caption>
        <text>
          When an expression does not fit into one line, it should be wrapped following these rules:
          <ul>
            <li>after a comma</li>
            <li>before an operator</li>
            <li>wrapped lines have to be indented</li>
          </ul>
          An example:
          <code><![CDATA[  $r= sprintf('<a href="http://%s:%d/%s/%s.bar" target="%s">%s</a>',
    $host, $port, $path, $file, $target, $anchor
  );

  $r= sprintf(
    '<a href="http://%s:%d/%s/%s.bar" target="%s">%s</a>',
    $host, 
    $port, 
    $path,
    $file,
    $target,
    $anchor
  );]]></code>

          In function declarations wrapped parameters should be indented as in the
          above sprintf example:
          <code><![CDATA[  function reallyReallyLongFunctionNameWithParameters(
    $string, 
    $uriRequesterObject,
    $foobarbaz, 
    $longParamNameNumber4
  ) {
    ...
  }]]></code>
          (Note that you should resist to use overly long function names).
          Long conditions in an if-statement should be indented this way:
          <code><![CDATA[  if (
    ('172.17.0.27' == $REMOTE_ADDR) ||
    ('172.17.0.26' == $REMOTE_ADDR) ||
    ('172.17.0.24' == $REMOTE_ADDR) ||
  ) {
    $rightGroup= 'root';
  }]]></code>

          In this example all conditions have been indented to the same column, but still
          remain separated from the "executing" code by one (almost) empty line.

          Array declarations always have to be wrapped until the array is an empty one:
          <code><![CDATA[  $list= array();

  $list= array(
    'Hello',
    'World'
  );

  $hash= array(
    'Bla' => 0,
    'Foo' => array(
      'Bar',
      'Baz'
    ),
    'XP'  => 'Über-Framework'
  );]]></code>

          Ternary expressions adhere to the following writing guidelines:
          <code><![CDATA[
  $alpha= ($booleanExpression) ? $beta : $gamma;

  $alpha= ($reallyReallyLongbooleanExpression
    ? $beta 
    : $gamma
  );]]></code>
        </text>
      </para>
      <para>
        <caption>Comments</caption>
        <text>
          In PHP three kinds of comments are supported: C-style /* */, C++'s // as
          well as Perl's # comment sign. From Java, we know the /** ... */ - 
          documentational comment. We can use these to extract useful meta-information
          about the functions with the XP documentation system which was developed to
          supply an automated documentation system.

          The # should be avoided, most other commments should be written using //.
          Commenting out multiline areas in a code part is no more possible as it will
          be rejected by the coding standards conformance checker script.
          Multiline commented out code most often is being used to test things. Tests, however,
          should not be committed. Via SVN an undo of a delete can be performed, so
          there just is no need for mutliline comments.
          Therefore comments should not be "drawn" in big comment boxes within /* ... */,
          a comment should always be located directly above the code line to be commented
          and explained.
          
          The line above a comment has to be an empty line. Left and right side of a 
          comment sign a space should be placed:
          
          <code><![CDATA[  // Correct
  $a= 0; // Correct as well, but just good and not "better"! :)
  $a= 0;     // Better

  //Avoid this!
  $a= 0;//Avoid this!]]></code>
        </text>
      </para>
      <para>
        <caption>Block comments</caption>
        <text>
          Block comments may be used only to describe files (comments at the top
          of a file).
        </text>
        <advanced>
          <ref type="devel" link="coding#2">Comments at the beginning of a file</ref>
        </advanced>
      </para>
      <para>
        <caption>Single line comments</caption>
        <text>
          Single line comments must be written using //. Single line comments should
          be separated from the above parts by an empty line and keep the current
          indenting width:
          <code><![CDATA[  if ($condition) {

    // Fetching files here...
    ...
  }]]></code>

          If you need to comment more that just one line of code, the following
          notion is recommended:

          <code><![CDATA[  if ($condition) {
    ...

    // DEBUG
    // fsockopen("debug-srv", 0x9282);
    // ...
  }]]></code>

          For an even larger block, /* */ may be used while in development or
          for special cases (like temporary disabling of code portions).
          Before committing the files, remove it - that's what SVN is for.
        </text>
      </para>
      <para>
        <caption>Comments at the end of a line</caption>
        <text>
          These comments have to be written using // for the same reasons as
          stated above. When multiple comments of this form exist in a code block,
          they should begin at the same indentation.

          <code><![CDATA[  if ($condition) {
    return FALSE;	// Reason
  }

  if ($condition) {
    $alpha= FALSE;                             // Reason
  } else {
    $alpha= substr($beta, 0, strlen($gamma));  // Why's that?
  }]]></code>
        </text>
      </para>
      <para>
        <caption>Comments for documentation</caption>
        <text>
          See also <ref link="about.doc">Documenting classes</ref>
        </text>
      </para>
      <para>
        <caption>Special comments</caption>
        <text>
          A "FIXME:" or "TODO:" at the beginning of a comment indicates some
          kind of unresolved problem at this place:
          <pre><![CDATA[
  // FIXME: A database error could possibly pop up here.
  // TODO: Implement improved backchecking
]]></pre>
          Furthermore, the following special words may be used:
          <pre><![CDATA[
  // HACK (fix this later)
  // TBD (to be discussed)
  // TBI (to be implemented)
]]></pre>

          <quote>
            Note: The frequency of comments sometimes reflects poor quality of 
            code. When you feel compelled to add a comment, consider rewriting 
            the code to make it clearer. 
          </quote>
        </text>
      </para>
      <para>
        <caption>Declarations</caption>
        <text>
          Declarations within PHP normally are not neccessary, but they are more
          "beautiful" and "good style". At least within classes, their attributes
          should be declared.
          <code><![CDATA[  class Foo {
    var $anywhere;

    var 
      $parent,
      $child;

    var
      $encoding= ENC_ISO_8859_1;

    function Foo() {
      ...
    }
  }]]></code>

          Classes methods or the constructor must have one line distance to the declarations.
        </text>
      </para>
      <para>
        <caption>Statements</caption>
        <text>
          One line should only contain one statement:
          <code><![CDATA[
  $a++;           // Correct
  $b++;           // Correct
  $a--; $b--;     // Bad]]></code>
        </text>
      </para>
      <para>
        <caption>Blocks</caption>
        <text>
          Blocks are enclosed in <tt>{</tt> and <tt>}</tt>.
          
          <ul>
            <li>Blocks have to be indented</li>
            <li>The opening curly brace is placed at the end of the line beginning the block</li>
            <li>The closing curly brace should be placed at the beginning of a line and
                be indented at the same width like the beginning of the block.
            </li>
            <li>Every block must be enclosed in curly braces, even when you could obey it
                for single line statements. This decreases the danger of adding code and
                forgetting to add braces leading to breakage of the script as the added
                code will not execute. There is an exception for statements in conjunction
                with a return (see below):
                <code><![CDATA[  $result= $dbo->select('...');
  if (!$result) return FALSE;

  if (FALSE === ($result= $dbo->select('...'))) return FALSE;]]></code>
            </li>
          </ul>
        </text>
      </para>
      <para>
        <caption>Return</caption>
        <text>
          A return statement should only use braces when they are neccessary or improve
          the readability (by grouping).

          <code><![CDATA[  return TRUE;
  return $dbo->query('set rowcount 0');
  return (isset($size) 
    ? $size 
    : $defaultSize
  );]]></code>
        </text>
      </para>
      <para>
        <caption>if, if-else, if else-if else Statements</caption>
        <text>
          if-else classes of statements should have the following form:
          
          <code><![CDATA[  if ($condition) {
    imageSize(...);
  }

  if ($condition) {
    imageSize(...);
  } else {
    imageCreate(...);
  }

  if ($condition) {
    imageSize(...);
  } elseif ($condition2) {
    imageCreate(...);
  } else {
    imageDispose(...);
  }]]></code>
        </text>
      </para>
      <para>
        <caption>for-Statements</caption>
        <text>
          A for-statement should have the following form:

          <code><![CDATA[  for ($init; $condition; $update) {
    doSomething();
  }
  
  for ($i= &$dba->iterator(); $i->hasNext(); ) {
    $key= $i->next();
    // ...
  }]]></code>
        </text>
      </para>
      <para>
        <caption>while-Statements</caption>
        <text>
          A while statement should have the following form:
          
          <code><![CDATA[  while ($condition) {
    doSomething();
  }

  do {
    doSomething();
  } while ($condition);]]></code>
        </text>
      </para>
      <para>
        <caption>switch-Statements</caption>
        <text>
          A switch-statement should have the following form:
          
          <code><![CDATA[  switch ($condition) {
    case ENC_ISO_8859_1:
      $output= 'bla';
      $needsParsing= FALSE;

    case ENC_ISO_8859_2:
      $output= 'foo';
      break;

    default:
      statement();
      break;
  }]]></code>

          After the first case we suggest to add a comment to make
          clear no break is missing accidentally:

          <code><![CDATA[  switch ($condition) {
    case ENC_ISO_8859_1:
      $output= 'bla';
      $needsParsing= FALSE;

      // break missing intentionally
      case ENC_ISO_8859_2:
        // ...
        break;
  }]]></code>
        </text>
      </para>
      <para>
        <caption>try/catch-blocks</caption>
        <text>
          A try/catch  block should have the following form:
          
          <code><![CDATA[  // Zend Engine 1:
  try(); {
    doSomethinWhichMightRaiseAnException();
  } if (catch('WhatEverException', $e)) {
    handleException();
  } if (catch('Exception', $e)) {
    handleException();
  }

  // Zend Engine 2
  try {
    doSomethinWhichMightRaiseAnException();
  } catch (WhatEverException $e) {
    handleException();
  } catch (Exception $e) {
    handleException();
  }]]></code>
        </text>
      </para>
      <para>
        <caption>throw</caption>
        <text>
          Throw always throws objects derived from the base class "Throwable". (Note
          that this is true only for the PHP4-version of the XP framework. This will
          most probably change in PHP5).
          
          <code><![CDATA[  // Zend Engine 1
  if (FALSE === ($dbh= sybase_connect([...])) return throw(new SQLException(
    'Unable to connect'
  ));

  // Zend Engine 2
  if (FALSE === ($dbh= sybase_connect([...])) throw new SQLException(
    'Unable to connect'
  );]]></code>
        </text>
        <advanced>
          <ref type="api:class" link="lang.Throwable"/>
        </advanced>
      </para>
      <para>
        <caption>Whitespace</caption>
        <text>
          <ol>
            <li>
              Blank lines<br/>
              Blank lines improve the readability of code. A blank line should be inserted at
              the following situations:
              <ul>
                <li>Between methods (functions)</li>
                <li>Between the global/static statement within a function and the first
                    line of code of that function</li>
                <li>Prior to a one-line- or a block-comment</li>
                <li>Following the comment at the document's beginning</li>
                <li>Between logical sections within a method to make code more
                    readable and denote the belong-together sense of that piece of
                    code.</li>
              </ul>
            </li>
            <li>
              Whitespace<br/>
              Whitespace should be used in the following scenarios:
              <ul>
                <li>
                  A keyword (if, else, while, for, ...), followed by a brace should be 
                  separated by a whitespace.
                  <code><![CDATA[  while (TRUE) {
    ...
  }]]></code>

                  Note: after a function call and their braces no whitespace shall be
                  used. This helps distinguishing keywords and function calls from
                  each other.
                </li>
                <li>
                  After the comment char of a one line (inline) comment
                  <code><![CDATA[  // good
  //bad]]></code>
                </li>
                <li>After a comma in a list of arguments</li>
                <li>
                  An array's key/value assignment has to be separated by a whitespace
                  prior and following the =>.
                </li>
                <li>
                  The class instance and the class method or the class attribute have to
                  be separated by ->, but never by any whitespace inbetween.
                  <code><![CDATA[  $this->foo	    // OK
  $this -> bar    // Unneccessary]]></code>
                </li>
                <li>
                  Round braces may not be separated by whitespace
                  <code><![CDATA[  while (($a > 0) && ($b < 1)) ...   // Correct
  while ( ($a > 0) && ($b < 1) ) ... // Unneccessary]]></code>
                </li>
                <li>
                  All operations of (+ - * / % &amp; | ~ &amp;&amp; &lt; &gt; &lt;= &gt;= != == || etc.) should
                  be separated by whitespaces at both sides.
                </li>
                <li>All operators in (++ -- etc.) do not have any preceding whitespace.</li>
                <li>The string concatenation operator (.) is not preceded nor followed by any whitespace.</li>
                <li>In a for-statement single expressions should be separated by whitespace.
                  <code><![CDATA[  for ($init; $condition; $update)...]]></code>
                </li>
                <li>
                  Type-casting has no whitespace to the right side, but is directly connected
                  to the casted variable.
                  <code><![CDATA[  myMethod((int)$a, (array)$that);]]></code>
                </li>
              </ul>
            </li>
          </ol>
        </text>
      </para>
      <para>
        <caption>Naming conventions</caption>
        <text>
          <ul>
            <li>
              Classes<br/>
              Class names begin with an uppercase letter. Each following word again begins in
              uppercase ("Studly Caps"). Class names should be as short as possible while
              remaining significant for what the class does. For Databasenames or abbreviations
              (GUI, HTML) uppercase letters may be used.

              <code><![CDATA[  class TOGAL { }
  class MyTemplate { }
  class Raster { }
  class GenericGUI { }]]></code>
            </li>
            <li>
              Classes' constructors.<br/>
              A classes' constructor has to be named <tt>__construct().</tt> 
              Calling the parent's constructor when being overwritten is written
              as follows: <tt>parent::__construct()</tt>.
            </li>
            <li>
              Classes' destructors<br/>
              A classes' destructor is called <tt>__destruct()</tt> and does not take 
              any parameter. Calling the parent's destructor is written as follows:
              <tt>parent::__destruct()</tt>.
            </li>
            <li>
              Methods<br/>
              Methods (functions) should be verbs, with the first letter in lowercase. Every
              following word begins in uppercase.

              <code><![CDATA[  function run();
  function runBackground();
  function getMessage();
  function makeInstallation();]]></code>
            </li>
            <li>
              Private/Public<br/>
              Private methods within a class begin with an underline.
              (Note: this is a convention only, as PHP4 does not support private functions).

              <code><![CDATA[  function _myPrivateMethod();]]></code>
            </li>
            <li>
              Variables<br/>
              Variable names should be short and expressive and tell what they're there for.
              Prevent using variable names like $foo, $bar, $baz, $fuck and variable names
              with less than two chars. Exception: temporary one-way-variables like i,j,k,m,n
              (for integers) and c,d,e (for chars) for e.g. a counting variable. Names in
              variables should be divided by either mixed loer-/uppercase letters or by
              the underline (_). Variables being transmitted by GET/POST should begin with
              two underlines (which is a convention for "external, unsafe" variables
              (relevant for security).

              <code><![CDATA[  $myWidth;
  $i;
  $message_id;
  $__page;]]></code>
            </li>
            <li>
              Constants<br/>
              Constants are written in uppercase letters only.
              <code><![CDATA[  define('TA_NOTFOUND',   0x0001);
  define('TA_OKAY',       0x0002);]]></code>

              If possible only define integers and preferably with an hexadecimal
              notation. Multiple defines keep their right part at the same indentation
              width.
            </li>
            <li>
              Misc:<br/>
              Constants instead of integers or character return whereever possible.
              Instead of returning from a function with "return 1", "return "foo"" or
              "return -55", use constants - whereever possible. These should be defines
              preceding other definitions or declarations in a file (just following the
              opening comment). Exceptions are TRUE / FALSE which may be expressed by
              0 or 1 (that is just common sence and is understandable for everyone).
            </li>
          </ul>
        </text>
      </para>
      <para>
        <caption>Placing braces</caption>
        <text>
          <ul>
            <li>
              "<tt>and</tt> and <tt>or</tt> replace braces"_
              <code><![CDATA[  if ($stage and $this->debug)
  if (($i < 0) || ($a > $c))]]></code>
            </li>
            <li>
              A negation does not need an extra brace:
              <code><![CDATA[  if (!(is_null($foo)))    // Unneccessary
  if (!is_null($foo))      // Better]]></code>
            </li>
            <li>Braces should be written close to each other an contain not whitespace
              (see above).
            </li>
            <li>
              Language constructs like require, include, require_once and include_once
              contain braces as well:
              <code><![CDATA[  require('lang.base.php');
  include_once('stop.inc');]]></code>
            </li>
          </ul>
        </text>
      </para>
      <para>
        <caption>Variable assignments an comparisons</caption>
        <text>
          Between an assignment of a variable and the value, a whitespace is at the
          right side of the assignment operator (=), and on both sides of a comparison
          operator. This is supposed to prevent errors like if ($a = 1) because it seems
          incorrect just by looking at it).
          For arrays, their keys and values should be equally indented.

          <code><![CDATA[  $a= 'hello';
  if ($a == 'hello') ...

  // Even better, to prevent typos as well. On line one the compiler would
  // already bail out.
  if ('http://' = substr($uri, 0, 7)) ...   // Won't compile!
  if ('http://' == substr($uri, 0, 7)) ...

  $array= array(
    IT_STRING     => '<input type="text" value="%s"/>',
    IT_TEXTAREA   => '<textarea>%s</textarea>'
  );]]></code>

          Reference operators are directly connected with the object they're
          referencing.
          <code><![CDATA[  // Declaring a method returns by reference 
  class UserManager extends Object {
    function &getInstance() {
      // ...
    }
  }

  // Assigning a variable to a method call's return value
  $instance= &UserManager::getInstance();

  // Assigning variables by references
  $a= &$b;
  
  // Creating an instance of a class
  $object= &new Object();

  // Declaring a parameter is passed by reference
  function selectByName(&$dbo) {
    // ...
  }]]></code>
        </text>
        <advanced>
          <ref type="ext" link="http://de3.php.net/manual/en/language.references.php">PHP Manual: References Explained</ref>
        </advanced>
      </para>      
      <para>
        <caption>Return</caption>
        <text>
          Return immediately leave a function, thus instead of:
          <code><![CDATA[function foo($file) {
  if ($fd= fopen($file, 'r')) {
      ...
  } else {
    return 0;
  }
}]]></code>

          write:
          <code><![CDATA[  function foo($file) {
    if (!$fd= fopen($file, 'r')) return 0;
    ...
  }]]></code>

          Continue is a similar case:
          <code><![CDATA[  while ($entry= $dir->read()) {
    if('.' == $entry or '..' == $entry) continue;
    ...
  }]]></code>

          The ternary operator is, as far as possible, to be preferred to an if-else
          construct:
          <code><![CDATA[  // Unnecessary
  if ($condition == NULL) {
    return FALSE;
  } else {
    return TRUE;
  }

  // Better
  return ($condition == NULL) ? FALSE : TRUE;

  // Event better
  return ($condition != NULL);]]></code>

          Note that you cannot use references when working with the ternary operator in
          PHP4.

          When a binary operator (e.g. &gt;=, &lt;=, ==, etc.) occurs in a ternary expression,
          it should be enclosed in braces.
          
          Notice, however, that when you are working with references, the ternary operator
          breaks your code: it's not designed to work with references - it creates a copy
          silently.
        </text>
      </para>
      <para>
        <caption>PHP beginning and ending tags</caption>
        <text>
          After the beginning and ending tags an indentation of to chars has to be used:
          <code><![CDATA[<?php
  class Foo {
    var $x= NULL;
  }
?>]]></code>
        </text>
      </para>
      <para>
        <caption>Good programming in PHP</caption>
        <text>
          <ul>
            <li>
              Error-Reporting<br/>
              Error reporting level must be set to E_ALL.

              Function, whose warning one may intentionally ignore, the @-operator may
              be used. As the XP framework uses an special error handler to produce
              stack traces, you cannot prevent those ignorable warnings to be pushed
              upon the error stack.

              <code><![CDATA[  // Readable and clear what it does
  $dbh= @sybase_connect(...);

  // To be prevented and not neccessary
  $e= error_reporting(0);
  $dbh= sybase_connect(...);
  error_reporting($e);]]></code>
            </li>
            <li>
              Checks
              Instead of checking the existance of a variable with the negation operator,
              isset() should be used. The first case leads to a notice from the compiler 
              and validates to NULL, zero, empty strings and the boolean FALSE. Empty()
              fullfills the isset()-requirement and (NULL || 0 || "" || FALSE).
            </li>
            <li>
              Mixing HTML and PHP
              Of course, this is welcoming the "fast hacker", but it violates the 
              guideline to divide design and programming. Additionally it makes code
              absolutely unreadable and even violates the indenting width of the
              code.
            </li>
          </ul>
        </text>
      </para>
      <para>
        <caption>String concatenation vs. multiline strings</caption>
        <text>
          Especially for SQL, it is great that line breaks and whitespaces are ignores.

          <code><![CDATA[  $result= $dbo->query('
    select * from foo, bar
    where baz= 2
    and foo.i= bar.i
  ');]]></code>

          is easy to extend for example, easy to replace by anything else and just easy
          to copy'n'paste into an sql shell window (nonetheless, an additional indentation
          of two columns is being recommended).

          <code><![CDATA[  // Don't do this
  $result= $dbo->query('select * from foo, bar '.
                       'where baz= 2 '.
                       'and foo.i= bar.i ');]]></code>

          The preceding piece of code is absolutely unreadable and difficult to
          reuse. And it is error prune when one forgets an whitespace at the end
          of each line (which leads to a syntax error by the DBMS).
        </text>
      </para>
      <para>
        <caption>Variables in Strings</caption>
        <text>
          As far as possible, these are to be prevented, but no crime.
        </text>
      </para>
      <para>
        <caption>Regular Expressions</caption>
        <text>
          To check external input one may most of the time not come around regular 
          expressions. However, instead of ereg_*, preg_* should always be preferred.
          Latter are fasted and provide a bigger function set (see the manual). The
          match and replace-strings should be denoted in single quotes which obsoletes
          the use of string quoting (which makes regexes more difficult to read - in
          addition to their already difficult nature).
        </text>
      </para>
      <para>
        <caption>Array-Indices</caption>
        <text>
          They are always to be enclosed in qutes.
          <code><![CDATA[  echo $arr[helptext_domain_name];    // "undefined constant, assuming string"
  echo $arr['helptext_domain_name'];  // This makes the parser happy]]></code>
        </text>
      </para>
      <para>
        <caption>Classes</caption>
        <text>
          Every class extends from class "Object" or an ancestor of class "Object".
          Only this makes a class conform to the framework.

          A class name must be unique in the whole framework. This rule has been
          frequently violated in multiple occasions and we can add an exception to
          it: classes that have no (absolutely no) common use, that is they are specific
          to a certain project, may exist more than once. You can detect these cases
          when you discover yourself prefixing class names with the abbreviaton or
          the name of the project they are used in.
          
          This restriction has been posed upon the framework by PHP which does
          not (hopefully: yet) include support for namespaces. Two classes
          having the same name, currently cannot be used together in one request.
          
        </text>
      </para>
      <para>
        <caption>Including classes and files</caption>
        <text>
          Please do not use variable names in uses(), require() or include() - directives.
          It should not be neccessary to do something like
          
          <code><![CDATA[  require($DOCUMENT_ROOT.'/../include/start.inc');]]></code>
          
          Instead always try to resolve a path expression as above into the 
          PHP4-language constants <tt>__FILE__</tt>. Above example could be rewritten
          like:
          
          <code><![CDATA[  require(dirname(__FILE__).'/../include/start.inc');]]></code>
          
          This helps some helper scripts (e.g. those in util/exe) to find dependent files.<br/>
          
          Btw: classes should never rely on having a file being accessible on a certain path.
          When you need to read settings from an ini-file, the ini-files should be opened
          by the application and given as an object to the class via e.g. a <tt>configure()</tt>
          method.
        </text>
      </para>
    </content>
    <references>
      <ref link="about">Introduction</ref>
      <ref type="ext" link="http://java.sun.com/docs/codeconv">Java: Coding standards</ref>
    </references>
  </main>
</document>
