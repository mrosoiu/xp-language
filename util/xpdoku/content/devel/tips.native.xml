<?xml version="1.0" encoding="iso-8859-1"?>
<document title="XP::Development::Tips::Native methods">
  <main>
    <content>
      <title>Native methods</title>
      <editor>$Id$</editor>
      
      <para>
        <caption>Always prefer built-in functions</caption>
        <text>
          The reason for this is simple: <b>They're faster.</b>
        </text>
      </para>
      <para>
        <caption>Example #1: Searching arrays</caption>
        <text>
          Assume we have an array like this:
          <code><![CDATA[  class A {
    var $haystack= array('Hello', 'World');
  }
]]></code>
          ...and would like to introduce a method which finds out at which 
          position the element <tt>World</tt> is contained.
          <br/>
          What is completely wrong is:
          <code><![CDATA[  // ...
  function indexOf($needle) {
    foreach ($this->haystack as $key => $val) {
      if ($val == $needle) return $key;
    }
    return FALSE;
  }
  // ...]]></code>
          PHP literally has tons of array functions. Whip up the manual and
          after a few clicks (or a bit of thinking à la "I'm <i>search</i>ing
          an <i>array</i>") you will find <tt>array_search</tt>.
          <br/><br/>
          Go ahead, nuke your code and replace it with the following:
          <code><![CDATA[  // ...
  function indexOf($needle) {
    return array_search($needle, $this->haystack);
  }
  // ...
]]></code>
        </text>
      </para>
      <para>
        <caption>When not to use certain functions</caption>
        <text>
          Sometimes it's adviseable not to use certain builtin functions, either
          for their poor performance or because of functionality issues:
          <ul>
            <li><i>ereg_*</i>: Use their <i>preg_*</i> equivalent, as these are
              faster and offer more functionality.</li>
            <li><i>split</i>: Use explode() instead</li>
            <li><i>join</i>: Use implode() instead</li>
            <li><i>count</i>: Use sizeof() instead, as sizeof is a keywork in the
              PHP language which offers slighly faster access to the function.</li>
            <li><i>strtok</i>: Do not use <i>strtok</i> outside the <i>main</i> program
              stack: <i>strtok</i> has an internal pointer which remembers the current
              position in the string. If call to <i>strtok</i> with another string is
              executed in between, the original position will be forgotten, as there
              is no stack for this function.<br/>
              If classes use this method, it cannot be assured, that there is no other
              "active" <i>strtok</i> instance - and breaks code.<br/>
              As an alternative the class <i>text.StringTokenizer</i> exists which
              does the same as this function but allows for mixed calls.
            </li>
          </ul>
        </text>
      </para>
    </content>
    <references>
      <ref link="../devel/index">Overview</ref>
    </references>
  </main>
</document>
