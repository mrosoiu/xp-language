<?xml version="1.0" encoding="iso-8859-1"?>
<document title="XP::Development::Tips::Type security">
  <main>
    <content>
      <title>Type security</title>
      <editor>$Id$</editor>
      
      <para>
        <caption>Watch your step!</caption>
        <text>
          PHP is loosely typed. That is, it will convert types as needed.
          For example, passing a string "3" to a function that expects an
          integer will work - the type passed is a string, though. If this
          function does arithmetic operations (adding, multiplication, ...)
          on this variable, it is auto-converted to an integer (or a float,
          as needed).
          <br/><br/>
          This <i>can</i> yield funny results in some cases, although most
          commonly (and if we stay within PHP) it won't - still: 
          <i>stick to the correct types!</i>
          <ul>
            <li><b>string:</b> "Hello" or 'Hello'<br/>
                For string offsets, use the following notation: $str{0}
            </li>
            <li><b>int:</b> 0 (decimal notation), 00 (octal notation) or 0x0 (hexadecimal notation)</li>
            <li><b>float:</b> 0.0</li>
            <li><b>bool:</b> TRUE, FALSE</li>
            <li><b>null:</b> NULL</li>
          </ul>
          Also note that the automagic type conversion is time- and memory consuming.
        </text>
      </para>
      <para>
        <caption>Example #1: SOAP services</caption>
        <text>
          Assume we're making a SOAP request to a server running a language
          that is strictly typed, such as Java or C#. If this server
          provides a method <tt>void updateConsumerStatus(int consumer_id)</tt>
          and you call it this way:
          <code><![CDATA[  // ...
  $client= &new SOAPClient($url, $action);
  try(); {
    $soap->invoke('updateConsumerStatus', '5'); // DON'T DO THIS!
  } if (catch('SOAPFaultException', $e)) {
    $e->printStackTrace();
  }
  // ...]]></code>
          you'd get some type of signature mismatch or typecast fault.
          <br/><br/>
          You might even end up calling a different method due to polymorphism,
          e.g. <tt>void updateConsumerStatus(string name)</tt>. Maybe, this
          will have the desired effect - most likely though, it won't.
        </text>
      </para>
    </content>
    <references>
      <ref link="../devel/index">Overview</ref>
    </references>
  </main>
</document>
