<?xml version="1.0" encoding="iso-8859-1"?>
<document title="XP::Development::Writing documentation">
  <main>
    <content>
      <title>Documenting classes</title>
      <editor>$Id$</editor>
      
      <para>
        <caption>General</caption>
        <text>
          The style of documentation has been taken from JavaDoc and adopted where
          needed. A class has to be documented to be conform to the coding standards
          of the XP framework.
        </text>
      </para>
      <para>
        <caption>Example</caption>
        <text>
          This example shows the basics (from lang/System.class.php):
          
          <code><![CDATA[
/**
 * Sets an environment variable
 *
 * @access  public
 * @param   string name
 * @param   mixed var
 * @return  bool success
 */
function putEnv($name, $var) {
  return putenv($name.'='.$var);
}]]></code>
        </text>
      </para>              
      <para>
        <caption>Generic keywords</caption>
        <text>
          <pre><![CDATA[
@see     A link
         Syntax: (<url>|<class>|<class>#<method>|<email>|php://<function>|rfc://<number>)
         
         @see    http://xp-framework.net/
         @see    xp://io.File
         @see    xp://io.File#open
         @see    mailto:thekid@thekid.de
         @see    php://fopen
         @see    php-gtk://blubb
         @see    rfc://821]]></pre></text>
      </para>              
      <para>
        <caption>Method keywords</caption>
        <text>
          Class keywords should be written in the order below.<br/>
          <pre><![CDATA[@model   Defines an abstract "model" of the method.
         Allowed values are "abstract", "static", "final". If it is 
         a "normal" method, this tag is omitted.
         
         @model  abstract
         
@access  Defines the access priviliges for a method
         Allowed values are "public", "protected" and "private". 
         
         @access public

@param   Documents a parameter
         Syntax: <type> <name> [default <default>] <description>
         
         @param  string $str default '' The given string
         @param  int $i Number of results to return
         @param  lang.Exception $e An exception
         @param  mixed $var A string or an integer
         
         If no parameter is given, any @param tag must be omitted.
         
@return  Documents the return value
         Syntax: <typ> <description>
         
         @return bool Success
         @return array Array of domainnames
         
         If the method returns no value, the @return tag must be omitted.
         
@throws  Documents that this method throws an exception.
         Syntax <type>[, <condition>]
         
         @throws io.IOException
         @throws lang.IllegalStateException, if file is not open.
         
         The exception classes should be annotated with their FQDN.
         A generic rule which exception should be written there: 
         Exceptions that this method originally throws should be 
         added; Exceptions that might occur here, but were issued by 
         another method in another method, should not be noted here 
         (this would be redundant and error prone).
]]></pre></text>
      </para>              
      <para>
        <caption>Class keywords</caption>
        <text>
          <pre><![CDATA[@ext          Defines a PHP-extension that is needed when utilizing this class.
              (There can be more than one @ext.)
@model        Defines the model (generic/static/singleton) of a class

@doc          Link to an example script. Example scripts reside in ~/doc
              Syntax: (<script_relative_location>|<script_url>)

              @doc    trycatch.php
              @doc    http://foo.bar/baz.php
         
@test         Contains a fully qualified class name of an XP class that is a
              testcase for this class. More than one @test tag is possible.
              This tag uses the same "protocol" information like the @see tag -
              for tested classes usually with the xp:// - prefix.

@purpose      Purpose of use (short description)
              Syntax: <purpose>
         
              @purpose Encapsulates operations of an IMAP-server.

@deprecated   Indicates this class is deprecated. Usage is discouraged, though
              it remains in the framework for backwards compatibility.

@experimental Indicates this class is experimental. The API may still change
              or disappear completely.
]]></pre></text>
      </para>              
      <para>
        <caption>Template</caption>
        <text>
          <pre><![CDATA[ /**
  * (Insert method's description here)
  *
  * @access  
  * @param   
  * @return  
  */
]]></pre></text>
      </para>              

    </content>
    <references>
      <ref link="about">Introduction</ref>
      <ref link="../apidoc/index">XP API-Doc</ref>
      <ref type="ext" link="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">Java: Writing doc comments</ref>
    </references>
  </main>
</document>
