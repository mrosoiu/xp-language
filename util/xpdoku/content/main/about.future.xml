<?xml version="1.0" encoding="iso-8859-1"?>
<document title="XP::About::Future">
  <main>
    <references>
      <ref link="about">Introduction</ref>
      <ref type="ext" link="http://cvs.php.net/co.php/ZendEngine2/ZEND_CHANGES?r=head">Changes in the Zend Engine 2.0</ref>
      <ref type="ext" link="http://www.phpmag.de/itr/online_artikel/show.php3?id=207&amp;nodeid=62">Generationenwechsel [Zend Engine 2: Leistungsmerkmale, Geschichte und Designmaximen]</ref>
    </references>
    <content>
      <title>The future of XP</title>
      <editor>$Id$</editor>
      
      <para>
        <caption>The Zend Engine 2</caption>
        <text>
          In the Zend Engine 2 [ZE2], the object model has been largely rewritten. A short overview
          of the new functionality:
          
          <ul>
            <li>Objects are passed by handle, not by value.</li>
            <li>Unified constructors and destructors</li>
            <li>Private, public and protected variables and functions</li>
            <li>Exceptions</li>
            <li>Static class variables</li>
            <li>Abstract classes and methods</li>
            <li>Class constants</li>
          </ul>
          
          Although backwards compatibility has been tried to preserve, some changes are 
          necessary. This document explains what has to be done in order to get source code 
          written using the XP framework to run with the Zend Engine 2.
        </text>
      </para>
      <para>
        <caption>Changes: Exception syntax (mandatory)</caption>
        <text>
          Exceptions are now built-in:
          <code><![CDATA[  // XP1
  function operation() {
    // ...
    if (!$condition) return throw(new Exception('Error'));
    // ...
  }
  
  try(); {
    operation();
  } if (catch('Exception', $e)) {
    $e->printStackTrace();
    exit();
  } 
  
  // XP2
  function operation() {
    // ...
    if (!$condition) throw(new Exception('Error'));
    // ...
  }
  
  try {
    operation();
  } catch (Exception $e) {
    $e->printStackTrace();
    exit();
  } ]]></code>
          In order to make exceptions work, existing sourcecode must be changed - it would
          otherwise result in parse errors. A little script, <ref type="ext" link="http://cvs.xp-framework.net/horde/chora/co.php/util/bin/migrate_php5.php">migrate_php5.php</ref>, assists
          you here.
        </text>
      </para>  
      <para>
        <caption>No single root class</caption>
        <text>
          Due to the (in our opinion unnecessary) constraint the Zend Engine 2 imposes on 
          its exception mechanism (all exceptions must inherit the built-in exception class),
          we can no longer preserve the model of a single root class, <tt>Object</tt>.
          <br/>
          To still be able to check for an instance of an XP class (in respect to <tt>stdClass</tt>
          or other built-in classes), an interface named <tt>Generic</tt> has been introduced.
          Both <tt>Object</tt> and <tt>Throwable</tt> (the root class of all exceptions) 
          implement this interface, ensuring that <tt>toString</tt>, <tt>getClass</tt>, 
          <tt>getClassName</tt>, <tt>hashCode</tt> and <tt>equals</tt> exist.
          <br/>
          See also <ref type="ext" link="http://cvs.xp-framework.net/horde/chora/co.php/experiments/skeleton2/lang/Throwable.class.php?r=1.5">this CVS log message</ref> 
          describing the mess. It also points to the archived messages concerning the discussion 
          about this on the PHP developer's mailing list.
        </text>
      </para>
      <para>
        <caption>Class name changes</caption>
        <text>
          Due to the fact that PHP5 comes with a great number of built-in classes (but no
          namespaces concept), the <tt>Exception</tt> class had to be renamed to 
          <tt>XPException</tt> and the <tt>Iterator</tt> interface's new name is 
          now <tt>XPIterator</tt>. 
          <br/>
          When PHP5 is compiled with built-in SOAP support, the <tt>SOAPClient</tt> class also
          produces a name clash. It will also have to be renamed to something different.
        </text>
      </para>
      <para>
        <caption>Changes: Dereferencing</caption>
        <text>
          Dereferencing allows nicer syntax like this:
          <code><![CDATA[  // XP1
  $l= &Logger::getInstance();
  $cat= &$l->getCategory();
  
  // XP2
  $cat= Logger::getInstance()->getCategory();]]></code> 
          The first notation will still work, though (even with the ampersand signs in it), so
          it is up to you to decide whether you want to migrate your code or not.
        </text>
      </para>
    </content>
  </main>
</document>
