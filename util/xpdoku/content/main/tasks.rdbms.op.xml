<?xml version="1.0" encoding="iso-8859-1"?>
<document title="XP::Tasks::RDBMS::Object persistence">
  <main>
    <references>
      <ref link="tasks">Common tasks</ref>
      <ref link="tasks.rdbms">The rdbms API</ref>
      <ref type="ext" link="http://db.apache.org/torque/">Apache Torque</ref>
      <ref type="ext" link="http://propel.phpdb.org/">Propel</ref>
    </references>
    <content>
      <title>The XP rdbms API: Object persistence</title>
      <editor>$Id$</editor>
      <para>
        <caption>Introduction</caption>
        <text>
          The XP framework also offers an API to object persistence via the 
          <ref type="api:class" link="rdbms.DataSet"/> and 
          <ref type="api:class" link="rdbms.Peer"/> classes. 
          These classes implement a variation of the "Row Data Gateway" pattern (described at 
          <ref type="ext" link="http://www.martinfowler.com/eaaCatalog/rowDataGateway.html">
          Martin Fowler's website</ref>):
          <br/><br/>
          <quote>
            An object that acts as a Gateway to a single record in a data source. 
            There is one instance per row.
          </quote>
          <br/><br/>
          and the "Table Data Gateway" (for details, see
          <ref type="ext" link="http://www.martinfowler.com/eaaCatalog/tableDataGateway.html">here</ref>)
          <br/><br/>
          <quote>
            A Table Data Gateway holds all the SQL for accessing a single table or view: selects, 
            inserts, updates, and deletes. Other code calls its methods for all interaction 
            with the database.
          </quote>
          <br/><br/>
          In the XP framework, the Table Data Gateway is called Peer, the 
          "Row Data Gateway" is implemented by subclassing DataSet.
          <br/><br/>
          Every DataSet class has a Peer class associated with it. This
          happens automatically as soon as the class is loaded. The Peer class 
          takes care of the interaction with the RDBMS, using the 
          <ref type="api:class" link="rdbms.DBConnection"/> classes via the
          <ref type="api:class" link="rdbms.ConnectionManager"/> . It does not usually
          need to be used directly, its methods are invoked by the DataSet classes.
        </text>
      </para>
      <para>
        <caption>Prerequisite: Creating a DataSet class</caption>
        <text>
          Assume the following database structure:
          <image src="rdbms/news-table.png" width="158" height="114" alt="News table"/>
          To be able to access this table using the object persistence api, we will first
          have to generate a DataSet subclass. This is done by using the 
          <ref link="tasks.rdbms.op#4">generator utility</ref> -  this creates a class 
          called <tt>News</tt> which will be our means of accessing the <tt>news</tt> 
          table.
          <br/>
          <ul>
            <li>The generated class extends the <tt>rdbms.DataSet</tt> class</li> 
            <li>For each field in the table, a member is created</li>
            <li>For each member, a getter an a setter is created</li>
            <li>For each index, a static getter is created</li>
          </ul>
          How it all relates is shown in the following diagram:
          <br/><br/>
          <image src="rdbms/gateway-api.png" width="593" height="567" alt="Class model"/>

          <box caption="Note">
            The Peer class uses the <a href="tasks.rdbms#7">connection manager</a> 
            to retrieve a connection to the RDBMS, so passing a connection to all the methods 
            is not necessary. Instead, it is expected that you register an appropriate
            connection to the ConnectionManager. The generated class will contain the name
            of the connection it is using.
          </box>
        </text>
      </para>
      <para>
        <caption>Basics: Retrieving an object</caption>
        <text>
          To retrieve an object the static accessors are used:
          <code><![CDATA[  require('lang.base.php');
  uses(
    'rdbms.DriverManager', 
    'rdbms.ConnectionManager', 
    'de.thekid.db.News'
  );

  // Set up the connection manager and register a connection by the name
  // "news" to it.
  $cm= &ConnectionManager::getInstance();
  $cm->register(DriverManager::getConnection($dsn), 'news');

  // Retrieve an instance of the news class by its primary key news_id. 
  // This basically equals to:
  //
  //   select * from news where news_id= 1
  //
  try(); {
    $news= &News::getByNews_id(1);
  } if (catch('SQLException', $e)) {
    $e->printStackTrace();
    exit(-1);
  }

  echo $news->toString();
          ]]></code>
        </text>
      </para>
      <para>
        <caption>Basics: Creating an object</caption>
        <text>
          To create a new entry in the <tt>news</tt> table, use the following:
          <code><![CDATA[  require('lang.base.php');
  uses(
    'rdbms.DriverManager', 
    'rdbms.ConnectionManager', 
    'de.thekid.db.News'
  );

  // Set up the connection manager and register a connection by the name
  // "news" to it.
  $cm= &ConnectionManager::getInstance();
  $cm->register(DriverManager::getConnection($dsn), 'news');

  // Create a News object and insert it. This executes the following SQL:
  //
  //   insert into news (author, title, body, lastchange) values (...)
  //
  // The insert() method returns the identity value if applicable.
  with ($n= &new News()); {
    $n->setAuthor('hubert');
    $n->setTitle('Good news, everyone!');
    $n->setBody('I have created ...');
    $n->setLastchange(Date::now());
    
    try(); {
      $id= $n->insert();
    } if (catch('SQLException', $e)) {
      $e->printStackTrace();
      exit(-1);
    }
  }

  printf("Created news entry, id is %d\n", $id);
          ]]></code>
        </text>
      </para>
      <para>
        <caption>Basics: Modifying an object</caption>
        <text>
          To modify an existing object, we retrieve one from the database,
          use the setters to modify the data and then write it back using
          the <tt>update()</tt> method.
          <code><![CDATA[  require('lang.base.php');
  uses(
    'rdbms.DriverManager', 
    'rdbms.ConnectionManager', 
    'de.thekid.db.News'
  );

  // Set up the connection manager and register a connection by the name
  // "news" to it.
  $cm= &ConnectionManager::getInstance();
  $cm->register(DriverManager::getConnection($dsn), 'news');

  // 1) Retrieve an object
  try(); {
    $news= &News::getByNews_id(1);
  } if (catch('SQLException', $e)) {
    $e->printStackTrace();
    exit(-1);
  }

  // 2) Modify it
  $news->setTitle('Updated: '.$news->getTitle());

  // 3) Write it back to the database. Only the modified fields will get
  // updated:
  //
  //  update news set title = "Updated: Good news, everyone!" where news_id = 1
  //
  // The update() method will use the primary key in the where clause
  try(); {
    $news->update();
  } if (catch('SQLException', $e)) {
    $e->printStackTrace();
    exit(-1);
  }

  echo $news->toString(); 
          ]]></code>
        </text>
      </para>
    </content>
  </main>
</document>
