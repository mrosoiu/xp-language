<?xml version="1.0" encoding="iso-8859-1"?>
<document title="XP::About::Installing">
  <main>
    <content>
      <title>Freezing XP-code for release</title>
      <editor>$Id$</editor>
      
      <para>
        <caption>Installing XP for multiple projects</caption>
        <text>
          Developers that take strong use of xp often need to install
          XP on various machines and for various projects.<br/>
          
          While one develops an application XP at the same time
          may grow and develop; especially after the development 
          of the application XP still grows and may do some API changes.<br/>
          
          Though it's the policy of the xp core developer team that
          a stable class or collection should not perform an API change
          but should be changed backward compatible, there have already
          been occasions (and probably there will be some more) where
          a API change disturbing compatibility may be neccessary.<br/>
          
          We have created a plan how the framework can be installed
          on a machine multiple times, with certain versioning information,
          so that it is possible to always keep an working version that 
          still fits your application installed, but letting open the
          possibility to follow an API change and update various parts of XP.
        </text>
      </para>
      
      <para>
        <caption>How versioning works in XP</caption>
        <text>
          The complete XP framework is managed via CVS. CVS allows for
          unlimited undo-operations, diffing of versions, conflict
          resolution, branching, merging and many more.<br/>
          <br/>
          Branching and merging may be useful for applications where
          you often need to create working code while continue changing
          various parts of the code. With this method you can quite
          comfortably create snapshots containing newest features and also
          stable, old code (that could have been changed in another branch).
          We feel that creating snapshots is quite unlikely for a framework,
          and thus have decided to do without branching.<br/>
          <br/>
          We follow the simple rules of tagging a specific version at e.g.
          release-time of an application.<br/>
          <br/>
          One may install only versions of files containing a certain tag,
          that is only used for this application.<br/>
          <br/>
          That way one freezes the framework but can easily jump on new
          versions if desired.
        </text>
      </para>
      
      <para>
        <caption>So how to install?</caption>
        <text>
          Once you've finished your development, find all classes that
          your application needs from XP, find a suitable name for your
          tag (recommended is a small prefix that is somehow related to
          your application (e.g. the initials) plus the word RELEASE). In
          our example we use the tag APP_RELEASE.<br/>
          <br/>
          Now tag all classes from the framework, that you need, including
          all dependency classes. Now, go to your target machine, preferably
          as root (as noone else should be able to create directories
          at /usr/local/lib/) and do:<br/>
          <br/>
          <frame><pre><![CDATA[
          
cd /usr/local/lib
mkdir xp.app-release && cd xp.app-release
cvs -d:ext:alex@php3.de:/home/cvs/repositories/xp co -r APP_RELEASE skeleton
mv xp/* .
rmdir xp
chown cgi:users *
]]></pre></frame>
          <br/>
          I used my user-id <em>alex@php3.de</em>, choose yours. Note, that for
          this special way of checking out the versions from cvs, the 
          environment must contain <em>CVS_RSH=ssh</em> and you should
          have agent forwarding turned on for conveniance.<br/>
          Also note, that this approach has one special requirement: as we
          cannot allow everyone to tag our classes, you must have a private
          cvs repository with regularly is merged from the public XP. At 
          this moment, we have some ongoing development for automatic
          merging applications that can do the work for you. This will be
          announced on xp-framework.net.
        </text>
      </para>
      
      <para>
        <caption>Then, how to update?</caption>
        <text>
          Updating from then on is a really simple process. As every class
          has been checked out from cvs and has not been locally changed
          (you should never do that), cvs is able to automatically update
          the files to a new revision - if the tag for your application has
          been moved.<br/>
          It's as simple as:<br/>
          <br/>
          <frame><pre><![CDATA[
cd /usr/local/lib/xp.app-release/skeleton
cvs update -r APP_RELEASE -dP
]]></pre></frame>
          <br/>
          After the command completes, you have updated every class that has
          been tagged at a new revision.<br/>
        </text>
      </para>
    </content>
    <references>
      <ref link="about">Introduction</ref>
      <ref link="about.install">Installation</ref>
      <ref link="about.cvs">CVS guidelines</ref>
    </references>
  </main>
</document>
