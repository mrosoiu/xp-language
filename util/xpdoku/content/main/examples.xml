<?xml version="1.0" encoding="iso-8859-1"?>
<document title="XP::Examples::Overview">
  <main>
    <references>
      <ref link="about">An introduction</ref>
      <ref link="tasks">Common Tasks</ref>
      <ref type="ext" link="http://cvs.xp-framework.net/horde/chora/cvs.php/doc/examples">All examples</ref>
    </references>
    <content>
      <title>Examples</title>
      <editor>$Id$</editor>
      
      <!-- file -->
      <para>
        <caption>Reading a file</caption>
        <text>
          In most cases, you will want to read a file line-by-line, processing these
          as being read. In some cases, you will want to read an entire file into a
          string buffer.
          <code><![CDATA[  require('lang.base.php');
  xp::sapi('cli');
  uses('io.File', 'io.FileUtil');
  
  $p= &new ParamString();
  try(); {
    $contents= FileUtil::getContents(new File($p->value(1)));
  } if (catch('IOException', $e)) {
    $e->printStackTrace();
    exit(-1);
  }

  Console::writeLinef('+ Read %d bytes', strlen($contents));]]></code>
          <box caption="Output (for skeleton/README)"><pre><![CDATA[        
+ Read 680 bytes]]></pre>
          </box>        
        </text>
        <advanced>
          <ref type="cvs" link="doc/examples/filereader.php"/>
          <ref type="api:class" link="io.File"/>
          <ref type="api:class" link="io.FileUtil"/>
        </advanced>
      </para>
      <!-- date -->
      <para>
        <caption>Using the Date class</caption>
        <text>
          The Date class is used in many places in the framework. For instance, the
          database classes use it to automatically detect a date is to be inserted
          into the database and the format it accuring to what the underlying RDBMs
          expects. Using XP, you'll stumble over instances of Date all the time.
          <code><![CDATA[  require('lang.base.php');
  xp::sapi('cli');
  uses('util.Date');
  
  $p= &new ParamString();  

  $now= &Date::now();  
  Console::writeLinef(
    '- Current date: %s', 
    $now->toString()
  );
  $parsed= &Date::fromString($p->value(1));
  Console::writeLinef(
    '- Parsed date from "%s": %s',
    $p->value(1),
    $parsed->toString()
  );]]></code>
          <box caption="Output (when called with 'yesterday 3PM' as argument)"><pre><![CDATA[
- Current date: Sun, 28 Sep 2003 17:45:34 +0200
- Parsed date from "yesterday 3PM": Sat, 27 Sep 2003 15:00:00 +0200]]></pre>
          </box>        
        </text>
        <advanced>
          <ref type="api:class" link="util.Date"/>
          <ref type="api:class" link="util.DateUtil"/>
          <ref type="api:class" link="util.Calendar"/>
        </advanced>
      </para>
          
      <!-- dir -->
      <para>
        <caption>Listing a directory</caption>
        <text>
          This example shows how to use the Folder class. Note that the "magic" 
          directories <tt>.</tt> and <tt>..</tt> are omitted (as you would end
          up excluding them in the loop anyway).
          <code><![CDATA[  require('lang.base.php');
  xp::sapi('cli');
  uses('io.Folder');

  $p= &new ParamString();
  try(); {
    $d= &new Folder($p->value(1, NULL, '.'));
    while ($entry= $d->getEntry()) {
      Console::writeLinef('%s%s', $d->getURI(), $entry);
    }
    $d->close();
  } if (catch('IOException', $e)) {
    $e->printStackTrace();
    exit(-1);
  }]]></code>
          <box caption="Output (when called with the skeleton/sapi directory)"><pre><![CDATA[
/usr/home/thekid/devel/xp/skeleton/sapi/CVS
/usr/home/thekid/devel/xp/skeleton/sapi/soap
/usr/home/thekid/devel/xp/skeleton/sapi/cli.sapi.php
/usr/home/thekid/devel/xp/skeleton/sapi/compat
]]></pre>
          </box>        
        </text>
        <advanced>
          <ref type="cvs" link="doc/examples/listfolder.php"/>
          <ref type="api:class" link="io.Folder"/>
        </advanced>
      </para>

      <!-- reflection -->
      <para>
        <caption>Class information</caption>
        <text>
          Sometimes, it is necessary to retrieve information about a class' methods,
          fields or to dynamically create an instance of a class whose name is only
          known at runtime. This is called <b>reflection</b>.
          <code><![CDATA[  require('lang.base.php');
  xp::sapi('cli');

  // {{{ main
  $p= &new ParamString();

  try(); {
    $class= &XPClass::forName($p->value(1));
    $instance= &$class->newInstance();
  } if (catch ('ClassNotFoundException', $e)) {
    $e->printStackTrace();
    exit(-1);
  } if (catch ('Exception', $e)) {
    $e->printStackTrace();
    exit(-2);
  }

  $methods= '';
  foreach ($class->getMethods() as $method) {
    $methods.= '  - '.$method->getName()."()\n";
  }

  Console::writef(
    "Class '%s'\n".
    "* Methods:\n%s\n".
    "* Fields:\n  - \$%s\n\n".
    "* Has method 'toString': %s\n\n".
    "* Instance toString() output: %s\n",
    $class->getName(),
    $methods,
    implode("\n  - \$", array_keys($class->getFields())),
    var_export($class->hasMethod('toString'), 1),
    $instance->toString()
  );
  // }}}]]></code>
          <box caption="Output (when called with util.Binford as command line argument)"><pre><![CDATA[
Class 'util.Binford'
* Methods:
  - hashcode()
  - equals()
  - clone()
  - getclassname()
  - getclass()
  - tostring()
  - setpoweredby()
  - getpoweredby()
  - getheader()

* Fields:
  - $__id
  - $poweredBy

* Has method 'toString': true

* Instance toString() output: util.Binford@class binford {
  var $__id = '0.44672000 1084272285';
  var $poweredBy = 6100;
}]]></pre>
          </box>
        </text>
        <advanced>
          <ref type="cvs" link="doc/examples/reflection.php"/>
          <ref type="api:class" link="lang.XPClass"/>
          <ref type="ext" link="http://sitten-polizei.de/php/reflection_api">PHP5 reflection API</ref>
        </advanced>
      </para>
      
      <!-- cvs -->
      <para>
        <caption>Printing CVS status of a file</caption>
        <text>
          CVS is a wide-spread versioning system. The <ref type="api:collection" link="org.cvshome"/> 
          collection offers an API to the <tt>cvs</tt> binary.
          <code><![CDATA[  require('lang.base.php');
  xp::sapi('cli');
  uses('org.cvshome.CVSFile');

  $p= &new ParamString();
  if (!$p->exists(1)) {
    printf("Usage: %s <filename>\n", $p->value(0));
    exit(-2);
  }
  
  $f= &new CVSFile($p->value(1));
  try(); {
    $status= &$f->getStatus();
  } if (catch('Exception', $e)) {
    $e->printStackTrace();
    exit(-1);
  }
  
  switch ($status->status) {
    case CVS_PATCHED:   $s= 'patched'; break;
    case CVS_UPDATED:   $s= 'updated'; break;
    case CVS_ADDED:     $s= 'added'; break;
    case CVS_MODIFIED:  $s= 'modified'; break;
    case CVS_CONFLICT:  $s= 'conflict'; break;
    case CVS_UPTODATE:  $s= 'up-to-date'; break;
    case CVS_UNKNOWN:   $s= '(unknown)'; break;
    default:            $s= '???'; break;
  }
  
  Console::writeLinef(
    'File %s (local: %s, repository: %s) is %s [%d]',
    $status->filename,
    $status->workingrevision,
    $status->repositoryrevision,
    $s,
    $status->status
  );
  foreach ($status->tags as $name => $version) {
    Console::writeLinef('- Tag %-30s @ r%s', $name, $version);
  }]]></code>
          <box caption="Output"><pre><![CDATA[
File lang.base.php (local: 1.35, repository: 1.35) is up-to-date [8]
- Tag BEFORE_NULLPOINTERPATCH        @ r1.14
- Tag PT_RELEASE                     @ r1.8
- Tag STABLE                         @ r1.8
- Tag Initial                        @ r1.1.1.1]]></pre>
          </box>
        </text>
        <advanced>
          <ref type="cvs" link="doc/examples/cvsstatus.php"/>
          <ref type="ext" link="http://cvshome.org/">CVS homepage</ref>
        </advanced>
      </para>
        
      <!-- ldap -->
      <para>
        <caption>A simple LDAP client</caption>
        <text>
          This example shows how to use the <ref type="api:collection" link="peer.ldap"/> 
          classes. We use the OpenLDAP group's test server which is publicly accessible.
          <code><![CDATA[  require('lang.base.php');
  xp::sapi('cli');
  uses('peer.ldap.LDAPClient');
  
  $l= &new LDAPClient('ldap.openldap.org');
  try(); {
    $l->setOption(LDAP_OPT_PROTOCOL_VERSION, 3);
    $l->connect();
    $l->bind();
    $res= &$l->search(
      'ou=People,dc=OpenLDAP,dc=Org', 
      '(objectClass=*)'
    );
  } if (catch('ConnectException', $e)) {  // Connection to the server failed
    $e->printStackTrace();
    exit(-1);
  } if (catch('LDAPException', $e)) {     // Protocol mismatch, access denied, ...
    $e->printStackTrace();
    exit(-1);
  }
    
  Console::writeLinef('+++ %d entries found', $res->numEntries());
  while ($entry= $res->getNextEntry()) {
    Console::writeLine($entry->toString());
  }
  
  // Disconnect
  $l->close();]]></code>
          <box caption="Output (abbreviated)"><pre><![CDATA[
+++ 7 entries found:
peer.ldap.LDAPEntry@DN(ou=People,dc=OpenLDAP,dc=org){
  [ou                  ] People
  [description         ] OpenLDAP People
  [objectclass         ] top, organizationalUnit, OpenLDAPou
}
// [...]
peer.ldap.LDAPEntry@DN(uid=kurt,ou=People,dc=OpenLDAP,dc=Org){
  [objectclass         ] top, person, organizationalPerson, inetOrgPerson [...]
  [uid                 ] kurt, kdz
  [displayname         ] Kurt Zeilenga
  [cn                  ] Kurt D. Zeilenga, Kurt Zeilenga
  [sn                  ] Zeilenga
  [givenname           ] Kurt
  [title               ] Chief Architect, Executive Director, Founder
  [o                   ] OpenLDAP
  [ou                  ] Project, Foundation
  [l                   ] Redwood Shores
  [st                  ] California
  [mail                ] kurt@OpenLDAP.org
  [description         ] Pagan
  [drink               ] beer, coke
  [seealso             ] uid=kurt,dc=boolean,dc=net
}
// [...]]]></pre>
          </box>
        </text>
        <advanced>
          <ref type="cvs" link="doc/examples/ldapsearch.php"/>
          <ref type="ext" link="http://www.web2ldap.de/">WWW gateway to LDAP server</ref>
        </advanced>
      </para>

      <!-- rdbms/rdf -->
      <para>
        <caption>Creating an RDF newsfeed from a database</caption>
        <text>
          This advanced example shows how to use the database wrapper classes (XPNews
          is one of them), the rdbms API (ConnectionManager/DriverManager) and 
          how to put it all together to an RDF newsfeed.
          <code><![CDATA[  require('lang.base.php');
  xp::sapi('cli');
  uses(
    'xml.rdf.RDFNewsFeed',
    'rdbms.DriverManager',
    'rdbms.ConnectionManager',
    'net.xp_framework.db.caffeine.XPNews'
  );

  $p= &new ParamString();
  
  $cm= &ConnectionManager::getInstance();
  $cm->register(DriverManager::getConnection(
    'sybase://'.$p->value(1).'/CAFFEINE?autoconnect=1'
  ), 'caffeine');
  
  $rdf= &new RDFNewsFeed();
  $rdf->setChannel(
    'XP News', 
    'http://xp-framework.net/',
    'XP Newsflash',
    NULL,
    'en_US',
    'XP-Team <xp@php3.de>',
    'XP-Team <xp@php3.de>',
    'http://xp-framework.net/copyright.html'
  );
  
  try(); {
    $news= &XPNews::getByDateOrdered();
  } if (catch('Exception', $e)) {
    $e->printStackTrace();
    exit(-1);
  }
  
  for ($i= 0, $s= sizeof($news); $i < $s; $i++) {
    $rdf->addItem(
      $news[$i]->getCaption(),
      $news[$i]->getLink(),
      $news[$i]->getBody(),
      $news[$i]->getCreated_at()
    );
  }
  
  Console::write($rdf->getSource(INDENT_DEFAULT));
]]></code>
          <box caption="Abbreviated output (called with 'news:****@php3' as argument for credentials)"><pre><![CDATA[
<rdf:RDF
 xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
 xmlns:dc="http://purl.org/dc/elements/1.1/"
 xmlns="http://my.netscape.com/rdf/simple/0.9/"
>
  <channel>  
    <title>XP News</title>
    <link>http://xp-framework.net/</link>
    <description>XP Newsflash</description>
    <dc:language>en_US</dc:language>
    <dc:date>2003-09-28T18:03:07</dc:date>
    <dc:creator>XP-Team &lt;xp@php3.de&gt;</dc:creator>
    <dc:publisher>XP-Team &lt;xp@php3.de&gt;</dc:publisher>
    <dc:rights>http://xp-framework.net/copyright.html</dc:rights>
  </channel>
  <item>  
    <title>About XP</title>
    <link>http://xp-framework.net/content/about.html</link>
    <description>An introduction to the XP framework. [...]</description>
    <dc:date>2003-01-18T21:01:00</dc:date>
  </item>
</rdf:RDF>
]]></pre>
          </box>
        </text>
        <advanced>
          <ref type="cvs" link="doc/examples/createrdf.php"/>
          <ref type="api:collection" link="rdbms"/>
          <ref type="ext" link="http://xp-framework.net/news.rdf.xml"/>
        </advanced>
      </para>
    </content>
  </main>
</document>
