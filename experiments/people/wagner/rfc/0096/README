dba classmapping experiment
========================================================================
$Id$

==========================
extends class generator


==========================
means to generate methods to each table class to access constraint entities


==========================
class generation:
-----------------

table view

  +---------------+
  | person        |
  +---------------+ +
  | person_id (P) |<------+
  | name          |       |
  +---------------+       |
                          | person_id = chief_id
                          |
                          |
                          |   +-------------------+
                          | 1 | department        |
                          +---+-------------------+
                              | department_id (P) |
                              | chief_id      (I) |
                              +-------------------+

generated classes:

  +----------------------------------+
  | Person                           |
  +----------------------------------+
  | + person_id                      |
  | + name                           |
  +----------------------------------+
  | int          getPerson_id()      |
  | string       getName()           |
  | Department[] getDepartmentList() |
  +----------------------------------+

  +---------------------------+
  | Department                |
  +---------------------------+
  | + department_id           |
  | + chief_id                |
  +---------------------------+
  | int    getDepartment_id() |
  | string getChief_id()      |
  | Person getChief()         |
  +---------------------------+


==========================
naming:
-------

Is done by a NamingStrategy:

default: rdbms.util.DBXMLNamingStrategyDefault

can be replaced:
rdbms.util.DBXMLNamingContext::setStrategy(<rdbms.util.DBXMLNamingStrategy> Strategy);
Strategy can be any instance of a class that extends the abstract rdbms.util.DBXMLNamingStrategy class.

<EOF>
