Index: ../testdb/data/xp5.php.xsl
===================================================================
--- ../testdb/data/xp5.php.xsl	(Revision 10314)
+++ ../testdb/data/xp5.php.xsl	(Arbeitskopie)
@@ -129,13 +129,25 @@
    * @purpose  Datasource accessor
    */
   class </xsl:text><xsl:value-of select="@class"/><xsl:text> extends DataSet {
+    public&#10;</xsl:text>
 
-    protected
-      $_isLoaded= false,
-      $_loadCrit= NULL,
-      $_cached=   array();
-
+  <!-- Attributes -->
+  <xsl:for-each select="attribute">
+    <xsl:value-of select="concat('      $', @name, substring('                                ', 0, 20 - string-length(@name)))"/>
+    <xsl:choose>
+      <xsl:when test="@nullable = 'true'">= NULL</xsl:when>
+      <xsl:when test="@typename= 'int'">= 0</xsl:when>
+      <xsl:when test="@typename= 'string'">= ''</xsl:when>
+      <xsl:when test="@typename= 'float'">= 0.0</xsl:when>
+      <xsl:when test="@typename= 'bool'">= FALSE</xsl:when>
+      <xsl:when test="@typename= 'util.Date'">= NULL</xsl:when>
+    </xsl:choose>
+    <xsl:if test="position() != last()">,&#10;</xsl:if>
+  </xsl:for-each>
+  <xsl:text>;
+  
     private</xsl:text>
+      $_cached=   array(),
   <xsl:for-each select="constraint/reference | document(concat('../', $path, '/../constraints/constraints.xml'))/document/database[@database = $this/table/@database]/table/constraint/reference[@table = $this/table/@name]"><xsl:if test="position() != 1"><xsl:text>,</xsl:text></xsl:if><xsl:text>
       $cache</xsl:text><xsl:value-of select="@role" /><xsl:text>= array()</xsl:text>
   </xsl:for-each><xsl:text>;
@@ -203,32 +215,7 @@
     public function _cacheAdd</xsl:text><xsl:value-of select="@role" /><xsl:text>($key, $obj) { $this->cache</xsl:text><xsl:value-of select="@role" /><xsl:text>[$key]= $obj; }</xsl:text>
   </xsl:for-each><xsl:text>
 
-    function __get($name) {
-      $this->load();
-      return $this->get($name);
-    }
-
-    function __sleep() {
-      $this->load();
-      return array_merge(array_keys(self::getPeer()->types), array('_new', '_changed'));
-    }
-
     /**
-     * force loading this entity from database
-     *
-     */
-    public function load() {
-      if ($this->_isLoaded) return;
-      $this->_isLoaded= true;
-      $e= self::getPeer()->doSelect($this->_loadCrit);
-      if (!$e) return;
-      foreach (array_keys(self::getPeer()->types) as $p) {
-        if (isset($this->{$p})) continue;
-        $this->{$p}= $e[0]->$p;
-      }
-    }
-
-    /**
      * column factory
      *
      * @param   string name
@@ -279,47 +266,54 @@
 
 
       <xsl:choose>
+
         <xsl:when test="count(key) = 1">
           <!-- Single key -->
           <xsl:choose>
             <xsl:when test="@unique = 'true'">
-              <xsl:text>      return new self(array(&#10;</xsl:text>
-              <xsl:text>        '</xsl:text><xsl:value-of select="key"/><xsl:text>'  => $</xsl:text><xsl:value-of select="key"/><xsl:text>,&#10;</xsl:text>
-              <xsl:text>        '_loadCrit' => new Criteria(array('</xsl:text><xsl:value-of select="key"/><xsl:text>', $</xsl:text><xsl:value-of select="key"/><xsl:text>, EQUAL))&#10;</xsl:text>
-              <xsl:text>      ));&#10;</xsl:text>
+              <xsl:text>      $r= self::getPeer()-&gt;doSelect(new Criteria(array('</xsl:text>
+              <xsl:value-of select="key"/>
+              <xsl:text>', $</xsl:text>
+              <xsl:value-of select="key"/>
+              <xsl:text>, EQUAL)));&#10;      return $r ? $r[0] : NULL;</xsl:text>
             </xsl:when>
             <xsl:otherwise>
-              <xsl:text>      $r= self::getPeer()-&gt;doSelect(new Criteria(array('</xsl:text><xsl:value-of select="key"/><xsl:text>', $</xsl:text><xsl:value-of select="key"/><xsl:text>, EQUAL)));&#10;</xsl:text>
-              <xsl:text>      foreach ($r as $e) $e->_isLoaded= true;&#10;</xsl:text>
-              <xsl:text>      return $r;&#10;</xsl:text>
+              <xsl:text>      return self::getPeer()-&gt;doSelect(new Criteria(array('</xsl:text>
+              <xsl:value-of select="key"/>
+              <xsl:text>', $</xsl:text>
+              <xsl:value-of select="key"/>
+              <xsl:text>, EQUAL)));</xsl:text>
             </xsl:otherwise>
           </xsl:choose>
-
         </xsl:when>
+
         <xsl:otherwise>
         
           <!-- Multiple keys -->
           <xsl:choose>
             <xsl:when test="@unique = 'true'">
-              <xsl:text>      return new self(array(&#10;</xsl:text>
+              <xsl:text>      $r= self::getPeer()-&gt;doSelect(new Criteria(&#10;</xsl:text>
               <xsl:for-each select="key">
-                <xsl:text>        '</xsl:text><xsl:value-of select="."/><xsl:text>'  => $</xsl:text><xsl:value-of select="."/><xsl:text>,&#10;</xsl:text>
+                <xsl:text>        array('</xsl:text>
+                <xsl:value-of select="."/>
+                <xsl:text>', $</xsl:text>
+                <xsl:value-of select="."/>
+                <xsl:text>, EQUAL)</xsl:text>
+                <xsl:if test="position() != last()">,</xsl:if><xsl:text>&#10;</xsl:text>
               </xsl:for-each>
-              <xsl:text>        '_loadCrit' => new Criteria(&#10;</xsl:text>
-              <xsl:for-each select="key">
-                <xsl:text>          array('</xsl:text><xsl:value-of select="."/><xsl:text>', $</xsl:text><xsl:value-of select="."/><xsl:text>, EQUAL)</xsl:text><xsl:if test="position() != last()"><xsl:text>,</xsl:text></xsl:if><xsl:text>&#10;</xsl:text>
-              </xsl:for-each>
-              <xsl:text>        )&#10;</xsl:text>
-              <xsl:text>      ));&#10;</xsl:text>
+              <xsl:text>      ));&#10;      return $r ? $r[0] : NULL;</xsl:text>
             </xsl:when>
             <xsl:otherwise>
-              <xsl:text>      $r= self::getPeer()-&gt;doSelect(new Criteria(&#10;</xsl:text>
+              <xsl:text>      return self::getPeer()-&gt;doSelect(new Criteria(&#10;</xsl:text>
               <xsl:for-each select="key">
-                <xsl:text>        array('</xsl:text><xsl:value-of select="."/><xsl:text>', $</xsl:text><xsl:value-of select="."/><xsl:text>, EQUAL)</xsl:text><xsl:if test="position() != last()"><xsl:text>,</xsl:text></xsl:if><xsl:text>&#10;</xsl:text>
+                <xsl:text>        array('</xsl:text>
+                <xsl:value-of select="."/>
+                <xsl:text>', $</xsl:text>
+                <xsl:value-of select="."/>
+                <xsl:text>, EQUAL)</xsl:text>
+                <xsl:if test="position() != last()">,</xsl:if><xsl:text>&#10;</xsl:text>
               </xsl:for-each>
-              <xsl:text>      ));&#10;</xsl:text>
-              <xsl:text>      foreach ($r as $e) $e->_isLoaded= true;&#10;</xsl:text>
-              <xsl:text>      return $r;&#10;</xsl:text>
+              <xsl:text>      ));</xsl:text>
             </xsl:otherwise>
           </xsl:choose>
         </xsl:otherwise>
