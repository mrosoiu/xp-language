class Real {
  protected int $numerator;
  protected int $denominator;

  /**
   * Accepts either x.x (floating point notation) or x/x (fractional notation)
   */
  public __construct(string $in= NULL) {
    if (strstr($in, '.')) {      // Floating point
      sscanf($in, '%d.%[0-9]', $int, $frac);
      $this->denominator= pow(10, strlen($frac));
      $this->numerator= $this->denominator * $int + $frac;
    } else if (NULL !== $in) {             // Fraction
      sscanf($in, '%d/%[0-9]', $this->numerator, $d);
      $this->denominator= NULL === $d ? 1 : (int)$d;
    };
  }
  
  /**
   * Calculates the greatest common divisor
   */
  public static int gcd(int $a, int $b) {
  	if ($a == $b) return $a; else return $a > $b ? self::gcd($a - $b, $b) : self::gcd($a, $b - $a); 
  }

  /**
   * Calculates the lowest common multiple
   */
  public static int lcm(int $a, int $b) {
  	return $a * $b / self::gcd($a, $b); 
  }
  
  public static operator + (Real $a, Real $b) {
    $r= new Real();
    $r->numerator= $a->numerator * $b->denominator + $b->numerator * $a->denominator;
    $r->denominator= $a->denominator * $b->denominator;
    return $r;
  }

  public static operator - (Real $a, Real $b) {
    $r= new Real();
    $r->numerator= $a->numerator * $b->denominator - $b->numerator * $a->denominator;
    $r->denominator= $a->denominator * $b->denominator;
    return $r;
  }

  public static operator * (Real $a, Real $b) {
    $r= new Real();
    $r->numerator= $a->numerator * $b->numerator;
    $r->denominator= $a->denominator * $b->denominator;
    return $r;
  }

  public static operator / (Real $a, Real $b) {
    $r= new Real();
    $r->numerator= $a->numerator * $b->denominator;
    $r->denominator= $a->denominator * $b->numerator;
    
    // -1/-2 => 1/2
    if ($r->numerator < 0 && $r->denominator < 0) {
      $r->numerator*= -1;
      $r->denominator*= -1;
    }
    return $r;
  }

  public static operator <=> (Real $a, Real $b) {
    $numerator= $a->numerator * $b->denominator - $b->numerator * $a->denominator;
    if ($numerator < 0) return -1;    // a is smaller than b
    if ($numerator > 0) return 1;     // a is greater than b
    return 0;                         // a equals b
  }
  
  public string toString() {
    if (0 == $this->numerator) return '0';    // 0/x
    if (1 == $this->denominator) return (string)$this->numerator; // x/1
    
    $gcd= self::gcd(abs($this->numerator), $this->denominator);
    if ($gcd == $this->denominator) return (string)$this->numerator / $gcd;       // 2/2, 10/5
    return sprintf('%d/%d', $this->numerator / $gcd, $this->denominator / $gcd);
  }
}
