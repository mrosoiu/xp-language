%{
?><?php
/*
   +----------------------------------------------------------------------+
   | Zend Engine                                                          |
   +----------------------------------------------------------------------+
   | Copyright (c) 1998-2004 Zend Technologies Ltd. (http://www.zend.com) |
   +----------------------------------------------------------------------+
   | This source file is subject to version 2.00 of the Zend license,     |
   | that is bundled with this package in the file LICENSE, and is        | 
   | available through the world-wide-web at the following url:           |
   | http://www.zend.com/license/2_00.txt.                                |
   | If you did not receive a copy of the Zend license and are unable to  |
   | obtain it through the world-wide-web, please send a note to          |
   | license@zend.com so we can mail you a copy immediately.              |
   +----------------------------------------------------------------------+
   | Authors: Andi Gutmans <andi@zend.com>                                |
   |          Zeev Suraski <zeev@zend.com>                                |
   +----------------------------------------------------------------------+
*/

/* $Id$ */

/* 
 * LALR shift/reduce conflicts and how they are resolved:
 *
 * - 2 shift/reduce conflicts due to the dangeling elseif/else ambiguity.  Solved by shift.
 * - 1 shift/reduce conflict due to arrays within encapsulated strings. Solved by shift. 
 * - 1 shift/reduce conflict due to objects within encapsulated strings.  Solved by shift.
 * 
 */

class Parser {
  var $_options = array();
  var $yyGlobalName = '_PHP_PARSER';
%}
 
%left T_INCLUDE T_INCLUDE_ONCE T_EVAL T_REQUIRE T_REQUIRE_ONCE
%left ','
%left T_LOGICAL_OR
%left T_LOGICAL_XOR
%left T_LOGICAL_AND
%right T_PRINT
%left '=' T_PLUS_EQUAL T_MINUS_EQUAL T_MUL_EQUAL T_DIV_EQUAL T_CONCAT_EQUAL T_MOD_EQUAL T_AND_EQUAL T_OR_EQUAL T_XOR_EQUAL T_SL_EQUAL T_SR_EQUAL
%left '?' ':'
%left T_BOOLEAN_OR
%left T_BOOLEAN_AND
%left '|'
%left '^'
%left '&'
%nonassoc T_IS_EQUAL T_IS_NOT_EQUAL T_IS_IDENTICAL T_IS_NOT_IDENTICAL
%nonassoc '<' T_IS_SMALLER_OR_EQUAL '>' T_IS_GREATER_OR_EQUAL T_COMPARE_ARROW
%left T_SL T_SR
%left '+' '-' '.'
%left '*' '/' '%'
%right '!'
%nonassoc T_INSTANCEOF
%right '~' T_INC T_DEC T_INT_CAST T_DOUBLE_CAST T_STRING_CAST T_ARRAY_CAST T_OBJECT_CAST T_BOOL_CAST T_UNSET_CAST '@'
%right '['
%nonassoc T_NEW T_CLONE
%left T_ELSEIF
%left T_ELSE
%left T_ENDIF
%right T_STATIC T_ABSTRACT T_FINAL T_PRIVATE T_PROTECTED T_PUBLIC
%token T_REQUIRE_ONCE 258
%token T_REQUIRE 259
%token T_EVAL 260
%token T_INCLUDE_ONCE 261
%token T_INCLUDE 262
%token T_LOGICAL_OR 263
%token T_LOGICAL_XOR 264
%token T_LOGICAL_AND 265
%token T_PRINT 266
%token T_SR_EQUAL 267
%token T_SL_EQUAL 268
%token T_XOR_EQUAL 269
%token T_OR_EQUAL 270
%token T_AND_EQUAL 271
%token T_MOD_EQUAL 272
%token T_CONCAT_EQUAL 273
%token T_DIV_EQUAL 274
%token T_MUL_EQUAL 275
%token T_MINUS_EQUAL 276
%token T_PLUS_EQUAL 277
%token T_BOOLEAN_OR 278
%token T_BOOLEAN_AND 279
%token T_IS_NOT_IDENTICAL 280
%token T_IS_IDENTICAL 281
%token T_IS_NOT_EQUAL 282
%token T_IS_EQUAL 283
%token T_IS_GREATER_OR_EQUAL 284
%token T_IS_SMALLER_OR_EQUAL 285
%token T_SR 286
%token T_SL 287
%token T_INSTANCEOF 288
%token T_UNSET_CAST 289
%token T_BOOL_CAST 290
%token T_OBJECT_CAST 291
%token T_ARRAY_CAST 292
%token T_STRING_CAST 293
%token T_DOUBLE_CAST 294
%token T_INT_CAST 295
%token T_DEC 296
%token T_INC 297
%token T_CLONE 298
%token T_NEW 299
%token T_EXIT 300
%token T_IF 301
%token T_ELSEIF 302
%token T_ELSE 303
%token T_ENDIF 304
%token T_LNUMBER 305
%token T_DNUMBER 306
%token T_STRING 307
%token T_STRING_VARNAME 308
%token T_VARIABLE 309
%token T_NUM_STRING 310
%token T_INLINE_HTML 311
%token T_CHARACTER 312
%token T_BAD_CHARACTER 313
%token T_ENCAPSED_AND_WHITESPACE 314
%token T_CONSTANT_ENCAPSED_STRING 315
%token T_ECHO 316
%token T_DO 317
%token T_WHILE 318
%token T_ENDWHILE 319
%token T_FOR 320
%token T_ENDFOR 321
%token T_FOREACH 322
%token T_ENDFOREACH 323
%token T_DECLARE 324
%token T_ENDDECLARE 325
%token T_AS 326
%token T_SWITCH 327
%token T_ENDSWITCH 328
%token T_CASE 329
%token T_DEFAULT 330
%token T_BREAK 331
%token T_CONTINUE 332
%token T_FUNCTION 333
%token T_CONST 334
%token T_RETURN 335
%token T_TRY 336
%token T_CATCH 337
%token T_THROW 338
%token T_USE 339
%token T_GLOBAL 340
%token T_PUBLIC 341
%token T_PROTECTED 342
%token T_PRIVATE 343
%token T_FINAL 344
%token T_ABSTRACT 345
%token T_STATIC 346
%token T_VAR 347
%token T_UNSET 348
%token T_ISSET 349
%token T_EMPTY 350
%token T_CLASS 351
%token T_INTERFACE 352
%token T_EXTENDS 353
%token T_IMPLEMENTS 354
%token T_OBJECT_OPERATOR 355
%token T_DOUBLE_ARROW 356
%token T_LIST 357
%token T_ARRAY 358
%token T_CLASS_C 359
%token T_METHOD_C 360
%token T_FUNC_C 361
%token T_LINE 362
%token T_FILE 363
%token T_COMMENT 364
%token T_DOC_COMMENT 365
%token T_OPEN_TAG 366
%token T_OPEN_TAG_WITH_ECHO 367
%token T_CLOSE_TAG 368
%token T_WHITESPACE 369
%token T_START_HEREDOC 370
%token T_END_HEREDOC 371
%token T_DOLLAR_OPEN_CURLY_BRACES 372
%token T_CURLY_OPEN 373
%token T_DOUBLE_COLON 374

%token T_HALT_COMPILER 375
%token T_CLASSNAME 376
%token T_PACKAGE 377
%token T_ENUM 378
%token T_OPERATOR 379
%token T_THROWS 380
%token T_COMPARE 381
%token T_IMPORT 382

%% /* Rules */

start:
	top_statement_list
;

top_statement_list:
		top_statement_list  { compiler::call('zend_do_extended_info'); } top_statement { compiler::call('HANDLE_INTERACTIVE'); }
	|	/* empty */
;


top_statement:
		statement
	|	function_declaration_statement	{ compiler::call('zend_do_early_binding'); }
	|	class_declaration_statement		{ compiler::call('zend_do_early_binding'); }
	|	package_declaration_statement
	|	enum_declaration_statement
	|	T_HALT_COMPILER '(' ')' ';'   { compiler::register("__COMPILER_HALT_OFFSET__", compiler::call('zend_get_scanned_file_offset'), CONST_CS); YYACCEPT; }
;


inner_statement_list:
		inner_statement_list  { compiler::call('zend_do_extended_info'); } inner_statement { compiler::call('HANDLE_INTERACTIVE'); }
	|	/* empty */
;


inner_statement:
		statement
	|	function_declaration_statement
	|	class_declaration_statement
	|	package_declaration_statement
	|	T_HALT_COMPILER '(' ')' ';'   { compiler::error(E_COMPILE_ERROR, '[E_COMPILE_ERROR] '."__HALT_COMPILER() can only be used from the outermost scope"); }
;


statement:
		unticked_statement { compiler::call('zend_do_ticks'); compiler::call('RESET_DOC_COMMENT'); }
;

unticked_statement:
		'{' inner_statement_list '}'
	|	T_IF '(' expr ')' { compiler::call('zend_do_if_cond', array($3, $4 )); } statement { compiler::call('zend_do_if_after_statement', array($4, 1 )); } elseif_list else_single { compiler::call('zend_do_if_end'); }
	|	T_IF '(' expr ')' ':' { compiler::call('zend_do_if_cond', array($3, $4 )); } inner_statement_list { compiler::call('zend_do_if_after_statement', array($4, 1 )); } new_elseif_list new_else_single T_ENDIF ';' { compiler::call('zend_do_if_end'); }
	|	T_WHILE '(' { $1->u_opline_num = get_next_op_number($CG['active_op_array']);  } expr  ')' { compiler::call('zend_do_while_cond', array($4, $5 )); } while_statement { compiler::call('zend_do_while_end', array($1, $5 )); }
	|	T_DO { $1->u_opline_num = get_next_op_number($CG['active_op_array']);  compiler::call('zend_do_do_while_begin'); } statement T_WHILE '(' { $5->u_opline_num = get_next_op_number($CG['active_op_array']); } expr ')' ';' { compiler::call('zend_do_do_while_end', array($1, $5, $7 )); }
	|	T_FOR 
			'('
				for_expr
			';' { compiler::call('zend_do_free', array($3 )); $4->u_opline_num = get_next_op_number($CG['active_op_array']); }
				for_expr
			';' { compiler::call('zend_do_extended_info'); compiler::call('zend_do_for_cond', array($6, $7 )); }
				for_expr
			')' { compiler::call('zend_do_free', array($9 )); compiler::call('zend_do_for_before_statement', array($4, $7 )); }
			for_statement { compiler::call('zend_do_for_end', array($7 )); }
	|	T_SWITCH '(' expr ')'	{ compiler::call('zend_do_switch_cond', array($3 )); } switch_case_list { compiler::call('zend_do_switch_end', array($6 )); }
	|	T_BREAK ';'				{ compiler::call('zend_do_brk_cont', array(ZEND_BRK, NULL )); }
	|	T_BREAK expr ';'		{ compiler::call('zend_do_brk_cont', array(ZEND_BRK, $2 )); }
	|	T_CONTINUE ';'			{ compiler::call('zend_do_brk_cont', array(ZEND_CONT, NULL )); }
	|	T_CONTINUE expr ';'		{ compiler::call('zend_do_brk_cont', array(ZEND_CONT, $2 )); }
	|	T_RETURN ';'						{ compiler::call('zend_do_return', array(NULL, 0 )); }
	|	T_RETURN expr_without_variable ';'	{ compiler::call('zend_do_return', array($2, 0 )); }
	|	T_RETURN variable ';'				{ compiler::call('zend_do_return', array($2, 1 )); }
	|	T_GLOBAL global_var_list ';'
	|	T_STATIC static_var_list ';'
	|	T_ECHO echo_expr_list ';'
	|	T_INLINE_HTML			{ compiler::call('zend_do_echo', array($1 )); }
	|	expr ';'				{ compiler::call('zend_do_free', array($1 )); }
	|	T_USE use_filename ';'		{ compiler::error(E_COMPILE_ERROR, '[E_COMPILE_ERROR] '."use: Not yet supported. Please use include_once() or require_once()");  zval_dtor($2->u_constant); }
	|	T_UNSET '(' unset_variables ')' ';'
	|	T_FOREACH '(' variable { compiler::call('zend_do_foreach_begin', array($1, $2, $3, 1 )); } T_AS 
		{ compiler::call('zend_do_foreach_fetch', array($1, $2, $5 )); } 
		foreach_variable foreach_optional_arg ')' { compiler::call('zend_do_foreach_cont', array($1, $5, $7, $8 )); } 
		foreach_statement { compiler::call('zend_do_foreach_end', array($1, $5 )); }
	|	T_FOREACH '(' expr_without_variable { compiler::call('zend_do_foreach_begin', array($1, $2, $3, 0 )); } T_AS 
		{ compiler::call('zend_do_foreach_fetch', array($1, $2, $5 )); } 
		w_variable foreach_optional_arg ')' { compiler::call('zend_do_foreach_cont', array($1, $5, $7, $8 )); } 
		foreach_statement { compiler::call('zend_do_foreach_end', array($1, $5 )); }
	|	T_DECLARE { $1->u_opline_num = get_next_op_number($CG['active_op_array']); compiler::call('zend_do_declare_begin'); } '(' declare_list ')' declare_statement { compiler::call('zend_do_declare_end', array($1 )); }
	|	';'		/* empty statement */
	|	T_TRY { compiler::call('zend_do_try', array($1)); } '{' inner_statement_list '}'
		T_CATCH '(' { compiler::call('zend_initialize_try_catch_element', array($1 )); }
		fully_qualified_class_name { compiler::call('zend_do_first_catch', array($7 )); }
		T_VARIABLE ')' { compiler::call('zend_do_begin_catch', array($1, $9, $11, 1 )); }
		'{' inner_statement_list '}' { compiler::call('zend_do_end_catch', array($1 )); }
		additional_catches { compiler::call('zend_do_mark_last_catch', array($7, $18 )); }
	|	T_THROW expr ';' { compiler::call('zend_do_throw', array($2)); }
	|	T_IMPORT import_list ';'
;

import_list:
		import_list ',' import
	|	import
;

import:
		class_name_reference                 	{ compiler::call('zend_do_import', array($1, NULL )); }
	|	class_name_reference T_AS T_STRING	   	{ compiler::call('zend_do_import', array($1, $3 )); }
	|	class_name_reference T_AS r_variable 	{ compiler::call('zend_do_import', array($1, $3 )); }
;

additional_catches:
		non_empty_additional_catches { $$ = $1; }
	|	/* empty */ { $$->u_opline_num = -1; }
;

non_empty_additional_catches:
		additional_catch { $$ = $1; }
	|	non_empty_additional_catches additional_catch { $$ = $2; }
;
		

additional_catch:
	T_CATCH '(' fully_qualified_class_name { $$->u_opline_num = get_next_op_number($CG['active_op_array']); } T_VARIABLE ')' { compiler::call('zend_do_begin_catch', array($1, $3, $5, 0 )); } '{' inner_statement_list '}' { compiler::call('zend_do_end_catch', array($1 )); }
;

enum_declaration_statement:
		unticked_enum_declaration_statement		{ compiler::call('zend_do_ticks'); }
;

unset_variables:
		unset_variable
	|	unset_variables ',' unset_variable
;

unset_variable:
		variable	{ compiler::call('zend_do_end_variable_parse', array(BP_VAR_UNSET, 0 )); compiler::call('zend_do_unset', array($1 )); }
;

use_filename:
		T_CONSTANT_ENCAPSED_STRING			{ $$ = $1; }
	|	'(' T_CONSTANT_ENCAPSED_STRING ')'	{ $$ = $2; }
;


function_declaration_statement:
		unticked_function_declaration_statement	{ compiler::call('zend_do_ticks'); }
;

class_declaration_statement:
		unticked_class_declaration_statement	{ compiler::call('zend_do_ticks'); }
;

package_inner_statement_list:
		package_inner_statement package_inner_statement_list
	|   /* empty */
;

package_inner_statement:
		class_declaration_statement { compiler::call('zend_do_early_binding'); }
	|	enum_declaration_statement
	|	T_IMPORT package_import_list ';'
;

package_import_list:
		package_import_list ',' package_import
	|	package_import
;

package_import:
		T_CLASSNAME                 { compiler::call('zend_do_fetch_class', array($$, $1)); compiler::call('zend_do_import', array($$, NULL )); }
	|	T_CLASSNAME T_AS T_STRING   { compiler::call('zend_do_fetch_class', array($$, $1)); compiler::call('zend_do_import', array($$, $3 )); }
;

package_declaration_statement:
		unticked_package_declaration_statement  { compiler::call('zend_do_ticks'); }
;

is_reference:
		/* empty */	{ $$= FALSE; }
	|	'&'			{ $$= TRUE; }
;


unticked_function_declaration_statement:
		T_FUNCTION { $1->u_opline_num = $CG['zend_lineno']; } is_reference T_STRING { compiler::call('zend_do_begin_function_declaration', array($1, $4, 0, $3, NULL )); }
			'(' parameter_list ')' '{' inner_statement_list '}' { compiler::call('zend_do_end_function_declaration', array($1 )); }
;

optional_annotation_list:
		/* empty */
	|	annotation_list
;

unticked_class_declaration_statement:
		optional_annotation_list class_entry_type T_STRING extends_from
			{ compiler::call('zend_do_begin_class_declaration', array($2, $3, $4)); } 
			implements_list
			'{'
				class_statement_list
			'}' { compiler::call('zend_do_end_class_declaration', array($2, $3)); }
	|	optional_annotation_list interface_entry T_STRING
			{ compiler::call('zend_do_begin_interface_declaration', array($2, $3)); } 
			interface_extends_list
			'{'
				class_statement_list
			'}' { compiler::call('zend_do_end_interface_declaration', array($2, $3)); }
;

unticked_package_declaration_statement:
		T_PACKAGE T_STRING { compiler::call('zend_do_begin_package_declaration', array($2)); }
			'{'
				package_inner_statement_list
			'}' { compiler::call('zend_do_end_package_declaration', array($2)); }
	|	T_PACKAGE T_CLASSNAME { compiler::call('zend_do_begin_package_declaration', array($2)); }
			'{'
				package_inner_statement_list
			'}' { compiler::call('zend_do_end_package_declaration', array($2)); }
;

class_entry_type:
		T_CLASS					{ $$= 0; }
	|	T_ABSTRACT T_CLASS		{ $$= MODIFIER_ABSTRACT; }
	|	T_FINAL T_CLASS			{ $$= MODIFIER_FINAL; }
;

extends_from:
		/* empty */								{ $$= NULL; }
	|	T_EXTENDS fully_qualified_class_name	{ $$= $2; }
;

interface_entry:
	T_INTERFACE		{ $$= 0; }
;

interface_extends_list:
		/* empty */
	|	T_EXTENDS interface_list
;

implements_list:
		/* empty */
	|	T_IMPLEMENTS interface_list
;

interface_list:
		fully_qualified_class_name						{ compiler::call('zend_do_implements_interface', array($1)); }
	|	interface_list ',' fully_qualified_class_name 	{ compiler::call('zend_do_implements_interface', array($3)); }
;

unticked_enum_declaration_statement:
		T_ENUM T_STRING '{' { compiler::call('zend_do_begin_enum_declaration', array($2 )); }
			enum_inner_statement_list 
		'}' { compiler::call('zend_do_end_enum_declaration'); }
;

enum_inner_statement_list:
		enum_declaration_list
	| 	enum_declaration_list ';' class_statement_list
;

enum_declaration_list:
		enum_declaration_list ',' enum_declaration_list_member
	|	enum_declaration_list_member
;

enum_declaration_list_member:
		T_STRING						{ compiler::call('zend_do_add_enum_member', array($1, NULL)); }
	|	T_STRING '(' static_scalar ')'	{ compiler::call('zend_do_add_enum_member', array($1, $3));  }
	|	T_STRING '{' 
			method_modifiers T_FUNCTION { $4->u_opline_num = $CG['zend_lineno']; } is_reference T_STRING { compiler::call('zend_do_begin_enum_function_declaration', array($1, $4, $7, 1, $6, $3 )); } '(' 
			parameter_list ')' throws method_body { compiler::call('zend_do_abstract_method', array($7, $3, $13 )); compiler::call('zend_do_end_function_declaration', array($4 )); }
		'}'
;

foreach_optional_arg:
		/* empty */						{ $$= NULL; }
	|	T_DOUBLE_ARROW foreach_variable	{ $$= $2; }
;


foreach_variable:
		w_variable			{ $$= $1; }
	|	'&' w_variable		{ $$= &$2; }
;

for_statement:
		statement
	|	':' inner_statement_list T_ENDFOR ';'
;


foreach_statement:
		statement
	|	':' inner_statement_list T_ENDFOREACH ';'
;


declare_statement:
		statement
	|	':' inner_statement_list T_ENDDECLARE ';'
;


declare_list:
		T_STRING '=' static_scalar					{ compiler::call('zend_do_declare_stmt', array($1, $3)); }
	|	declare_list ',' T_STRING '=' static_scalar	{ compiler::call('zend_do_declare_stmt', array($3, $5)); }
;


switch_case_list:
		'{' case_list '}'					{ $$= $2; }
	|	'{' ';' case_list '}'				{ $$= $3; }
	|	':' case_list T_ENDSWITCH ';'		{ $$= $2; }
	|	':' ';' case_list T_ENDSWITCH ';'	{ $$= $3; }
;


case_list:
		/* empty */	{ $$->op_type = IS_UNUSED; }
	|	case_list T_CASE expr case_separator { compiler::call('zend_do_extended_info');  compiler::call('zend_do_case_before_statement', array($1, $2, $3 )); } inner_statement_list { compiler::call('zend_do_case_after_statement', array($$, $2 )); $$->op_type = IS_CONST; }
	|	case_list T_DEFAULT case_separator { compiler::call('zend_do_extended_info');  compiler::call('zend_do_default_before_statement', array($1, $2 )); } inner_statement_list { compiler::call('zend_do_case_after_statement', array($$, $2 )); $$->op_type = IS_CONST; }
;


case_separator:
		':'
	|	';'
;


while_statement:
		statement
	|	':' inner_statement_list T_ENDWHILE ';'
;



elseif_list:
		/* empty */
	|	elseif_list T_ELSEIF '(' expr ')' { compiler::call('zend_do_if_cond', array($4, $5 )); } statement { compiler::call('zend_do_if_after_statement', array($5, 0 )); }
;


new_elseif_list:
		/* empty */
	|	new_elseif_list T_ELSEIF '(' expr ')' ':' { compiler::call('zend_do_if_cond', array($4, $5 )); } inner_statement_list { compiler::call('zend_do_if_after_statement', array($5, 0 )); }
;


else_single:
		/* empty */
	|	T_ELSE statement
;


new_else_single:
		/* empty */
	|	T_ELSE ':' inner_statement_list
;


parameter_list: 
		non_empty_parameter_list
	|	/* empty */
;


non_empty_parameter_list:
		optional_class_type T_VARIABLE				{  compiler::call('fetch_simple_variable', array($tmp, $2, 0 )); $$->op_type = IS_CONST; $$->u_constant_value_lval=1; $$->u_constant_type=IS_LONG; compiler::call('zend_do_receive_arg', array(ZEND_RECV, $tmp, $$, NULL, $1, $2, 0 )); }
	|	optional_class_type '&' T_VARIABLE			{  compiler::call('fetch_simple_variable', array($tmp, $3, 0 )); $$->op_type = IS_CONST; $$->u_constant_value_lval=1; $$->u_constant_type=IS_LONG; compiler::call('zend_do_receive_arg', array(ZEND_RECV, $tmp, $$, NULL, $1, $3, 1 )); }
	|	optional_class_type '&' T_VARIABLE '=' static_scalar			{  compiler::call('fetch_simple_variable', array($tmp, $3, 0 )); $$->op_type = IS_CONST; $$->u_constant_value_lval=1; $$->u_constant_type=IS_LONG; compiler::call('zend_do_receive_arg', array(ZEND_RECV_INIT, $tmp, $$, $5, $1, $3, 1 )); }
	|	optional_class_type T_VARIABLE '=' static_scalar				{  compiler::call('fetch_simple_variable', array($tmp, $2, 0 )); $$->op_type = IS_CONST; $$->u_constant_value_lval=1; $$->u_constant_type=IS_LONG; compiler::call('zend_do_receive_arg', array(ZEND_RECV_INIT, $tmp, $$, $4, $1, $2, 0 )); }
	|	non_empty_parameter_list ',' optional_class_type T_VARIABLE 	{  compiler::call('fetch_simple_variable', array($tmp, $4, 0 )); $$=$1; $$->u_constant_value_lval++; compiler::call('zend_do_receive_arg', array(ZEND_RECV, $tmp, $$, NULL, $3, $4, 0 )); }
	|	non_empty_parameter_list ',' optional_class_type '&' T_VARIABLE	{  compiler::call('fetch_simple_variable', array($tmp, $5, 0 )); $$=$1; $$->u_constant_value_lval++; compiler::call('zend_do_receive_arg', array(ZEND_RECV, $tmp, $$, NULL, $3, $5, 1 )); }
	|	non_empty_parameter_list ',' optional_class_type '&' T_VARIABLE	 '=' static_scalar {  compiler::call('fetch_simple_variable', array($tmp, $5, 0 )); $$=$1; $$->u_constant_value_lval++; compiler::call('zend_do_receive_arg', array(ZEND_RECV_INIT, $tmp, $$, $7, $3, $5, 1 )); }
	|	non_empty_parameter_list ',' optional_class_type T_VARIABLE '=' static_scalar 	{  compiler::call('fetch_simple_variable', array($tmp, $4, 0 )); $$=$1; $$->u_constant_value_lval++; compiler::call('zend_do_receive_arg', array(ZEND_RECV_INIT, $tmp, $$, $6, $3, $4, 0 )); }
;


optional_class_type:
		/* empty */		{ $$->op_type = IS_UNUSED; }
	|	T_STRING		{ $$ = $1; }
	|	T_CLASSNAME
	|	T_ARRAY		{ $$->op_type = IS_CONST; $$->u_constant_type=IS_NULL;}
;


function_call_parameter_list:
		non_empty_function_call_parameter_list	{ $$ = $1; }
	|	/* empty */				{ $$->u_constant_value_lval = 0; }
;


non_empty_function_call_parameter_list:
		expr_without_variable	{ $$->u_constant_value_lval = 1;  compiler::call('zend_do_pass_param', array($1, ZEND_SEND_VAL, $$->u_constant_value_lval )); }
	|	variable				{ $$->u_constant_value_lval = 1;  compiler::call('zend_do_pass_param', array($1, ZEND_SEND_VAR, $$->u_constant_value_lval )); }
	|	'&' w_variable 				{ $$->u_constant_value_lval = 1;  compiler::call('zend_do_pass_param', array($2, ZEND_SEND_REF, $$->u_constant_value_lval )); }
	|	non_empty_function_call_parameter_list ',' expr_without_variable	{ $$->u_constant_value_lval=$1->u_constant_value_lval+1;  compiler::call('zend_do_pass_param', array($3, ZEND_SEND_VAL, $$->u_constant_value_lval )); }
	|	non_empty_function_call_parameter_list ',' variable					{ $$->u_constant_value_lval=$1->u_constant_value_lval+1;  compiler::call('zend_do_pass_param', array($3, ZEND_SEND_VAR, $$->u_constant_value_lval )); }
	|	non_empty_function_call_parameter_list ',' '&' w_variable				{ $$->u_constant_value_lval=$1->u_constant_value_lval+1;  compiler::call('zend_do_pass_param', array($4, ZEND_SEND_REF, $$->u_constant_value_lval )); }
;

global_var_list:
		global_var_list ',' global_var	{ compiler::call('zend_do_fetch_global_variable', array($3, NULL, ZEND_FETCH_GLOBAL )); }
	|	global_var						{ compiler::call('zend_do_fetch_global_variable', array($1, NULL, ZEND_FETCH_GLOBAL )); }
;


global_var:
		T_VARIABLE			{ $$ = $1; }
	|	'$' r_variable		{ $$ = $2; }
	|	'$' '{' expr '}'	{ $$ = $3; }
;


static_var_list:
		static_var_list ',' T_VARIABLE { compiler::call('zend_do_fetch_static_variable', array($3, NULL, ZEND_FETCH_STATIC )); }
	|	static_var_list ',' T_VARIABLE '=' static_scalar { compiler::call('zend_do_fetch_static_variable', array($3, $5, ZEND_FETCH_STATIC )); }
	|	T_VARIABLE  { compiler::call('zend_do_fetch_static_variable', array($1, NULL, ZEND_FETCH_STATIC )); }
	|	T_VARIABLE '=' static_scalar { compiler::call('zend_do_fetch_static_variable', array($1, $3, ZEND_FETCH_STATIC )); }

;


class_statement_list:
		class_statement_list class_statement
	|	/* empty */
;


class_statement:
		variable_modifiers { $GLOBALS['CG']['access_type']= $1; } class_variable_declaration ';'
	|	class_constant_declaration ';'
	|	method_modifiers T_FUNCTION { /* $2->u_opline_num = $CG['zend_lineno']; */ } is_reference T_STRING { compiler::call('zend_do_begin_function_declaration', array($2, $5, 1, $4, $1 )); } '(' 
			parameter_list ')' throws method_body { compiler::call('zend_do_abstract_method', array($5, $1, $11 )); compiler::call('zend_do_end_function_declaration', array($2 )); }
	|	annotation_list method_modifiers T_FUNCTION { /* $3->u_opline_num = $CG['zend_lineno']; */ } is_reference T_STRING { compiler::call('zend_do_begin_function_declaration', array($3, $6, 1, $5, $2 )); } '(' 
			parameter_list ')' throws method_body { compiler::call('zend_do_abstract_method', array($6, $2, $12 )); compiler::call('zend_do_end_function_declaration', array($3 )); }
	|	method_modifiers T_OPERATOR { /* $2->u_opline_num = $CG['zend_lineno']; */ } is_reference operator_token { compiler::call('zend_do_begin_function_declaration', array($2, $5, 1, $4, $1 )); } '(' 
			parameter_list ')' throws method_body { compiler::call('zend_do_abstract_method', array($5, $1, $11 )); compiler::call('zend_do_end_function_declaration', array($2 )); }
;

throws:
		/* empty */
	|	T_THROWS throws_list
;

throws_list:
		throws_class_name 					{ compiler::call('zend_do_throws', array($1)); }
	|	throws_list ',' throws_class_name	{ compiler::call('zend_do_throws', array($3)); }
;	

throws_class_name:
		T_STRING { $$ = $1; }
	|	T_CLASSNAME { $$ = $1; }
;

annotation_list:
		'[' annotation_elements ']'
;

annotation_elements:
		annotation
	|	annotation_elements ',' annotation
;

annotation:
		'@' T_STRING { compiler::call('zend_do_annotation', array($2, NULL)); }
	|	'@' T_STRING '(' common_scalar ')' { compiler::call('zend_do_annotation', array($2, $4)); }
	|	'@' T_STRING '(' { compiler::call('zend_do_annotation', array($2, array())); } annotation_defines ')'
;

annotation_defines:
		annotation_define
	|	annotation_defines ',' annotation_define
;

annotation_define:
		T_STRING { compiler::call('zend_do_annotation_define', array($1, NULL )); }
	|	T_STRING '=' static_scalar  { compiler::call('zend_do_annotation_define', array($1, $3)); }
;

operator_token:
		'+'								{ $$= '+'; }
	|	'-'								{ $$= '-'; }
	|	'*'								{ $$= '*'; }
	|	'/'								{ $$= '/'; }
	|	'%'								{ $$= '%'; }
	|	'!'								{ $$= '!'; }
	|	T_INC							{ $$= '++'; }
	|	T_DEC							{ $$= '--'; }
	|	T_COMPARE						{ $$= '__compare'; }
;

method_body:
		';' /* abstract method */		{ $$= MODIFIER_ABSTRACT; }
	|	'{' inner_statement_list '}'	{ $$= 0; }
;

variable_modifiers:
		non_empty_member_modifiers		{ $$= $1; }
	|	T_VAR							{ $$= MODIFIER_PUBLIC; compiler::error(E_STRICT, '[E_STRICT] '."var: Deprecated. Please use the public/private/protected modifiers"); }
;

method_modifiers:
		/* empty */							{ $$= MODIFIER_PULIC; }
	|	non_empty_member_modifiers			{ $$= $1; }
;

non_empty_member_modifiers:
		member_modifier								{ $$= $1; }
	|	non_empty_member_modifiers member_modifier	{ $$= $1 | $2; }
;

member_modifier:
		T_PUBLIC				{ $$= MODIFIER_PUBLIC; }
	|	T_PROTECTED				{ $$= MODIFIER_PROTECTED; }
	|	T_PRIVATE				{ $$= MODIFIER_PRIVATE; }
	|	T_STATIC				{ $$= MODIFIER_STATIC; }
	|	T_ABSTRACT				{ $$= MODIFIER_ABSTRACT; }
	|	T_FINAL					{ $$= MODIFIER_FINAL; }
;

class_variable_declaration:
		class_variable_declaration ',' T_VARIABLE					{ compiler::call('zend_do_declare_property', array($3, NULL, $GLOBALS['CG']['access_type'] )); }
	|	class_variable_declaration ',' T_VARIABLE '=' static_scalar	{ compiler::call('zend_do_declare_property', array($3, $5, $GLOBALS['CG']['access_type'] )); }
	|	T_VARIABLE						{ compiler::call('zend_do_declare_property', array($1, NULL, $GLOBALS['CG']['access_type'] )); }
	|	T_VARIABLE '=' static_scalar	{ compiler::call('zend_do_declare_property', array($1, $3, $GLOBALS['CG']['access_type'] )); }
;

class_constant_declaration:
		class_constant_declaration ',' T_STRING '=' static_scalar	{ compiler::call('zend_do_declare_class_constant', array($3, $5)); }
	|	T_CONST T_STRING '=' static_scalar	{ compiler::call('zend_do_declare_class_constant', array($2, $4)); }
;

echo_expr_list:	
		echo_expr_list ',' expr { compiler::call('zend_do_echo', array($3)); }
	|	expr					{ compiler::call('zend_do_echo', array($1)); }
;


for_expr:
		/* empty */			{ $$= TRUE; }
	|	non_empty_for_expr	{ $$= $1; }
;

non_empty_for_expr:
		non_empty_for_expr ','	{ compiler::call('zend_do_free', array($1 )); } expr { $$ = $4; }
	|	expr					{ $$ = $1; }
;

expr_without_variable:	
		T_LIST '(' { compiler::call('zend_do_list_init'); } assignment_list ')' '=' expr { compiler::call('zend_do_list_end', array($$, $7 )); }
	|	variable '=' expr		{ compiler::call('zend_check_writable_variable', array($1)); compiler::call('zend_do_end_variable_parse', array(BP_VAR_W, 0 )); compiler::call('zend_do_assign', array($$, $1, $3 )); }
	|	variable '=' '&' variable { compiler::call('zend_check_writable_variable', array($1)); compiler::call('zend_do_end_variable_parse', array(BP_VAR_W, 0 )); compiler::call('zend_do_end_variable_parse', array(BP_VAR_W, 0 )); compiler::call('zend_do_assign_ref', array($$, $1, $4 )); }
	|	variable '=' '&' T_NEW class_name_reference { compiler::error(E_STRICT, '[E_STRICT] '."Assigning the return value of new by reference is deprecated");  compiler::call('zend_check_writable_variable', array($1)); compiler::call('zend_do_extended_fcall_begin'); compiler::call('zend_do_begin_new_object', array($4, $5 )); } ctor_arguments { compiler::call('zend_do_end_new_object', array($3, $4, $7 )); compiler::call('zend_do_extended_fcall_end'); compiler::call('zend_do_end_variable_parse', array(BP_VAR_W, 0 )); compiler::call('zend_do_assign_ref', array($$, $1, $3 )); }
	|	T_NEW class_name_reference { compiler::call('zend_do_extended_fcall_begin'); compiler::call('zend_do_begin_new_object', array($1, $2 )); } ctor_arguments { compiler::call('zend_do_end_new_object', array($$, $1, $4 )); compiler::call('zend_do_extended_fcall_end');}
	|	T_CLONE expr { compiler::call('zend_do_clone', array($$, $2 )); }
	|	variable T_PLUS_EQUAL expr 		{ compiler::call('zend_check_writable_variable', array($1)); compiler::call('zend_do_end_variable_parse', array(BP_VAR_RW, 0 )); compiler::call('zend_do_binary_assign_op', array(ZEND_ASSIGN_ADD, $$, $1, $3 )); }
	|	variable T_MINUS_EQUAL expr		{ compiler::call('zend_check_writable_variable', array($1)); compiler::call('zend_do_end_variable_parse', array(BP_VAR_RW, 0 )); compiler::call('zend_do_binary_assign_op', array(ZEND_ASSIGN_SUB, $$, $1, $3 )); }
	|	variable T_MUL_EQUAL expr		{ compiler::call('zend_check_writable_variable', array($1)); compiler::call('zend_do_end_variable_parse', array(BP_VAR_RW, 0 )); compiler::call('zend_do_binary_assign_op', array(ZEND_ASSIGN_MUL, $$, $1, $3 )); }
	|	variable T_DIV_EQUAL expr		{ compiler::call('zend_check_writable_variable', array($1)); compiler::call('zend_do_end_variable_parse', array(BP_VAR_RW, 0 )); compiler::call('zend_do_binary_assign_op', array(ZEND_ASSIGN_DIV, $$, $1, $3 )); }
	|	variable T_CONCAT_EQUAL expr	{ compiler::call('zend_check_writable_variable', array($1)); compiler::call('zend_do_end_variable_parse', array(BP_VAR_RW, 0 )); compiler::call('zend_do_binary_assign_op', array(ZEND_ASSIGN_CONCAT, $$, $1, $3 )); }
	|	variable T_MOD_EQUAL expr		{ compiler::call('zend_check_writable_variable', array($1)); compiler::call('zend_do_end_variable_parse', array(BP_VAR_RW, 0 )); compiler::call('zend_do_binary_assign_op', array(ZEND_ASSIGN_MOD, $$, $1, $3 )); }
	|	variable T_AND_EQUAL expr		{ compiler::call('zend_check_writable_variable', array($1)); compiler::call('zend_do_end_variable_parse', array(BP_VAR_RW, 0 )); compiler::call('zend_do_binary_assign_op', array(ZEND_ASSIGN_BW_AND, $$, $1, $3 )); }
	|	variable T_OR_EQUAL expr 		{ compiler::call('zend_check_writable_variable', array($1)); compiler::call('zend_do_end_variable_parse', array(BP_VAR_RW, 0 )); compiler::call('zend_do_binary_assign_op', array(ZEND_ASSIGN_BW_OR, $$, $1, $3 )); }
	|	variable T_XOR_EQUAL expr 		{ compiler::call('zend_check_writable_variable', array($1)); compiler::call('zend_do_end_variable_parse', array(BP_VAR_RW, 0 )); compiler::call('zend_do_binary_assign_op', array(ZEND_ASSIGN_BW_XOR, $$, $1, $3 )); }
	|	variable T_SL_EQUAL expr		{ compiler::call('zend_check_writable_variable', array($1)); compiler::call('zend_do_end_variable_parse', array(BP_VAR_RW, 0 )); compiler::call('zend_do_binary_assign_op', array(ZEND_ASSIGN_SL, $$, $1, $3 )); } 
	|	variable T_SR_EQUAL expr		{ compiler::call('zend_check_writable_variable', array($1)); compiler::call('zend_do_end_variable_parse', array(BP_VAR_RW, 0 )); compiler::call('zend_do_binary_assign_op', array(ZEND_ASSIGN_SR, $$, $1, $3 )); } 
	|	rw_variable T_INC 				{ compiler::call('zend_do_post_incdec', array($$, $1, ZEND_POST_INC )); }
	|	T_INC rw_variable 				{ compiler::call('zend_do_pre_incdec', array($$, $2, ZEND_PRE_INC )); }
	|	rw_variable T_DEC 				{ compiler::call('zend_do_post_incdec', array($$, $1, ZEND_POST_DEC )); }
	|	T_DEC rw_variable 				{ compiler::call('zend_do_pre_incdec', array($$, $2, ZEND_PRE_DEC )); }
	|	expr T_BOOLEAN_OR 				{ compiler::call('zend_do_boolean_or_begin', array($1, $2 )); } expr { compiler::call('zend_do_boolean_or_end', array($$, $1, $4, $2 )); }
	|	expr T_BOOLEAN_AND 				{ compiler::call('zend_do_boolean_and_begin', array($1, $2 )); } expr { compiler::call('zend_do_boolean_and_end', array($$, $1, $4, $2 )); }  
	|	expr T_LOGICAL_OR 				{ compiler::call('zend_do_boolean_or_begin', array($1, $2 )); } expr { compiler::call('zend_do_boolean_or_end', array($$, $1, $4, $2 )); }
	|	expr T_LOGICAL_AND 				{ compiler::call('zend_do_boolean_and_begin', array($1, $2 )); } expr { compiler::call('zend_do_boolean_and_end', array($$, $1, $4, $2 )); }
	|	expr T_LOGICAL_XOR expr 		{ compiler::call('zend_do_binary_op', array(ZEND_BOOL_XOR, $$, $1, $3 )); }
	|	expr '|' expr	{ compiler::call('zend_do_binary_op', array(ZEND_BW_OR, $$, $1, $3 )); }
	|	expr '&' expr	{ compiler::call('zend_do_binary_op', array(ZEND_BW_AND, $$, $1, $3 )); }
	|	expr '^' expr	{ compiler::call('zend_do_binary_op', array(ZEND_BW_XOR, $$, $1, $3 )); }
	|	expr '.' expr 	{ compiler::call('zend_do_binary_op', array(ZEND_CONCAT, $$, $1, $3 )); }
	|	expr '+' expr 	{ compiler::call('zend_do_binary_op', array(ZEND_ADD, $$, $1, $3 )); }
	|	expr '-' expr 	{ compiler::call('zend_do_binary_op', array(ZEND_SUB, $$, $1, $3 )); }
	|	expr '*' expr	{ compiler::call('zend_do_binary_op', array(ZEND_MUL, $$, $1, $3 )); }
	|	expr '/' expr	{ compiler::call('zend_do_binary_op', array(ZEND_DIV, $$, $1, $3 )); }
	|	expr '%' expr 	{ compiler::call('zend_do_binary_op', array(ZEND_MOD, $$, $1, $3 )); }
	| 	expr T_SL expr	{ compiler::call('zend_do_binary_op', array(ZEND_SL, $$, $1, $3 )); }
	|	expr T_SR expr	{ compiler::call('zend_do_binary_op', array(ZEND_SR, $$, $1, $3 )); }
	|	'+' expr { compiler::call('zend_do_binary_op', array(ZEND_ADD, $$, 0, $2 )); }
	|	'-' expr { compiler::call('zend_do_binary_op', array(ZEND_SUB, $$, 0, $2 )); }
	|	'!' expr { compiler::call('zend_do_unary_op', array(ZEND_BOOL_NOT, $$, $2 )); }
	|	'~' expr { compiler::call('zend_do_unary_op', array(ZEND_BW_NOT, $$, $2 )); }
	|	expr T_IS_IDENTICAL expr		{ compiler::call('zend_do_binary_op', array(ZEND_IS_IDENTICAL, $$, $1, $3 )); }
	|	expr T_IS_NOT_IDENTICAL expr	{ compiler::call('zend_do_binary_op', array(ZEND_IS_NOT_IDENTICAL, $$, $1, $3 )); }
	|	expr T_IS_EQUAL expr			{ compiler::call('zend_do_binary_op', array(ZEND_IS_EQUAL, $$, $1, $3 )); }
	|	expr T_IS_NOT_EQUAL expr 		{ compiler::call('zend_do_binary_op', array(ZEND_IS_NOT_EQUAL, $$, $1, $3 )); }
	|	expr '<' expr 					{ compiler::call('zend_do_binary_op', array(ZEND_IS_SMALLER, $$, $1, $3 )); }
	|	expr T_IS_SMALLER_OR_EQUAL expr { compiler::call('zend_do_binary_op', array(ZEND_IS_SMALLER_OR_EQUAL, $$, $1, $3 )); }
	|	expr '>' expr 					{ compiler::call('zend_do_binary_op', array(ZEND_IS_SMALLER, $$, $3, $1 )); }
	|	expr T_IS_GREATER_OR_EQUAL expr { compiler::call('zend_do_binary_op', array(ZEND_IS_SMALLER_OR_EQUAL, $$, $3, $1 )); }
	|	expr T_COMPARE_ARROW expr { compiler::call('zend_do_binary_op', array(ZEND_COMPARE, $$, $3, $1 )); }
	|	expr T_INSTANCEOF class_name_reference { compiler::call('zend_do_instanceof', array($$, $1, $3, 0 )); }
	|	'(' expr ')' 	{ $$ = $2; }
	|	expr '?' { compiler::call('zend_do_begin_qm_op', array($1, $2 )); }
		expr ':' { compiler::call('zend_do_qm_true', array($4, $2, $5 )); }
		expr	 { compiler::call('zend_do_qm_false', array($$, $7, $2, $5 )); }
	|	internal_functions_in_yacc { $$ = $1; }
	|	T_INT_CAST expr 	{ compiler::call('zend_do_cast', array($$, $2, IS_LONG )); }
	|	T_DOUBLE_CAST expr 	{ compiler::call('zend_do_cast', array($$, $2, IS_DOUBLE )); }
	|	T_STRING_CAST expr	{ compiler::call('zend_do_cast', array($$, $2, IS_STRING )); } 
	|	T_ARRAY_CAST expr 	{ compiler::call('zend_do_cast', array($$, $2, IS_ARRAY )); }
	|	T_OBJECT_CAST expr 	{ compiler::call('zend_do_cast', array($$, $2, IS_OBJECT )); }
	|	T_BOOL_CAST expr	{ compiler::call('zend_do_cast', array($$, $2, IS_BOOL )); }
	|	T_UNSET_CAST expr	{ compiler::call('zend_do_cast', array($$, $2, IS_NULL )); }
	|	T_EXIT exit_expr	{ compiler::call('zend_do_exit', array($$, $2 )); }
	|	'@' { compiler::call('zend_do_begin_silence', array($1)); } expr { compiler::call('zend_do_end_silence', array($1 )); $$ = $3; }
	|	scalar				{ $$ = $1; }
	|	T_ARRAY '(' array_pair_list ')' { $$ = $3; }
	|	'`' encaps_list '`'		{ compiler::call('zend_do_shell_exec', array($$, $2 )); }
	|	T_PRINT expr  { compiler::call('zend_do_print', array($$, $2 )); }
;

function_call:
		T_STRING	'(' { $2->u_opline_num = compiler::call('zend_do_begin_function_call', array($1 )); }
				function_call_parameter_list
				')' { compiler::call('zend_do_end_function_call', array($1, $$, $4, 0, $2->u_opline_num )); compiler::call('zend_do_extended_fcall_end'); }
	|	fully_qualified_class_name T_DOUBLE_COLON T_STRING '(' { compiler::call('zend_do_begin_class_member_function_call', array($1, $3 )); } 
			function_call_parameter_list 
			')' { compiler::call('zend_do_end_function_call', array(NULL, $$, $6, 1, 1 )); compiler::call('zend_do_extended_fcall_end');}
	| fully_qualified_class_name T_DOUBLE_COLON variable_without_objects '(' { compiler::call('zend_do_end_variable_parse', array(BP_VAR_R, 0 )); compiler::call('zend_do_begin_class_member_function_call', array($1, $3 )); } 
			function_call_parameter_list 
			')' { compiler::call('zend_do_end_function_call', array(NULL, $$, $6, 1, 1 )); compiler::call('zend_do_extended_fcall_end');}
	|	variable_without_objects  '(' { compiler::call('zend_do_end_variable_parse', array(BP_VAR_R, 0 )); compiler::call('zend_do_begin_dynamic_function_call', array($1 )); }
			function_call_parameter_list ')'
			{ compiler::call('zend_do_end_function_call', array($1, $$, $4, 0, 1 )); compiler::call('zend_do_extended_fcall_end');}
;

fully_qualified_class_name:
		T_STRING { compiler::call('zend_do_fetch_class', array($$, $1 )); }
	|	T_CLASSNAME { compiler::call('zend_do_fetch_class', array($$, $1 )); }
;

class_name_reference:
		T_STRING				{ compiler::call('zend_do_fetch_class', array($$, $1 )); }
	|	T_CLASSNAME				{ compiler::call('zend_do_fetch_class', array($$, $1 )); }
	|	dynamic_class_name_reference	{ compiler::call('zend_do_end_variable_parse', array(BP_VAR_R, 0 )); compiler::call('zend_do_fetch_class', array($$, $1 )); }
;


dynamic_class_name_reference:
		base_variable T_OBJECT_OPERATOR { compiler::call('zend_do_push_object', array($1 )); }
			object_property { compiler::call('zend_do_push_object', array($4 )); compiler::call('zend_do_declare_implicit_property'); } dynamic_class_name_variable_properties
			{ compiler::call('zend_do_pop_object', array($$ )); $$->u_EA_type = ZEND_PARSED_MEMBER; }
	|	base_variable { $$ = $1; }
;


dynamic_class_name_variable_properties:
		dynamic_class_name_variable_properties dynamic_class_name_variable_property
	|	/* empty */
;


dynamic_class_name_variable_property:
		T_OBJECT_OPERATOR object_property { compiler::call('zend_do_push_object', array($2 )); compiler::call('zend_do_declare_implicit_property'); }
;

exit_expr:
		/* empty */	{ $$->op_type = IS_UNUSED; }	
	|	'(' ')'		{ $$->op_type = IS_UNUSED; }	
	|	'(' expr ')'	{ $$ = $2; }
;


ctor_arguments:
		/* empty */ { $$->op_type = IS_UNUSED; }
	|	'(' function_call_parameter_list ')' { $$ = $2; }
	|	'(' function_call_parameter_list ')' '{' { compiler::call('zend_do_begin_instance_creation'); } class_statement_list { compiler::call('zend_do_end_instance_creation'); } '}' { $$ = $2; }
;


common_scalar:
		T_LNUMBER 					{ $$= $1; }
	|	T_DNUMBER 					{ $$= $1; }
	|	T_CONSTANT_ENCAPSED_STRING	{ $$= $1; }
	|	T_LINE 						{ $$= $1; }
	|	T_FILE 						{ $$= $1; }
	|	T_CLASS_C					{ $$= $1; }
	|	T_METHOD_C					{ $$= $1; }
	|	T_FUNC_C					{ $$= $1; }
;


static_scalar: /* compile-time evaluated scalars */
		common_scalar				{ $$ = $1; }
	|	T_STRING 					{ compiler::call('zend_do_fetch_constant', array($$, NULL, $1, ZEND_CT)); }
	|	'+' static_scalar			{ $$ = $2; }
	|	'-' static_scalar			{ $$ = -1 * $2; } 
	|	T_ARRAY '(' static_array_pair_list ')' { $$ = $3; }
	|	static_class_constant 		{ $$ = $1; }
;

static_class_constant:
		T_STRING T_DOUBLE_COLON T_STRING { compiler::call('zend_do_fetch_constant', array($$, $1, $3, ZEND_CT )); }
;

scalar:
		T_STRING 				{ compiler::call('zend_do_fetch_constant', array($$, NULL, $1, ZEND_RT )); }
	|	T_STRING_VARNAME		{ $$ = $1; }
	|	class_constant			{ $$ = $1; }
	|	common_scalar			{ $$ = $1; }
	|	'"' encaps_list '"' 	{ $$ = $2; }
	|	'\'' encaps_list '\''	{ $$ = $2; }
	|	T_START_HEREDOC encaps_list T_END_HEREDOC { $$ = $2; compiler::call('zend_do_end_heredoc'); }
;


static_array_pair_list:
		/* empty */ { $$= array(); }
	|	non_empty_static_array_pair_list possible_comma	{ $$ = $1; }
;

possible_comma:
		/* empty */
	|	','
;

non_empty_static_array_pair_list:
		non_empty_static_array_pair_list ',' static_scalar T_DOUBLE_ARROW static_scalar	{ compiler::call('zend_do_add_static_array_element', array($$, $3, $5)); }
	|	non_empty_static_array_pair_list ',' static_scalar { compiler::call('zend_do_add_static_array_element', array($$, NULL, $3)); }
	|	static_scalar T_DOUBLE_ARROW static_scalar { $$->op_type = IS_CONST; $$->u_constant= array(); compiler::call('zend_do_add_static_array_element', array($$, $1, $3)); }
	|	static_scalar { $$->op_type = IS_CONST; $$->u_constant= array(); compiler::call('zend_do_add_static_array_element', array($$, NULL, $1)); }
;

expr:
		r_variable					{ $$= $1; }
	|	expr_without_variable		{ $$= $1; }
;


r_variable:
	variable { compiler::call('zend_do_end_variable_parse', array(BP_VAR_R, 0 )); $$ = $1; }
;


w_variable:
	variable	{ compiler::call('zend_do_end_variable_parse', array(BP_VAR_W, 0 )); $$ = $1; }
				{ compiler::call('zend_check_writable_variable', array($1)); }
;

rw_variable:
	variable	{ compiler::call('zend_do_end_variable_parse', array(BP_VAR_RW, 0 )); $$ = $1; }
				{ compiler::call('zend_check_writable_variable', array($1)); }
;

variable:
		base_variable_with_function_calls T_OBJECT_OPERATOR { compiler::call('zend_do_push_object', array($1 )); }
			object_property { compiler::call('zend_do_push_object', array($4 )); } method_or_not variable_properties
			{ compiler::call('zend_do_pop_object', array($$ )); $$->u_EA_type = $1->u_EA_type | ($7->u_EA_type ? $7->u_EA_type : $6->u_EA_type); }
	|	base_variable_with_function_calls { $$ = $1; }
;

variable_properties:
		variable_properties variable_property { $$->u_EA_type = $2->u_EA_type; }
	|	/* empty */ { $$->u_EA_type = 0; }
;


variable_property:
		T_OBJECT_OPERATOR object_property { compiler::call('zend_do_push_object', array($2 )); } method_or_not { $$->u_EA_type = $4->u_EA_type; }
;

method_or_not:
		'(' { compiler::call('zend_do_pop_object', array($1 )); compiler::call('zend_do_begin_method_call', array($1 )); }
				function_call_parameter_list ')' 
			{ compiler::call('zend_do_end_function_call', array($1, $$, $3, 1, 1 )); compiler::call('zend_do_extended_fcall_end');
			  compiler::call('zend_do_push_object', array($$ )); $$->u_EA_type = ZEND_PARSED_METHOD_CALL; }
	|	/* empty */ { compiler::call('zend_do_declare_implicit_property'); $$->u_EA_type = ZEND_PARSED_MEMBER; }
;

variable_without_objects:
		reference_variable { $$ = $1; }
	|	simple_indirect_reference reference_variable { compiler::call('zend_do_indirect_references', array($$, $1, $2 )); }
;

static_member:
		fully_qualified_class_name T_DOUBLE_COLON variable_without_objects { $$ = $3; compiler::call('zend_do_fetch_static_member', array($$, $1 )); }
;


base_variable_with_function_calls:
		base_variable		{ $$ = $1; }
	|	function_call { compiler::call('zend_do_begin_variable_parse'); $$ = $1; $$->u_EA_type = ZEND_PARSED_FUNCTION_CALL; }
;


base_variable:
		reference_variable { $$ = $1; $$->u_EA_type = ZEND_PARSED_VARIABLE; }
	|	simple_indirect_reference reference_variable { compiler::call('zend_do_indirect_references', array($$, $1, $2 )); $$->u_EA_type = ZEND_PARSED_VARIABLE; }
	|	static_member { $$ = $1; $$->u_EA_type = ZEND_PARSED_STATIC_MEMBER; }
;
	
reference_variable:
		reference_variable '[' dim_offset ']'	{ compiler::call('fetch_array_dim', array($$, $1, $3 )); }
	|	reference_variable '{' expr '}'		{ compiler::call('fetch_string_offset', array($$, $1, $3 )); }
	|	compound_variable			{ compiler::call('zend_do_begin_variable_parse'); compiler::call('fetch_simple_variable', array($$, $1, 1 )); }
;
	

compound_variable:
		T_VARIABLE			{ $$ = $1; }
	|	'$' '{' expr '}'	{ $$ = $3; }
;

dim_offset:
		/* empty */		{ $$= NULL; }
	|	expr			{ $$= $1; }
;


object_property:
		object_dim_list { $$ = $1; }
	|	variable_without_objects { compiler::call('zend_do_end_variable_parse', array(BP_VAR_R, 0 )); } {  compiler::call('zend_do_pop_object', array($tmp_znode ));  compiler::call('zend_do_fetch_property', array($$, $tmp_znode, $1 ));}
;

object_dim_list:
		object_dim_list '[' dim_offset ']'	{ compiler::call('fetch_array_dim', array($$, $1, $3 )); }
	|	object_dim_list '{' expr '}'		{ compiler::call('fetch_string_offset', array($$, $1, $3 )); }
	|	variable_name {  compiler::call('zend_do_pop_object', array($tmp_znode ));  compiler::call('zend_do_fetch_property', array($$, $tmp_znode, $1 ));}
;

variable_name:
		T_STRING		{ $$ = $1; }
	|	'{' expr '}'	{ $$ = $2; }
;

simple_indirect_reference:
		'$' { $$->u_constant_value_lval = 1; }
	|	simple_indirect_reference '$' { $$->u_constant_value_lval++; }
;

assignment_list:
		assignment_list ',' assignment_list_element
	|	assignment_list_element
;


assignment_list_element:
		variable								{ compiler::call('zend_do_add_list_element', array($1 )); }
	|	T_LIST '(' { compiler::call('zend_do_new_list_begin'); } assignment_list ')'	{ compiler::call('zend_do_new_list_end'); }
	|	/* empty */							{ compiler::call('zend_do_add_list_element', array(NULL )); }
;


array_pair_list:
		/* empty */ { compiler::call('zend_do_init_array', array($$, NULL, NULL, 0 )); }
	|	non_empty_array_pair_list possible_comma	{ $$ = $1; }
;

non_empty_array_pair_list:
		non_empty_array_pair_list ',' expr T_DOUBLE_ARROW expr	{ compiler::call('zend_do_add_array_element', array($$, $5, $3, 0 )); }
	|	non_empty_array_pair_list ',' expr			{ compiler::call('zend_do_add_array_element', array($$, $3, NULL, 0 )); }
	|	expr T_DOUBLE_ARROW expr	{ compiler::call('zend_do_init_array', array($$, $3, $1, 0 )); }
	|	expr 				{ compiler::call('zend_do_init_array', array($$, $1, NULL, 0 )); }
	|	non_empty_array_pair_list ',' expr T_DOUBLE_ARROW '&' w_variable { compiler::call('zend_do_add_array_element', array($$, $6, $3, 1 )); }
	|	non_empty_array_pair_list ',' '&' w_variable { compiler::call('zend_do_add_array_element', array($$, $4, NULL, 1 )); }
	|	expr T_DOUBLE_ARROW '&' w_variable	{ compiler::call('zend_do_init_array', array($$, $4, $1, 1 )); }
	|	'&' w_variable 			{ compiler::call('zend_do_init_array', array($$, $2, NULL, 1 )); }
;

encaps_list:
		encaps_list encaps_var { compiler::call('zend_do_end_variable_parse', array(BP_VAR_R, 0 ));  compiler::call('zend_do_add_variable', array($$, $1, $2 )); }
	|	encaps_list T_STRING			{ compiler::call('zend_do_add_string', array($$, $1, $2 )); }
	|	encaps_list T_NUM_STRING		{ compiler::call('zend_do_add_string', array($$, $1, $2 )); }
	|	encaps_list T_ENCAPSED_AND_WHITESPACE	{ compiler::call('zend_do_add_string', array($$, $1, $2 )); }
	|	encaps_list T_CHARACTER 		{ compiler::call('zend_do_add_char', array($$, $1, $2 )); }
	|	encaps_list T_BAD_CHARACTER		{ compiler::call('zend_do_add_string', array($$, $1, $2 )); }
	|	encaps_list '['		{ $2->u_constant_value_lval = '['; compiler::call('zend_do_add_char', array($$, $1, $2 )); }
	|	encaps_list ']'		{ $2->u_constant_value_lval = ']'; compiler::call('zend_do_add_char', array($$, $1, $2 )); }
	|	encaps_list '{'		{ $2->u_constant_value_lval = '{'; compiler::call('zend_do_add_char', array($$, $1, $2 )); }
	|	encaps_list '}'		{ $2->u_constant_value_lval = '}'; compiler::call('zend_do_add_char', array($$, $1, $2 )); }
	|	encaps_list T_OBJECT_OPERATOR  {  $2->u_constant_value_lval = '-';  compiler::call('zend_do_add_char', array($tmp, $1, $2 ));  $2->u_constant_value_lval = '>'; compiler::call('zend_do_add_char', array($$, $tmp, $2 )); }
	|	/* empty */			{ compiler::call('zend_do_init_string', array($$ )); }

;



encaps_var:
		T_VARIABLE { compiler::call('zend_do_begin_variable_parse'); compiler::call('fetch_simple_variable', array($$, $1, 1 )); }
	|	T_VARIABLE '[' { compiler::call('zend_do_begin_variable_parse'); } encaps_var_offset ']'	{ compiler::call('fetch_array_begin', array($$, $1, $4 )); }
	|	T_VARIABLE T_OBJECT_OPERATOR T_STRING { compiler::call('zend_do_begin_variable_parse'); compiler::call('fetch_simple_variable', array($2, $1, 1 )); compiler::call('zend_do_fetch_property', array($$, $2, $3 )); }
	|	T_DOLLAR_OPEN_CURLY_BRACES expr '}' { compiler::call('zend_do_begin_variable_parse');  compiler::call('fetch_simple_variable', array($$, $2, 1 )); }
	|	T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '[' expr ']' '}' { compiler::call('zend_do_begin_variable_parse');  compiler::call('fetch_array_begin', array($$, $2, $4 )); }
	|	T_CURLY_OPEN variable '}' { $$ = $2; }
;


encaps_var_offset:
		T_STRING		{ $$ = $1; }
	|	T_NUM_STRING	{ $$ = $1; }
	|	T_VARIABLE		{ compiler::call('fetch_simple_variable', array($$, $1, 1 )); }
;


internal_functions_in_yacc:
		T_ISSET '(' isset_variables ')' { $$ = $3; }
	|	T_EMPTY '(' variable ')'	{ compiler::call('zend_do_isset_or_isempty', array(ZEND_ISEMPTY, $$, $3 )); }
	|	T_INCLUDE expr 			{ compiler::call('zend_do_include_or_eval', array(ZEND_INCLUDE, $$, $2 )); }
	|	T_INCLUDE_ONCE expr 	{ compiler::call('zend_do_include_or_eval', array(ZEND_INCLUDE_ONCE, $$, $2 )); }
	|	T_EVAL '(' expr ')' 	{ compiler::call('zend_do_include_or_eval', array(ZEND_EVAL, $$, $3 )); }
	|	T_REQUIRE expr			{ compiler::call('zend_do_include_or_eval', array(ZEND_REQUIRE, $$, $2 )); }
	|	T_REQUIRE_ONCE expr		{ compiler::call('zend_do_include_or_eval', array(ZEND_REQUIRE_ONCE, $$, $2 )); }
;

isset_variables:
		variable 				{ compiler::call('zend_do_isset_or_isempty', array(ZEND_ISSET, $$, $1 )); }
	|	isset_variables ',' { compiler::call('zend_do_boolean_and_begin', array($1, $2 )); } variable { compiler::call('zend_do_isset_or_isempty', array(ZEND_ISSET, $tmp, $4 )); compiler::call('zend_do_boolean_and_end', array($$, $1, $tmp, $2 )); }
;	

class_constant:
		fully_qualified_class_name T_DOUBLE_COLON T_STRING { compiler::call('zend_do_fetch_constant', array($$, $1, $3, ZEND_RT )); }
;

%%
}
