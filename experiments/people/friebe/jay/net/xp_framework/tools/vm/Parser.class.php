<?php
 // created by jay 0.8 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de
 // modified by alan@akbkhome.com to try to generate php!
 // modified by cellog@users.sourceforge.net to fit PEAR CS
 // %token constants

  define ('TOKEN_T_INCLUDE',  262);
  $GLOBALS['_TOKEN_DEBUG'][262] = 'T_INCLUDE';
  define ('TOKEN_T_INCLUDE_ONCE',  261);
  $GLOBALS['_TOKEN_DEBUG'][261] = 'T_INCLUDE_ONCE';
  define ('TOKEN_T_EVAL',  260);
  $GLOBALS['_TOKEN_DEBUG'][260] = 'T_EVAL';
  define ('TOKEN_T_REQUIRE',  259);
  $GLOBALS['_TOKEN_DEBUG'][259] = 'T_REQUIRE';
  define ('TOKEN_T_REQUIRE_ONCE',  258);
  $GLOBALS['_TOKEN_DEBUG'][258] = 'T_REQUIRE_ONCE';
  define ('TOKEN_T_LOGICAL_OR',  263);
  $GLOBALS['_TOKEN_DEBUG'][263] = 'T_LOGICAL_OR';
  define ('TOKEN_T_LOGICAL_XOR',  264);
  $GLOBALS['_TOKEN_DEBUG'][264] = 'T_LOGICAL_XOR';
  define ('TOKEN_T_LOGICAL_AND',  265);
  $GLOBALS['_TOKEN_DEBUG'][265] = 'T_LOGICAL_AND';
  define ('TOKEN_T_PRINT',  266);
  $GLOBALS['_TOKEN_DEBUG'][266] = 'T_PRINT';
  define ('TOKEN_T_PLUS_EQUAL',  277);
  $GLOBALS['_TOKEN_DEBUG'][277] = 'T_PLUS_EQUAL';
  define ('TOKEN_T_MINUS_EQUAL',  276);
  $GLOBALS['_TOKEN_DEBUG'][276] = 'T_MINUS_EQUAL';
  define ('TOKEN_T_MUL_EQUAL',  275);
  $GLOBALS['_TOKEN_DEBUG'][275] = 'T_MUL_EQUAL';
  define ('TOKEN_T_DIV_EQUAL',  274);
  $GLOBALS['_TOKEN_DEBUG'][274] = 'T_DIV_EQUAL';
  define ('TOKEN_T_CONCAT_EQUAL',  273);
  $GLOBALS['_TOKEN_DEBUG'][273] = 'T_CONCAT_EQUAL';
  define ('TOKEN_T_MOD_EQUAL',  272);
  $GLOBALS['_TOKEN_DEBUG'][272] = 'T_MOD_EQUAL';
  define ('TOKEN_T_AND_EQUAL',  271);
  $GLOBALS['_TOKEN_DEBUG'][271] = 'T_AND_EQUAL';
  define ('TOKEN_T_OR_EQUAL',  270);
  $GLOBALS['_TOKEN_DEBUG'][270] = 'T_OR_EQUAL';
  define ('TOKEN_T_XOR_EQUAL',  269);
  $GLOBALS['_TOKEN_DEBUG'][269] = 'T_XOR_EQUAL';
  define ('TOKEN_T_SL_EQUAL',  268);
  $GLOBALS['_TOKEN_DEBUG'][268] = 'T_SL_EQUAL';
  define ('TOKEN_T_SR_EQUAL',  267);
  $GLOBALS['_TOKEN_DEBUG'][267] = 'T_SR_EQUAL';
  define ('TOKEN_T_BOOLEAN_OR',  278);
  $GLOBALS['_TOKEN_DEBUG'][278] = 'T_BOOLEAN_OR';
  define ('TOKEN_T_BOOLEAN_AND',  279);
  $GLOBALS['_TOKEN_DEBUG'][279] = 'T_BOOLEAN_AND';
  define ('TOKEN_T_IS_EQUAL',  283);
  $GLOBALS['_TOKEN_DEBUG'][283] = 'T_IS_EQUAL';
  define ('TOKEN_T_IS_NOT_EQUAL',  282);
  $GLOBALS['_TOKEN_DEBUG'][282] = 'T_IS_NOT_EQUAL';
  define ('TOKEN_T_IS_IDENTICAL',  281);
  $GLOBALS['_TOKEN_DEBUG'][281] = 'T_IS_IDENTICAL';
  define ('TOKEN_T_IS_NOT_IDENTICAL',  280);
  $GLOBALS['_TOKEN_DEBUG'][280] = 'T_IS_NOT_IDENTICAL';
  define ('TOKEN_T_IS_SMALLER_OR_EQUAL',  285);
  $GLOBALS['_TOKEN_DEBUG'][285] = 'T_IS_SMALLER_OR_EQUAL';
  define ('TOKEN_T_IS_GREATER_OR_EQUAL',  284);
  $GLOBALS['_TOKEN_DEBUG'][284] = 'T_IS_GREATER_OR_EQUAL';
  define ('TOKEN_T_COMPARE_ARROW',  257);
  $GLOBALS['_TOKEN_DEBUG'][257] = 'T_COMPARE_ARROW';
  define ('TOKEN_T_SL',  287);
  $GLOBALS['_TOKEN_DEBUG'][287] = 'T_SL';
  define ('TOKEN_T_SR',  286);
  $GLOBALS['_TOKEN_DEBUG'][286] = 'T_SR';
  define ('TOKEN_T_INSTANCEOF',  288);
  $GLOBALS['_TOKEN_DEBUG'][288] = 'T_INSTANCEOF';
  define ('TOKEN_T_INC',  297);
  $GLOBALS['_TOKEN_DEBUG'][297] = 'T_INC';
  define ('TOKEN_T_DEC',  296);
  $GLOBALS['_TOKEN_DEBUG'][296] = 'T_DEC';
  define ('TOKEN_T_INT_CAST',  295);
  $GLOBALS['_TOKEN_DEBUG'][295] = 'T_INT_CAST';
  define ('TOKEN_T_DOUBLE_CAST',  294);
  $GLOBALS['_TOKEN_DEBUG'][294] = 'T_DOUBLE_CAST';
  define ('TOKEN_T_STRING_CAST',  293);
  $GLOBALS['_TOKEN_DEBUG'][293] = 'T_STRING_CAST';
  define ('TOKEN_T_ARRAY_CAST',  292);
  $GLOBALS['_TOKEN_DEBUG'][292] = 'T_ARRAY_CAST';
  define ('TOKEN_T_OBJECT_CAST',  291);
  $GLOBALS['_TOKEN_DEBUG'][291] = 'T_OBJECT_CAST';
  define ('TOKEN_T_BOOL_CAST',  290);
  $GLOBALS['_TOKEN_DEBUG'][290] = 'T_BOOL_CAST';
  define ('TOKEN_T_UNSET_CAST',  289);
  $GLOBALS['_TOKEN_DEBUG'][289] = 'T_UNSET_CAST';
  define ('TOKEN_T_NEW',  299);
  $GLOBALS['_TOKEN_DEBUG'][299] = 'T_NEW';
  define ('TOKEN_T_CLONE',  298);
  $GLOBALS['_TOKEN_DEBUG'][298] = 'T_CLONE';
  define ('TOKEN_T_ELSEIF',  302);
  $GLOBALS['_TOKEN_DEBUG'][302] = 'T_ELSEIF';
  define ('TOKEN_T_ELSE',  303);
  $GLOBALS['_TOKEN_DEBUG'][303] = 'T_ELSE';
  define ('TOKEN_T_ENDIF',  304);
  $GLOBALS['_TOKEN_DEBUG'][304] = 'T_ENDIF';
  define ('TOKEN_T_STATIC',  346);
  $GLOBALS['_TOKEN_DEBUG'][346] = 'T_STATIC';
  define ('TOKEN_T_ABSTRACT',  345);
  $GLOBALS['_TOKEN_DEBUG'][345] = 'T_ABSTRACT';
  define ('TOKEN_T_FINAL',  344);
  $GLOBALS['_TOKEN_DEBUG'][344] = 'T_FINAL';
  define ('TOKEN_T_PRIVATE',  343);
  $GLOBALS['_TOKEN_DEBUG'][343] = 'T_PRIVATE';
  define ('TOKEN_T_PROTECTED',  342);
  $GLOBALS['_TOKEN_DEBUG'][342] = 'T_PROTECTED';
  define ('TOKEN_T_PUBLIC',  341);
  $GLOBALS['_TOKEN_DEBUG'][341] = 'T_PUBLIC';
  define ('TOKEN_T_EXIT',  300);
  $GLOBALS['_TOKEN_DEBUG'][300] = 'T_EXIT';
  define ('TOKEN_T_IF',  301);
  $GLOBALS['_TOKEN_DEBUG'][301] = 'T_IF';
  define ('TOKEN_T_LNUMBER',  305);
  $GLOBALS['_TOKEN_DEBUG'][305] = 'T_LNUMBER';
  define ('TOKEN_T_DNUMBER',  306);
  $GLOBALS['_TOKEN_DEBUG'][306] = 'T_DNUMBER';
  define ('TOKEN_T_STRING',  307);
  $GLOBALS['_TOKEN_DEBUG'][307] = 'T_STRING';
  define ('TOKEN_T_STRING_VARNAME',  308);
  $GLOBALS['_TOKEN_DEBUG'][308] = 'T_STRING_VARNAME';
  define ('TOKEN_T_VARIABLE',  309);
  $GLOBALS['_TOKEN_DEBUG'][309] = 'T_VARIABLE';
  define ('TOKEN_T_NUM_STRING',  310);
  $GLOBALS['_TOKEN_DEBUG'][310] = 'T_NUM_STRING';
  define ('TOKEN_T_INLINE_HTML',  311);
  $GLOBALS['_TOKEN_DEBUG'][311] = 'T_INLINE_HTML';
  define ('TOKEN_T_CHARACTER',  312);
  $GLOBALS['_TOKEN_DEBUG'][312] = 'T_CHARACTER';
  define ('TOKEN_T_BAD_CHARACTER',  313);
  $GLOBALS['_TOKEN_DEBUG'][313] = 'T_BAD_CHARACTER';
  define ('TOKEN_T_ENCAPSED_AND_WHITESPACE',  314);
  $GLOBALS['_TOKEN_DEBUG'][314] = 'T_ENCAPSED_AND_WHITESPACE';
  define ('TOKEN_T_CONSTANT_ENCAPSED_STRING',  315);
  $GLOBALS['_TOKEN_DEBUG'][315] = 'T_CONSTANT_ENCAPSED_STRING';
  define ('TOKEN_T_ECHO',  316);
  $GLOBALS['_TOKEN_DEBUG'][316] = 'T_ECHO';
  define ('TOKEN_T_DO',  317);
  $GLOBALS['_TOKEN_DEBUG'][317] = 'T_DO';
  define ('TOKEN_T_WHILE',  318);
  $GLOBALS['_TOKEN_DEBUG'][318] = 'T_WHILE';
  define ('TOKEN_T_ENDWHILE',  319);
  $GLOBALS['_TOKEN_DEBUG'][319] = 'T_ENDWHILE';
  define ('TOKEN_T_FOR',  320);
  $GLOBALS['_TOKEN_DEBUG'][320] = 'T_FOR';
  define ('TOKEN_T_ENDFOR',  321);
  $GLOBALS['_TOKEN_DEBUG'][321] = 'T_ENDFOR';
  define ('TOKEN_T_FOREACH',  322);
  $GLOBALS['_TOKEN_DEBUG'][322] = 'T_FOREACH';
  define ('TOKEN_T_ENDFOREACH',  323);
  $GLOBALS['_TOKEN_DEBUG'][323] = 'T_ENDFOREACH';
  define ('TOKEN_T_DECLARE',  324);
  $GLOBALS['_TOKEN_DEBUG'][324] = 'T_DECLARE';
  define ('TOKEN_T_ENDDECLARE',  325);
  $GLOBALS['_TOKEN_DEBUG'][325] = 'T_ENDDECLARE';
  define ('TOKEN_T_AS',  326);
  $GLOBALS['_TOKEN_DEBUG'][326] = 'T_AS';
  define ('TOKEN_T_SWITCH',  327);
  $GLOBALS['_TOKEN_DEBUG'][327] = 'T_SWITCH';
  define ('TOKEN_T_ENDSWITCH',  328);
  $GLOBALS['_TOKEN_DEBUG'][328] = 'T_ENDSWITCH';
  define ('TOKEN_T_CASE',  329);
  $GLOBALS['_TOKEN_DEBUG'][329] = 'T_CASE';
  define ('TOKEN_T_DEFAULT',  330);
  $GLOBALS['_TOKEN_DEBUG'][330] = 'T_DEFAULT';
  define ('TOKEN_T_BREAK',  331);
  $GLOBALS['_TOKEN_DEBUG'][331] = 'T_BREAK';
  define ('TOKEN_T_CONTINUE',  332);
  $GLOBALS['_TOKEN_DEBUG'][332] = 'T_CONTINUE';
  define ('TOKEN_T_FUNCTION',  333);
  $GLOBALS['_TOKEN_DEBUG'][333] = 'T_FUNCTION';
  define ('TOKEN_T_CONST',  334);
  $GLOBALS['_TOKEN_DEBUG'][334] = 'T_CONST';
  define ('TOKEN_T_RETURN',  335);
  $GLOBALS['_TOKEN_DEBUG'][335] = 'T_RETURN';
  define ('TOKEN_T_TRY',  336);
  $GLOBALS['_TOKEN_DEBUG'][336] = 'T_TRY';
  define ('TOKEN_T_CATCH',  337);
  $GLOBALS['_TOKEN_DEBUG'][337] = 'T_CATCH';
  define ('TOKEN_T_THROW',  338);
  $GLOBALS['_TOKEN_DEBUG'][338] = 'T_THROW';
  define ('TOKEN_T_USE',  339);
  $GLOBALS['_TOKEN_DEBUG'][339] = 'T_USE';
  define ('TOKEN_T_GLOBAL',  340);
  $GLOBALS['_TOKEN_DEBUG'][340] = 'T_GLOBAL';
  define ('TOKEN_T_VAR',  347);
  $GLOBALS['_TOKEN_DEBUG'][347] = 'T_VAR';
  define ('TOKEN_T_UNSET',  348);
  $GLOBALS['_TOKEN_DEBUG'][348] = 'T_UNSET';
  define ('TOKEN_T_ISSET',  349);
  $GLOBALS['_TOKEN_DEBUG'][349] = 'T_ISSET';
  define ('TOKEN_T_EMPTY',  350);
  $GLOBALS['_TOKEN_DEBUG'][350] = 'T_EMPTY';
  define ('TOKEN_T_CLASS',  351);
  $GLOBALS['_TOKEN_DEBUG'][351] = 'T_CLASS';
  define ('TOKEN_T_INTERFACE',  352);
  $GLOBALS['_TOKEN_DEBUG'][352] = 'T_INTERFACE';
  define ('TOKEN_T_EXTENDS',  353);
  $GLOBALS['_TOKEN_DEBUG'][353] = 'T_EXTENDS';
  define ('TOKEN_T_IMPLEMENTS',  354);
  $GLOBALS['_TOKEN_DEBUG'][354] = 'T_IMPLEMENTS';
  define ('TOKEN_T_OBJECT_OPERATOR',  355);
  $GLOBALS['_TOKEN_DEBUG'][355] = 'T_OBJECT_OPERATOR';
  define ('TOKEN_T_DOUBLE_ARROW',  356);
  $GLOBALS['_TOKEN_DEBUG'][356] = 'T_DOUBLE_ARROW';
  define ('TOKEN_T_LIST',  357);
  $GLOBALS['_TOKEN_DEBUG'][357] = 'T_LIST';
  define ('TOKEN_T_ARRAY',  358);
  $GLOBALS['_TOKEN_DEBUG'][358] = 'T_ARRAY';
  define ('TOKEN_T_CLASS_C',  359);
  $GLOBALS['_TOKEN_DEBUG'][359] = 'T_CLASS_C';
  define ('TOKEN_T_METHOD_C',  360);
  $GLOBALS['_TOKEN_DEBUG'][360] = 'T_METHOD_C';
  define ('TOKEN_T_FUNC_C',  361);
  $GLOBALS['_TOKEN_DEBUG'][361] = 'T_FUNC_C';
  define ('TOKEN_T_LINE',  362);
  $GLOBALS['_TOKEN_DEBUG'][362] = 'T_LINE';
  define ('TOKEN_T_FILE',  363);
  $GLOBALS['_TOKEN_DEBUG'][363] = 'T_FILE';
  define ('TOKEN_T_COMMENT',  364);
  $GLOBALS['_TOKEN_DEBUG'][364] = 'T_COMMENT';
  define ('TOKEN_T_DOC_COMMENT',  365);
  $GLOBALS['_TOKEN_DEBUG'][365] = 'T_DOC_COMMENT';
  define ('TOKEN_T_OPEN_TAG',  366);
  $GLOBALS['_TOKEN_DEBUG'][366] = 'T_OPEN_TAG';
  define ('TOKEN_T_OPEN_TAG_WITH_ECHO',  367);
  $GLOBALS['_TOKEN_DEBUG'][367] = 'T_OPEN_TAG_WITH_ECHO';
  define ('TOKEN_T_CLOSE_TAG',  368);
  $GLOBALS['_TOKEN_DEBUG'][368] = 'T_CLOSE_TAG';
  define ('TOKEN_T_WHITESPACE',  369);
  $GLOBALS['_TOKEN_DEBUG'][369] = 'T_WHITESPACE';
  define ('TOKEN_T_START_HEREDOC',  370);
  $GLOBALS['_TOKEN_DEBUG'][370] = 'T_START_HEREDOC';
  define ('TOKEN_T_END_HEREDOC',  371);
  $GLOBALS['_TOKEN_DEBUG'][371] = 'T_END_HEREDOC';
  define ('TOKEN_T_DOLLAR_OPEN_CURLY_BRACES',  372);
  $GLOBALS['_TOKEN_DEBUG'][372] = 'T_DOLLAR_OPEN_CURLY_BRACES';
  define ('TOKEN_T_CURLY_OPEN',  373);
  $GLOBALS['_TOKEN_DEBUG'][373] = 'T_CURLY_OPEN';
  define ('TOKEN_T_DOUBLE_COLON',  374);
  $GLOBALS['_TOKEN_DEBUG'][374] = 'T_DOUBLE_COLON';
  define ('TOKEN_T_HALT_COMPILER',  375);
  $GLOBALS['_TOKEN_DEBUG'][375] = 'T_HALT_COMPILER';
  define ('TOKEN_T_CLASSNAME',  376);
  $GLOBALS['_TOKEN_DEBUG'][376] = 'T_CLASSNAME';
  define ('TOKEN_T_PACKAGE',  377);
  $GLOBALS['_TOKEN_DEBUG'][377] = 'T_PACKAGE';
  define ('TOKEN_T_ENUM',  378);
  $GLOBALS['_TOKEN_DEBUG'][378] = 'T_ENUM';
  define ('TOKEN_T_OPERATOR',  379);
  $GLOBALS['_TOKEN_DEBUG'][379] = 'T_OPERATOR';
  define ('TOKEN_T_THROWS',  380);
  $GLOBALS['_TOKEN_DEBUG'][380] = 'T_THROWS';
  define ('TOKEN_T_COMPARE',  381);
  $GLOBALS['_TOKEN_DEBUG'][381] = 'T_COMPARE';
  define ('TOKEN_T_IMPORT',  382);
  $GLOBALS['_TOKEN_DEBUG'][382] = 'T_IMPORT';
  define ('TOKEN_T_VOID',  383);
  $GLOBALS['_TOKEN_DEBUG'][383] = 'T_VOID';
  define ('TOKEN_T_CONSTRUCT',  384);
  $GLOBALS['_TOKEN_DEBUG'][384] = 'T_CONSTRUCT';
  define ('TOKEN_T_FINALLY',  385);
  $GLOBALS['_TOKEN_DEBUG'][385] = 'T_FINALLY';
if (!defined('TOKEN_yyErrorCode')) {   define('TOKEN_yyErrorCode', 256);
}
 // Class now

#line 2 "parser_generator/XP2.jay"
?><?php
/*
   +----------------------------------------------------------------------+
   | Zend Engine                                                          |
   +----------------------------------------------------------------------+
   | Copyright (c) 1998-2004 Zend Technologies Ltd. (http://www.zend.com) |
   +----------------------------------------------------------------------+
   | This source file is subject to version 2.00 of the Zend license,     |
   | that is bundled with this package in the file LICENSE, and is        | 
   | available through the world-wide-web at the following url:           |
   | http://www.zend.com/license/2_00.txt.                                |
   | If you did not receive a copy of the Zend license and are unable to  |
   | obtain it through the world-wide-web, please send a note to          |
   | license@zend.com so we can mail you a copy immediately.              |
   +----------------------------------------------------------------------+
   | Authors: Andi Gutmans <andi@zend.com>                                |
   |          Zeev Suraski <zeev@zend.com>                                |
   +----------------------------------------------------------------------+
*/

/* $Id$ */

/* 
 * LALR shift/reduce conflicts and how they are resolved:
 *
 * - 2 shift/reduce conflicts due to the dangeling elseif/else ambiguity.  Solved by shift.
 * - 1 shift/reduce conflict due to arrays within encapsulated strings. Solved by shift. 
 * - 1 shift/reduce conflict due to objects within encapsulated strings.  Solved by shift.
 * 
 */

class Parser extends Object {
#line 174 "-"

    /**
     * thrown for irrecoverable syntax errors and stack overflow.
     */
    
     var $yyErrorCode = 256;

    /**
     * Debugging
     */
     var $debug = false;


  var $yyLhs  = array(              -1,
    0,    1,    1,    2,    2,    2,    2,    2,    2,    8,
    8,    9,    9,    9,    9,    9,    3,   10,   10,   10,
   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
   10,   10,   10,   10,   10,   10,   10,   23,   25,   27,
   10,   28,   30,   31,   10,   32,   10,   10,   10,   10,
   10,   38,   38,   39,   39,   39,   36,   36,   42,   42,
   37,   37,   43,    7,   22,   22,   45,   21,   21,    4,
    5,   48,   48,   49,   49,   49,   50,   50,   51,   51,
    6,   53,   53,   46,   55,   55,   47,   47,   52,   57,
   57,   57,   58,   58,   61,   62,   62,   59,   59,   63,
   63,   44,   64,   64,   65,   65,   66,   66,   66,   26,
   26,   24,   24,   34,   34,   33,   33,   15,   15,   69,
   69,   69,   70,   70,   12,   12,   13,   13,   54,   54,
   71,   71,   71,   71,   71,   71,   71,   71,   72,   72,
   72,   72,   73,   73,   74,   74,   74,   74,   74,   74,
   18,   18,   75,   75,   75,   19,   19,   19,   19,   60,
   60,   76,   76,   76,   76,   76,   68,   68,   68,   68,
   84,   84,   84,   82,   82,   85,   85,   56,   86,   86,
   87,   87,   87,   89,   89,   90,   90,   81,   81,   81,
   81,   81,   81,   81,   81,   81,   81,   83,   83,   77,
   77,   80,   80,   91,   91,   92,   92,   92,   92,   92,
   92,   78,   78,   78,   78,   79,   79,   20,   20,   14,
   14,   93,   93,   95,   16,   16,   16,   16,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
   16,   16,   16,   16,   16,   16,  100,   16,   16,   16,
   16,   16,  104,  104,  104,  104,   35,   35,   40,   40,
   40,  106,  106,  109,  109,  110,   99,   99,   99,   96,
   96,   88,   88,   88,   88,   88,   88,   88,   88,   67,
   67,   67,   67,   67,   67,  101,  101,  101,  101,  101,
  101,  101,  111,  111,  114,  114,  113,  113,  113,  113,
   11,   11,   41,   29,   97,   17,   17,  117,  117,  118,
  116,  116,  105,  105,  121,  115,  115,  107,  107,  107,
  119,  119,  119,  123,  123,  122,  122,  108,  125,  108,
  124,  124,  124,  126,  126,  120,  120,   94,   94,  127,
  128,  127,  127,  102,  102,  129,  129,  129,  129,  129,
  129,  129,  129,  103,  103,  103,  103,  103,  103,  103,
  103,  103,  103,  103,  103,  130,  132,  130,  130,  130,
  130,  130,  131,  131,  131,   98,   98,   98,   98,   98,
   98,   98,  133,  134,  133,  112,
  );
  var $yyLen = array(           2,
    1,    2,    0,    1,    1,    1,    1,    1,    4,    2,
    0,    1,    1,    1,    1,    4,    1,    3,    7,    5,
    7,    9,    5,    2,    3,    2,    3,    2,    3,    3,
    3,    3,    3,    1,    2,    3,    5,    0,    0,    0,
   11,    0,    0,    0,   11,    0,    6,    1,   14,    3,
    3,    3,    1,    1,    3,    3,    1,    0,    1,    2,
    4,    0,    8,    1,    1,    3,    1,    1,    3,    1,
    1,    2,    0,    1,    1,    3,    3,    1,    1,    3,
    1,    0,    1,    9,    0,    1,    8,    7,    5,    1,
    2,    2,    0,    2,    1,    0,    2,    0,    2,    1,
    3,    6,    1,    3,    3,    1,    1,    4,    4,    0,
    2,    1,    2,    1,    4,    3,    5,    3,    4,    0,
    5,    4,    1,    1,    0,    6,    0,    2,    1,    0,
    2,    3,    5,    4,    4,    5,    7,    6,    0,    1,
    1,    1,    1,    0,    1,    1,    2,    3,    3,    4,
    3,    1,    1,    2,    4,    3,    5,    1,    3,    2,
    0,    3,    2,    9,   10,    1,    7,    8,    9,   10,
    1,    1,    1,    0,    2,    1,    3,    3,    1,    3,
    2,    5,    5,    1,    3,    1,    3,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    3,    1,
    1,    0,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    3,    5,    1,    3,    5,    4,    3,    1,    0,
    1,    3,    1,    0,    7,    3,    4,    6,    3,    2,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    2,    2,    2,    2,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    2,    2,    2,    2,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    5,    1,    2,    2,
    2,    2,    2,    2,    2,    2,    0,    3,    1,    4,
    3,    2,    4,    6,    6,    4,    1,    1,    1,    1,
    1,    4,    1,    2,    0,    2,    0,    2,    3,    3,
    6,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    2,    4,    1,    1,    1,    1,    1,    3,
    3,    3,    0,    2,    0,    1,    5,    3,    3,    1,
    1,    1,    1,    1,    1,    5,    1,    2,    0,    3,
    3,    0,    1,    2,    3,    1,    1,    1,    2,    1,
    4,    4,    1,    1,    4,    0,    1,    1,    0,    2,
    4,    4,    1,    1,    3,    1,    2,    3,    1,    1,
    0,    5,    0,    0,    2,    5,    3,    3,    1,    6,
    4,    4,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    0,    1,    0,    5,    3,    3,
    6,    3,    1,    1,    1,    4,    4,    2,    2,    4,
    2,    2,    1,    0,    4,    3,
  );
  var $yyDefRed = array(            3,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  287,    0,    0,    0,    0,    0,    0,  312,  313,
    0,  327,  364,   34,  314,    0,    0,    0,    0,    0,
   46,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  317,  318,  319,  315,  316,
  405,    0,  298,    0,    0,    0,   48,   11,    0,  405,
  405,  405,    2,    4,    5,    6,    7,    8,   17,    0,
  342,    0,    0,  341,   64,   70,   71,   81,    0,   86,
  329,    0,  278,  289,  357,    0,  356,  328,    0,    0,
    0,  360,  363,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  265,    0,  345,    0,  243,  245,  279,  280,
  281,  282,  283,  284,  285,    0,    0,    0,  179,    0,
    0,    0,    0,  301,    0,    0,    0,  230,    0,    0,
    0,  286,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   24,    0,   26,    0,   83,    0,   28,    0,
    0,    0,   11,    0,   68,    0,    0,  153,    0,    0,
  152,    0,    0,    0,  224,    0,    0,    0,  297,    0,
    0,   53,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   90,   95,    0,    0,    0,  242,  244,    0,
    0,    0,    0,    0,    0,    0,    0,  288,    0,    0,
  178,    0,    0,  229,    0,    0,    0,    0,   32,  308,
    0,    0,    0,    0,    0,    0,    0,    0,   33,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   25,   27,
    0,   29,   30,    0,   50,    0,   36,    0,  343,  154,
    0,   31,   67,    0,   65,  423,    0,    0,    0,    0,
    0,    0,    0,  400,  395,    0,  396,  398,  399,  397,
  404,  332,    0,    0,  402,  403,  401,  394,    0,   73,
    0,   51,    0,  276,    0,   18,   12,   13,   14,   15,
   10,    0,    0,  291,  330,  331,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  275,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   91,   92,    0,    0,    0,    0,  374,    0,  369,    0,
    0,  373,    0,    0,    0,  420,    0,    0,  180,  355,
    0,  305,    0,    0,    0,    0,    0,  159,  320,  325,
    0,  309,    0,  344,  147,  293,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   69,
    0,  151,    0,    0,  424,  416,  417,    0,  380,    0,
  379,  393,    0,  290,    0,  385,  407,    0,    0,    0,
    0,    9,    0,   52,    0,   56,    0,  365,    0,    0,
  227,    0,    0,    0,    0,    0,    0,    0,    0,  296,
    0,  370,    0,  349,    0,    0,  361,  362,    0,    0,
    0,  184,    0,    0,  322,  323,    0,    0,    0,  125,
    0,    0,    0,    0,   20,    0,    0,   43,   39,    0,
    0,    0,    0,   23,  140,  142,  141,    0,    0,    0,
    0,  155,   66,   37,    0,  381,    0,    0,    0,    0,
    0,    0,    0,  409,    0,  410,  412,    0,   89,   74,
   75,   72,    0,    0,    0,    0,    0,    0,    0,    0,
  106,   94,    0,    0,  100,    0,  161,  375,    0,    0,
    0,    0,    0,  182,    0,  183,  161,    0,  304,    0,
    0,    0,  426,  157,    0,  150,    0,    0,    0,    0,
  116,    0,   11,  114,   47,  120,    0,    0,    0,    0,
    0,    0,  425,    0,  378,    0,  392,  391,    0,  413,
  415,  414,    0,    0,    0,    0,   78,   16,  228,  294,
  295,    0,    0,  102,    0,  161,    0,  161,    0,    0,
  351,    0,  348,  371,  372,  187,  185,    0,  306,    0,
  324,    0,  334,    0,    0,   19,   21,    0,    0,    0,
    0,  112,    0,    0,    0,    0,    0,  118,   11,    0,
    0,    0,    0,    0,    0,    0,    0,  408,    0,    0,
    0,   76,    0,  209,  210,  211,  208,  207,  206,    0,
    0,    0,    0,  204,  105,    0,    0,  101,    0,  201,
   88,    0,  166,  160,    0,    0,    0,    0,    0,  311,
  339,    0,    0,  128,    0,    0,    0,  113,    0,  117,
    0,  119,    0,  123,  124,   11,    0,    0,    0,    0,
  134,    0,  382,  390,  411,   80,   77,  108,    0,  109,
  173,  172,    0,  171,    0,  205,   87,    0,    0,    0,
    0,    0,  163,    0,  350,    0,    0,   22,  111,   44,
   40,  115,   11,    0,   84,    0,    0,  133,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  162,    0,    0,
  337,    0,    0,    0,    0,    0,  138,   11,    0,    0,
    0,    0,  217,    0,  215,    0,    0,  188,  189,  194,
  190,  191,  192,  193,  195,  196,  197,    0,  126,   45,
   41,  137,    0,    0,    0,    0,    0,    0,    0,  216,
    0,    0,    0,    0,    0,    0,    0,    0,  213,    0,
    0,    0,    0,   59,    0,    0,  176,    0,  198,   11,
  167,    0,    0,    0,    0,    0,   49,   60,  168,    0,
    0,    0,    0,    0,    0,    0,   11,    0,  177,  199,
  169,    0,  164,    0,    0,  170,  165,    0,   61,   11,
    0,   63,
  );
  var $yyDgoto  = array(             1,
    2,   73,  327,  328,  329,  330,   78,  185,  331,   79,
   80,  565,  626,  273,  504,   81,   82,  170,  140,  146,
  167,  294,  424,  631,  570,  687,  754,  423,  632,  569,
  753,  151,  426,  575,   83,  802,  817,  181,  182,  183,
   84,  803,  804,   85,  295,   86,   87,  453,  532,  596,
  597,   88,  158,  508,  332,   90,  236,  467,  544,  610,
  237,  469,  546,  539,  540,  541,  408,  673,  577,  696,
  509,  510,  266,  267,  171,  674,  675,  721,  676,  677,
  778,  796,  811,  715,  808,  128,  129,   91,  481,  482,
  678,  664,  274,  440,  299,  254,   92,   93,  142,  126,
   94,  302,  177,   95,   96,  134,   97,  390,  484,  559,
  561,   98,  562,  446,   99,  474,  550,  613,  100,  101,
  102,  394,  103,  391,  472,  392,  441,  584,  303,  318,
  593,  523,  297,  515,
  );
  var $yySindex = array(            0,
    0, 3711, 6121, 6121,   38, 6121, 6121, 6121, 6121, 6121,
 6121, 6121,   20,   20, 6121, 6121, 6121, 6121, 6121, 6121,
 6121,    0,  -27,   21, 6121, -212,   70,   78,    0,    0,
   90,    0,    0,    0,    0, 6121, 4268,  115,  123,  147,
    0,  171, 4600, 4706,   64, 4883,  111, 6121,   -1,   14,
  200,  206,  211,  229,  249,    0,    0,    0,    0,    0,
    0,  291,    0, -275,   21, 6121,    0,    0,  232,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,10046,
    0, 1294, -199,    0,    0,    0,    0,    0,  243,    0,
    0,  -69,    0,    0,    0,  326,    0,    0,  -30,   12,
   24,    0,    0,11294,11294, 6121,11294,11294, 5895,   62,
   62,   91,    0,   90,    0,   18,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 6121,   94,  106,    0,    0,
    0,   56,  374,    0,   71,   12,   24,    0,  387,  127,
 4989,    0, 6121, 5166,11294,  165,  152, 6121, 6121, 6121,
  422, 6121,    0,10134,    0,10180,    0,  164,    0,11294,
  434, 1262,    0,10218,    0,  198,  456,    0,  -29,  194,
    0,   20,   20,   20,    0, 5272, 1877,  484,    0,  352,
  233,    0,  163,10253, 1907, 6121, 2779,  578,  598, 6121,
 6121, 6121, 6121, 6121, 6121, 6121, 6121, 6121, 6121, 6121,
 6121, 6121, 6121, 6121, 6121, 6121, 6121, 6121, 6121, 6121,
 6121, 6121, 6121, 6121, 6121,   21,    0, 5449, 6121, 6121,
 6121, 6121, 6121, 6121, 6121, 6121, 6121, 6121, 6121,  -16,
  175,  186,    0,    0,  231,  236,  242,    0,    0, 5166,
   -9, 6121, 6121,  232,   12,10307,   17,    0,  523,  -27,
    0,   30, 5166,    0,   -9,   12,  508,  259,    0,    0,
10347,10482,   20,    0, 1294,  532,  531, 6121,    0,  552,
10515,11294,  540,  575,    0, 1294,  317,10599,    0,    0,
  586,    0,    0, 2013,    0,  591,    0, 6121,    0,    0,
   14,    0,    0,  133,    0,    0,  160,  595,   -3,   20,
  956,  597,  614,    0,    0,  -76,    0,    0,    0,    0,
    0,    0, 6298,   20,    0,    0,    0,    0,  608,    0,
   21,    0,   39,    0,  643,    0,    0,    0,    0,    0,
    0,  -88,10610,    0,    0,    0,11390,11423, 5895,10649,
 8788,11459, 7144, 6430, 7352, 2415, 2415, 2415, 2415,   95,
   95,   95,   95,   95,  453,  453,   62,   62,   62,   91,
   91,   91,    0,   -2, 5895, 5895, 5895, 5895, 5895, 5895,
 5895, 5895, 5895, 5895, 5895, 5895,  650,  654,   12,   24,
    0,    0,  553,  342,  346,  663,    0, 6121,    0,  669,
   58,    0,11294,  623,10695,    0,  650,  568,    0,    0,
  677,    0,  508,  508,    0,  686,  354,    0,    0,    0,
  685,    0, 4268,    0,    0,    0, 5555,11294, 6121, 4268,
 6121, 6121,  404,  427,  687,  174,  635, -253,  436,    0,
10745,    0,   20,  716,    0,    0,    0,  725,    0,  428,
    0,    0, 5732,    0, 5838,    0,    0,  476,  696,10862,
  664,    0,  -66,    0,   90,    0,  752,    0, 6121,   21,
    0, 5166, 5166,   12,  497, -275,  451, -275,  684,    0,
10951,    0, 5166,    0, 6121, 6121,    0,    0,  748,  769,
  498,    0,  688,  461,    0,    0,  508,  510,  508,    0,
   20,    0, 1294,10997,    0,  760,11294,    0,    0,  508,
  513, 4162,  762,    0,    0,    0,    0,  783,  781,   -7,
  813,    0,    0,    0,   20,    0,   -3,  811,   20,11294,
   20, 6643,  -34,    0, 6121,    0,    0,  501,    0,    0,
    0,    0,  822, 8404,  374,  845,  853,    5,  770,  237,
    0,    0, -275,  773,    0,  856,    0,    0,  860,  547,
  810,11009,  508,    0,  599,    0,    0,   -9,    0,  566,
  868,  879,    0,    0,   10,    0,  867, 6121,   20,  -19,
    0,  871,    0,    0,    0,    0,   59,  814, -253,  627,
  877, -275,    0,   -3,    0, 6121,    0,    0, 6015,    0,
    0,    0,  848,11042,  617,  290,    0,    0,    0,    0,
    0,  508,  138,    0,  497,    0,  856,    0, -275,  727,
    0,   -9,    0,    0,    0,    0,    0,  834,    0,  508,
    0,  508,    0,  907, 4268,    0,    0,  911,  592,   20,
  592,    0,  508, 2358,  130, 6121,  285,    0,    0,   11,
  893,  508,  646,  536, 5895,   20,11294,    0,  833,  657,
  501,    0,  920,    0,    0,    0,    0,    0,    0,  572,
  838, -171,  572,    0,    0,  937,  849,    0,  659,    0,
    0,  572,    0,    0,  658,  318, -259,  572,  669,    0,
    0,  612, 6121,    0, 4268,  -19,  928,    0,  931,    0,
  914,    0, 9881,    0,    0,    0, 2464,  666,  915,  508,
    0,  936,    0,    0,    0,    0,    0,    0,  144,    0,
    0,    0,  938,    0,   64,    0,    0,  922,  202,  924,
  340,  674,    0,   64,    0,  508,11116,    0,    0,    0,
    0,    0,    0, 3817,    0,  925,  508,    0,  864,  948,
   64, -253,  682,  508,   64,  508,  683,    0,  935,   25,
    0, 4268, 4268, 4268, 3817,  508,    0,    0, -253,  690,
  963,  965,    0,   25,    0,  945,  508,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  968,    0,    0,
    0,    0, 2809,  969,  971,  629, -253,  977,  508,    0,
 -253,  692,  629, -253, -275,  -23,  979, -253,    0,  980,
  982,  640,  692,    0,  -23,  986,    0,  987,    0,    0,
    0,  629,  989,  629, -275,  909,    0,    0,    0,  629,
 -275, 2915,  -23,  629,  -23,  729,    0,  -23,    0,    0,
    0,  -23,    0, 1001, 3260,    0,    0,  918,    0,    0,
 3366,    0,
  );
  var $yyRindex= array(            0,
    0,   16,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 8252,    0,    0,    0,
 6577,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  737,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   33,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 7814,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 7528, 6685,
    0,    0,    0,   85,  408,    0,  898, 1008,  634, 8993,
 9050, 8606,    0,  673,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 6178,
 6477,    0,    0,    0, 8075, 7908,    0,    0,  380,    0,
    0,    0,    0, 1007,  429,    0,    0,    0,  992,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
11379, 9839,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1013,    0,    0,    0,    0,
    0,    0,  448,    0,  416,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1007,
    0,  967,    0,   44, 6785,    0,    0,    0,  109,    0,
    0,    0, 1007,    0,    0, 7945,    0,    0,    0,    0,
    0,    0,    0, 6744, 9746,    0, 1015,    0,    0,    0,
    0,   52,    0,  117, 9673, 9572,    0,    0,    0,    0,
    0,    0,    0,  416,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  562,    0,
  567,    0, 1021,    0,    0,  398,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   54,  681, 1576,    0,
  107,  656, 2757, 2306, 4276, 7658, 9416, 9425, 9449, 4779,
 5062, 5345, 5628, 6169, 8087, 9374, 9061, 9166, 9315, 8666,
 8703, 8956,    0,    0, 1599, 2029, 2052, 2116, 2480, 2503,
 2567, 2931, 2954, 3018, 3208, 3382, 8346, 7222, 7054,    0,
    0,    0,    0, -105,  940,    0,    0,    0,    0, 7491,
 7091,    0,  972,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   48,    0,    0,    0,    0,    0,
  459,    0,    0,    0,    0,    0,    0,  473,    0,    0,
  992,    0,    0,    0,    0,    0,    0,   43,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1034,    0,    0,    0,11127,    0,
    0,    0,  400,    0,    2,    0,    0,    0,    0,    0,
    0, 1007, 1007, 7185,    0,    0,  953,    0,    0,    0,
    0,    0, 1007,    0,  967,    0,    0,    0,  569,    0,
    0,    0, 8521, 8198,    0,    0, 1036,    0,    0,    0,
    0, 9927, 9781,    0,    0,    0,  224,    0,    0,    0,
    0,    0,  135,    0,    0,    0,    0,    0, 1037,    0,
    0,    0,    0,    0,    0,    0,  562,    0,    0,  621,
    0,  633,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  921,    0,    0,    0,   32,    0,  957,
    0,    0,    0,    0,    0,  960,    0,    0,    0, 7618,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  676,
    0, 1021,    0,    0, 1560,    0,    0, 1043,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   26,    0,
  694,    0,    0,  562,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  475,    0,    0,    0,    0,    0,
    0,    0,  217,    0,    0,    0,  962,    0,    0,  251,
    0,    0,    0,    0,    0,    0,    0,  251,    0,    0,
    0, 1034,    0,    0,    0,    0,    0,    0, 1045,    0,
 1045,    0,    0,  416,    0,    0,    0,    0,    0,    0,
  706,    0,    0,    0, 3405,    0,  722,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  217,
    0,    0,  353,    0,    0,  239,  251,    0,    0,    0,
    0,  251,    0,    0,    0,    0,    0, -117, 7491,    0,
    0,  750,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  416,    0,  757,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  737,    0,    0,    0,    0,  503,
    0,    0,    0,   40,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  215,    0,  759,    0,    0,    0,    0,
  737,   43,    0,    0,   40,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  253,    0,    0,    0,   43,    0,
    0,    0,    0,    0,    0,  511,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  416,    0,    0,   29,   43,    0,    0,    0,
   43, 1000,   29,   43,    0,    0,    0,   43,    0,    0,
    0, 1454, 1107,    0,    0,    0,    0,   31,    0,    0,
    0,   29,    0,   29,    0,    0,    0,    0,    0,   29,
    0,  416,    0,   29,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  416,    0,    0,    0,    0,    0,
  416,    0,
  );
  var $yyGindex = array(            0,
    0,    0,    3, 1085,    1, 1086,  637, -142,    0,    0,
  636,    0,    0, -377,    0,  -17,   -5,    0,    0,    0,
    0,    0,    0,  403,    0,  463,    0,    0, -237,    0,
    0,    0,    0,    0,  -13,    0,    0,    0,  771,  -20,
 -141,    0,  294,    0,  667,    0,    0,    0,    0,    0,
  452,    0, -498, -128,    8, -396,    0,    0,    0, -411,
    0,    0,  559,    0,    0,  499, -381,  502,  530,  415,
    0,  534,  -60,    0,  819,    0,    0,    0,    0, -538,
  350, -395,  -33, -588,    0,    0,  865, -215,    0,  561,
 -487, -102,    0,  533,    0,  583,  430,    0,    0,    0,
    0,    0,  364,    0, -217,    0,  -18, -243,    0,    0,
    0,  393,    0,  558,    0,  442,    0,    0,  -22,  -10,
    0,  647,    0,    0,    0,    0,  607,    0,    0,    0,
    0,    0,    0,    0,
  );
  var $yyTable = array(           116,
  116,  136,   76,  133,   74,  135,   69,  115,  115,   89,
  132,  402,  378,  137,  447,    1,   69,   93,  630,   69,
  284,  485,  486,  389,   23,  415,   69,  290,  161,  378,
  580,  179,   69,   69,  400,  809,  127,  389,  166,  147,
  162,  409,  136,  496,  602,   55,  135,  179,  698,  169,
  180,  132,   69,  505,  137,   69,   69,  774,  529,  244,
   55,  773,  442,  139,  662,   69,  771,  768,  376,  769,
  770,  772,   82,  711,   69,  107,   82,  106,  245,  377,
  139,   82,   82,  130,   82,   82,   82,  174,  321,  175,
  107,  321,  223,  288,  248,  223,  139,  248,  215,  810,
   63,  157,  242,  213,  506,  560,  321,  564,  214,  141,
  223,  248,  248,  388,  256,  663,   63,  143,  571,  724,
  741,  709,  507,  712,  713,  418,  264,  603,  418,  144,
  741,  215,  275,  719,  243,  179,  213,  210,  265,  211,
  212,  214,  418,  418,  276,  618,  248,  246,  475,  250,
  246,  174,  181,  175,  148,  116,  107,  221,  116,  116,
  116,  711,  149,  289,  246,  246,  293,  296,  298,  246,
  258,  616,  663,  434,  230,  221,  433,  418,  248,  386,
  476,  456,  480,  638,  663,  259,  150,  409,  409,  203,
  628,  200,  401,  136,  666,  363,  667,  135,  251,  246,
  436,  181,  132,  435,   63,  137,  660,  379,  268,  418,
  152,  712,  713,  672,  502,  203,  743,  501,  379,  380,
  653,  672,  264,  269,  379,  750,  239,  238,   23,  379,
  380,  246,  379,  163,  265,  264,  380,  291,  681,  172,
  682,  380,  760,  407,  380,  173,  764,  265,   93,  116,
  174,  690,  292,  566,  692,  232,  231,  414,  203,  120,
  701,  203,  233,  234,  222,  203,  203,  222,  175,  672,
  672,  409,  590,  409,  591,  592,  321,  114,  448,   33,
  605,  587,  222,  588,  409,  116,  116,  114,  176,   33,
  377,  322,   33,  439,  414,  606,  460,  387,  136,   33,
  116,  581,  135,  114,  114,   33,   33,  132,  451,  116,
  137,  624,  625,  165,  619,  528,  248,  289,  738,  699,
  776,  775,  168,  397,  241,   33,  114,  130,   33,   33,
  178,  629,   33,  651,  139,   82,   82,  409,   33,  122,
  389,  376,  694,  695,  751,  455,   63,   33,  652,  216,
  116,  139,  377,  438,  186,  757,   63,  464,  461,   85,
   85,  722,  763,  104,  765,  240,   85,   85,  679,  246,
  246,  246,   63,   63,  782,  297,  723,  121,  216,  248,
  209,  208,  216,  747,  246,  790,  409,  636,  637,  407,
  407,  247,  688,   85,  389,   63,  131,  805,  748,  492,
  249,  536,  537,  321,  409,  777,  409,  799,  704,  248,
  418,  493,  549,  253,   63,  490,  823,  409,  825,  116,
   82,  297,  495,  158,  828,  255,  409,  293,  832,  252,
  634,  406,  246,  187,  188,  189,  406,  136,  158,  535,
  418,  135,  117,  118,  264,  264,  132,  257,  419,  137,
  179,  419,  542,  530,  545,  264,  265,  265,  636,  637,
   89,  277,  246,  120,  120,  419,  419,  265,  518,  270,
  281,  517,  219,  407,  320,  407,  711,  116,  659,  658,
  657,  656,  655,  654,  409,  414,  407,  219,  323,  215,
  406,   54,  282,  406,  213,  210,  697,  211,  212,  214,
  419,  116,  156,  116,  574,  116,   54,  116,  179,  583,
  409,  439,  286,  414,  287,  414,  218,  156,   79,   63,
  406,  409,  406,  202,  319,  381,  712,  740,  409,  545,
  409,  218,  419,   79,  711,  379,  382,  383,  556,  407,
  409,  555,  384,  122,  122,  202,  214,  380,  385,  202,
  403,  409,  404,  734,  212,  116,  116,  202,   85,   85,
  716,  214,  398,  414,  414,   85,   85,  411,  643,  212,
  116,  202,  416,  409,  417,  716,  703,   63,  439,  517,
  745,  121,  121,  202,  712,  740,  232,  231,  407,  379,
  755,  419,  202,  233,  234,  668,   85,   85,  421,  202,
  202,  380,  383,   85,   85,  383,  407,  389,  407,  186,
  389,  335,  186,  761,  202,  783,  116,  202,  422,  407,
  235,  202,  202,  425,  414,  428,  202,  684,  407,  202,
  784,  430,  116,  202,  202,  437,  336,  444,  104,  105,
  414,  107,  108,  109,  110,  111,  112,  113,  714,  410,
  119,  120,  121,  122,  123,  124,  125,  445,  797,  203,
  138,  388,  800,  714,  388,  806,  452,  822,  304,  813,
  317,  145,  116,  387,  292,  465,  387,  292,  154,  156,
  414,  160,  457,  164,  835,  203,  407,  728,  304,  462,
  317,  292,  292,  463,  466,  714,  247,  841,  468,  247,
  315,  184,  316,  470,  406,  714,  406,  406,  473,  406,
  406,  406,  407,  247,  247,  477,  340,  483,  247,  340,
  315,  250,  316,  407,  250,  487,  292,  488,  203,  498,
  407,  203,  407,  419,  131,  203,  203,  131,  250,  250,
  216,  246,  407,   85,   85,  489,  132,  500,  247,  132,
   85,   85,  499,  407,  779,  780,  781,  503,  292,   85,
   85,  248,  386,  419,  516,  386,   85,   85,  406,  406,
  406,  819,  511,  250,  514,  407,  261,   85,  262,  160,
  247,  807,  524,  271,  272,  160,  525,  278,  527,  831,
  338,  833,  533,  338,  836,  410,  410,  135,  837,  136,
  135,  826,  136,  538,  543,  250,  547,  829,  553,  554,
  557,  301,   29,   30,  405,  558,  563,   23,  568,  572,
  576,  333,   35,  578,  579,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  357,  358,  359,  360,  361,
  362,  671,  582,  365,  366,  367,  368,  369,  370,  371,
  372,  373,  374,  375,  376,  406,   56,   57,   58,   59,
   60,  586,   29,   30,  479,  160,  595,  393,  395,  410,
  598,  410,   35,   63,  305,  600,  306,  307,  160,  308,
  309,  310,  410,  601,  604,  608,  292,  292,  292,  609,
  611,  612,  614,  418,  305,  479,  306,  307,  621,  308,
  309,  310,  659,  658,  657,  656,  655,  654,  247,  247,
  247,  620,  622,  431,   23,  627,   56,   57,   58,   59,
   60,  633,  311,  247,  247,  641,  639,  642,  421,   23,
  648,  421,  650,  250,  250,  410,  683,  686,  450,  313,
  314,  685,  311,  700,  702,  421,  421,  705,  680,  292,
  708,  277,  710,  706,  277,  718,  720,  726,  730,  313,
  314,  731,  732,  717,  736,  737,  739,  742,  277,  277,
  749,  247,  744,  277,  746,  756,  758,  759,  762,  292,
  421,  766,  215,  198,  410,  767,  785,  213,  210,   58,
  211,  212,  214,  786,  787,  789,  250,  791,  795,  793,
  794,  247,  410,  277,  410,  203,  798,  205,  193,  812,
  814,  815,  421,  471,  816,  410,  820,   23,  801,  824,
  821,  827,   58,   58,  410,   58,  250,  834,   58,   58,
  840,  838,   58,   82,   58,  277,  297,  144,  422,  197,
  220,  422,  160,  384,  494,  143,  272,  497,   58,  366,
  669,  335,   96,   58,  367,  422,  422,  659,  658,  657,
  656,  655,  654,  670,  336,   98,  333,  129,  520,  196,
  522,  103,   97,  220,   99,  110,   75,   77,  729,  531,
   58,  454,  410,  689,  534,   58,  818,  160,  160,  513,
  422,  607,  707,  665,  661,  635,   57,  733,  160,  432,
  393,  552,  640,  788,  399,  617,  644,  599,  410,  623,
  725,  551,   58,  585,   58,   58,    0,    0,    0,  410,
    0,    0,  422,    0,    0,    0,  410,    0,  410,   57,
   57,    0,   57,    0,    0,   57,   57,    0,  410,   57,
    0,   57,    0,    0,    0,    0,    0,    0,    0,  410,
  594,    0,    0,    0,    0,   57,    0,  669,    0,    0,
   57,    0,    0,    0,  659,  658,  657,  656,  655,  654,
  670,  410,  669,  277,  277,  277,    0,    0,    0,  659,
  658,  657,  656,  655,  654,  670,    0,   57,    0,    0,
    0,    0,   57,  272,    0,    0,    0,    0,    0,    0,
    0,    0,  207,    0,    0,    0,    0,    0,  190,  191,
  192,  645,    0,  421,  647,    0,    0,    0,    0,   57,
    0,   57,   57,  194,  195,  202,  201,  200,  199,  206,
  204,  209,  208,  216,    0,    0,  277,    0,    0,    0,
    0,    0,    0,  421,    0,    0,    0,   58,   58,   58,
   58,   58,    0,    0,    0,   58,    0,    0,    0,    0,
  669,  693,    0,    0,    0,    0,  277,  659,  658,  657,
  656,  655,  654,  670,    0,    0,    0,    0,   58,   58,
   58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
   58,   58,   58,    0,   58,   58,   58,   58,   58,    0,
   58,  443,    0,    0,   58,   58,   58,   58,  727,   58,
  283,   58,  218,   58,   58,    0,   58,    0,   58,   58,
   58,   58,   58,  422,   58,   58,    0,   58,   58,   58,
    0,    0,    0,   58,   58,   58,    0,   58,   58,   58,
   58,   58,    0,    0,  218,    0,   58,   58,   58,   58,
   58,   58,   58,  422,   57,   57,   57,   57,   57,   58,
    0,    0,   57,    0,   58,   58,   58,   58,    0,    0,
    0,   58,    0,    0,   58,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   57,   57,   57,   57,   57,
   57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
    0,   57,   57,   57,   57,   57,    0,   57,    0,    0,
    0,   57,   57,   57,   57,    0,   57,    0,   57,    0,
   57,   57,    0,   57,    0,   57,   57,   57,   57,   57,
    0,   57,   57,    0,   57,   57,   57,    0,    0,    0,
   57,   57,   57,   62,   57,   57,   57,   57,   57,    0,
    0,    0,    0,   57,   57,   57,   57,   57,   57,   57,
    0,    0,    0,    0,    0,    0,   57,    0,    0,    0,
    0,   57,   57,   57,   57,    0,   62,   62,   57,   62,
    0,   57,   62,   62,    0,    0,   62,    0,   62,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   62,    0,    0,    0,    0,   62,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  229,  228,
  227,  226,  225,  224,  223,  222,  221,  220,  219,    0,
    0,    0,    0,    0,   62,    0,    0,    0,    0,   62,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  127,
  229,  228,  227,  226,  225,  224,  223,  222,  221,  220,
  219,    0,    0,    0,    0,    0,   62,    0,   62,   62,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  127,  127,    0,  127,    0,    0,  127,  127,
    0,    0,  127,    0,  127,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  249,    0,  127,  249,
    0,    0,    0,  127,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  249,  249,    0,    0,    0,    0,  226,
    0,    0,  226,    0,    0,    0,    0,    0,    0,    0,
  127,    0,    0,    0,    0,  127,  226,  226,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  249,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  127,    0,  127,  127,    0,    0,    0,    0,
    0,  226,    0,    0,    0,    0,    0,    0,    0,    0,
  249,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   62,   62,   62,   62,   62,    0,    0,    0,   62,
    0,    0,    0,  226,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,    0,   62,   62,
   62,   62,   62,    0,   62,    0,    0,    0,   62,   62,
   62,   62,    0,   62,    0,   62,    0,   62,   62,    0,
   62,    0,   62,   62,   62,   62,   62,    0,   62,   62,
    0,   62,   62,   62,    0,    0,    0,   62,   62,   62,
    0,   62,   62,   62,   62,   62,    0,    0,    0,    0,
   62,   62,   62,   62,   62,   62,   62,  127,  127,  127,
  127,  127,    0,   62,    0,  127,    0,    0,   62,   62,
   62,   62,    0,    0,    0,   62,    0,    0,  249,  249,
  249,    0,    0,    0,    0,    0,    0,    0,  127,  127,
  127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
  127,  226,  226,  226,  127,  127,  127,  127,  127,    0,
  127,    0,    0,    0,  127,  127,  127,  127,    0,  127,
    0,  127,    0,  127,  127,    0,  127,    0,  127,  127,
  127,  127,  127,    0,  127,  127,    0,  127,  127,  127,
    0,  249,    0,  127,  127,  127,    0,  127,  127,  127,
  127,  127,    0,    0,    0,    0,  127,  127,  127,  127,
  127,  127,  127,    0,  226,    0,    0,    0,    0,  127,
    0,  249,    0,    0,  127,  127,  127,  127,    0,   11,
   71,  127,   69,    0,    0,   72,   66,    0,    0,    9,
    0,   10,    0,    0,  226,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   67,    0,  304,    0,  317,
   22,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   23,    0,  315,
    0,  316,   70,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   68,
    0,  326,   12,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   11,   71,    0,   69,    0,
    0,   72,   66,    0,    0,    9,    0,   10,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  231,
    0,   67,  231,    0,    0,    0,   22,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  231,  231,    0,    0,
    0,    0,  232,    0,    0,  232,    0,    0,    0,    0,
    0,    0,    0,   23,    0,    0,    0,    0,   70,  232,
  232,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  231,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   68,    0,  429,   12,    0,
    0,    0,    0,    0,  232,    0,    0,    0,    0,    0,
    0,    0,    0,  231,    0,    0,  233,    0,    0,  233,
    0,    0,    0,    0,    7,    6,    5,    4,    3,    0,
    0,    0,    8,  233,  233,    0,  232,    0,    0,    0,
    0,    0,    0,  305,    0,  306,  307,    0,  308,  309,
  310,    0,    0,    0,    0,   21,   20,   19,   18,   17,
   16,   15,   14,   13,   25,   24,   27,   28,  233,    0,
    0,   29,   30,   31,   32,   33,    0,   34,    0,    0,
    0,   35,   36,   37,   38,    0,   39,    0,   40,    0,
   41,  311,    0,   42,    0,    0,    0,   43,   44,   45,
  233,   46,   47,    0,   48,   49,   50,  312,  313,  314,
    0,    0,   26,    0,   51,   52,   53,    0,    0,    0,
    0,    0,    0,   54,   55,   56,   57,   58,   59,   60,
    7,    6,    5,    4,    3,    0,   61,    0,    8,    0,
    0,  325,   63,   64,    0,    0,    0,    0,   65,    0,
    0,  231,  231,  231,    0,    0,    0,    0,    0,    0,
    0,   21,   20,   19,   18,   17,   16,   15,   14,   13,
   25,   24,   27,   28,  232,  232,  232,   29,   30,   31,
   32,   33,    0,   34,    0,    0,    0,   35,   36,   37,
   38,    0,   39,    0,   40,    0,   41,    0,    0,   42,
    0,    0,    0,   43,   44,   45,  253,   46,   47,  253,
   48,   49,   50,    0,  231,    0,    0,    0,   26,    0,
   51,   52,   53,  253,  253,    0,    0,    0,  253,   54,
   55,   56,   57,   58,   59,   60,    0,  232,  233,  233,
  233,    0,   61,    0,  231,    0,    0,  325,   63,   64,
   11,   71,    0,   69,   65,    0,   72,   66,  253,  253,
    9,    0,   10,    0,    0,    0,    0,  232,    0,    0,
    0,    0,    0,    0,    0,    0,   67,    0,    0,    0,
    0,   22,    0,    0,    0,    0,    0,    0,    0,  253,
  253,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  233,    0,    0,    0,    0,    0,    0,   23,    0,
    0,  215,    0,   70,    0,    0,  213,  210,    0,  211,
  212,  214,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  233,    0,    0,  203,    0,  205,    0,    0,    0,
   68,    0,    0,   12,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   11,   71,    0,   69,
    0,    0,   72,   66,    0,    0,    9,    0,   10,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  234,    0,   67,  234,    0,    0,    0,   22,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  234,  234,    0,
    0,    0,    0,  235,    0,    0,  235,    0,    0,    0,
    0,    0,    0,    0,   23,    0,    0,    0,    0,   70,
  235,  235,    0,    0,    0,    0,    0,    0,  253,  253,
  253,    0,  234,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  253,  253,    0,   68,    0,  735,   12,
    0,    0,    0,    0,    0,  235,    0,    0,    0,    0,
    0,    0,    0,    0,  234,    0,    0,  236,    0,    0,
  236,    0,    0,    0,    0,    7,    6,    5,    4,    3,
    0,    0,    0,    8,  236,  236,    0,  235,    0,    0,
    0,  253,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   21,   20,   19,   18,
   17,   16,   15,   14,   13,   25,   24,   27,   28,  236,
    0,  253,   29,   30,   31,   32,   33,    0,   34,    0,
    0,  207,   35,   36,   37,   38,    0,   39,    0,   40,
    0,   41,  691,    0,   42,    0,    0,    0,   43,   44,
   45,  236,   46,   47,    0,   48,   49,   50,  206,  204,
  209,  208,  216,   26,    0,   51,   52,   53,    0,    0,
    0,    0,    0,    0,   54,   55,   56,   57,   58,   59,
   60,    7,    6,    5,    4,    3,    0,   61,    0,    8,
    0,    0,  325,   63,   64,    0,    0,    0,    0,   65,
    0,    0,  234,  234,  234,    0,    0,    0,    0,    0,
    0,    0,   21,   20,   19,   18,   17,   16,   15,   14,
   13,   25,   24,   27,   28,  235,  235,  235,   29,   30,
   31,   32,   33,    0,   34,    0,    0,    0,   35,   36,
   37,   38,    0,   39,    0,   40,    0,   41,    0,    0,
   42,    0,    0,    0,   43,   44,   45,  251,   46,   47,
  251,   48,   49,   50,    0,  234,    0,    0,    0,   26,
    0,   51,   52,   53,  251,  251,    0,    0,    0,  251,
   54,   55,   56,   57,   58,   59,   60,    0,  235,  236,
  236,  236,    0,   61,    0,  234,    0,    0,  325,   63,
   64,   11,   71,    0,   69,   65,    0,   72,   66,  251,
    0,    9,    0,   10,    0,    0,    0,    0,  235,    0,
    0,    0,    0,    0,    0,    0,    0,   67,    0,  304,
    0,  317,   22,    0,  334,    0,    0,    0,    0,    0,
  251,  251,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  236,    0,    0,    0,    0,    0,    0,   23,
    0,  315,    0,  316,   70,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  236,    0,    0,    0,    0,    0,    0,    0,
    0,   68,    0,  792,   12,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   11,   71,    0,
   69,    0,    0,   72,   66,    0,    0,    9,    0,   10,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  237,    0,   67,  237,    0,    0,    0,   22,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  237,  237,
    0,    0,    0,    0,  238,    0,    0,  238,    0,    0,
    0,    0,    0,    0,    0,   23,    0,    0,    0,    0,
   70,  238,  238,    0,    0,    0,    0,    0,    0,  251,
  251,  251,    0,  237,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  251,  251,    0,   68,    0,  830,
   12,    0,    0,    0,    0,    0,  238,    0,    0,    0,
    0,    0,    0,    0,    0,  237,    0,    0,  239,    0,
    0,  239,    0,    0,    0,    0,    7,    6,    5,    4,
    3,    0,    0,    0,    8,  239,  239,    0,  238,    0,
    0,    0,  251,    0,    0,  305,    0,  306,  307,    0,
  308,  309,  310,    0,    0,    0,    0,   21,   20,   19,
   18,   17,   16,   15,   14,   13,   25,   24,   27,   28,
  239,    0,  251,   29,   30,   31,   32,   33,    0,   34,
    0,    0,    0,   35,   36,   37,   38,    0,   39,    0,
   40,    0,   41,  311,    0,   42,    0,    0,    0,   43,
   44,   45,  239,   46,   47,    0,   48,   49,   50,    0,
  313,  314,    0,    0,   26,    0,   51,   52,   53,    0,
    0,    0,    0,    0,    0,   54,   55,   56,   57,   58,
   59,   60,    7,    6,    5,    4,    3,    0,   61,    0,
    8,    0,    0,  325,   63,   64,    0,    0,    0,    0,
   65,    0,    0,  237,  237,  237,    0,    0,    0,    0,
    0,    0,    0,   21,   20,   19,   18,   17,   16,   15,
   14,   13,   25,   24,   27,   28,  238,  238,  238,   29,
   30,   31,   32,   33,    0,   34,    0,    0,    0,   35,
   36,   37,   38,    0,   39,    0,   40,    0,   41,    0,
    0,   42,    0,    0,    0,   43,   44,   45,  240,   46,
   47,  240,   48,   49,   50,    0,  237,    0,    0,    0,
   26,    0,   51,   52,   53,  240,  240,    0,    0,    0,
    0,   54,   55,   56,   57,   58,   59,   60,    0,  238,
  239,  239,  239,    0,   61,    0,  237,    0,    0,  325,
   63,   64,   11,   71,    0,   69,   65,    0,   72,   66,
  240,    0,    9,    0,   10,    0,    0,    0,    0,  238,
    0,    0,    0,    0,    0,    0,    0,    0,   67,    0,
    0,    0,    0,   22,    0,    0,    0,    0,    0,    0,
    0,    0,  240,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  239,    0,    0,    0,    0,    0,    0,
   23,    0,    0,    0,    0,   70,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  239,    0,    0,    0,    0,    0,    0,
    0,    0,   68,    0,  839,   12,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   11,   71,
    0,   69,    0,    0,   72,   66,    0,    0,    9,    0,
   10,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  241,    0,   67,  241,    0,    0,    0,   22,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  241,
  241,    0,    0,    0,    0,  225,    0,    0,  225,    0,
    0,    0,    0,    0,    0,    0,   23,    0,    0,    0,
    0,   70,  225,  225,    0,    0,    0,    0,    0,    0,
  240,  240,  240,    0,  241,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   68,    0,
  842,   12,    0,    0,    0,    0,    0,  225,    0,    0,
    0,    0,    0,    0,    0,    0,  241,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    7,    6,    5,
    4,    3,    0,    0,    0,    8,    0,    0,    0,  225,
    0,    0,    0,  240,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   21,   20,
   19,   18,   17,   16,   15,   14,   13,   25,   24,   27,
   28,    0,    0,  240,   29,   30,   31,   32,   33,    0,
   34,    0,    0,    0,   35,   36,   37,   38,    0,   39,
    0,   40,    0,   41,    0,    0,   42,    0,    0,    0,
   43,   44,   45,    0,   46,   47,    0,   48,   49,   50,
    0,    0,    0,    0,    0,   26,    0,   51,   52,   53,
    0,    0,    0,    0,    0,    0,   54,   55,   56,   57,
   58,   59,   60,    7,    6,    5,    4,    3,    0,   61,
    0,    8,    0,    0,  325,   63,   64,    0,    0,    0,
    0,   65,    0,    0,  241,  241,  241,    0,    0,    0,
    0,    0,    0,    0,   21,   20,   19,   18,   17,   16,
   15,   14,   13,   25,   24,   27,   28,  225,  225,  225,
   29,   30,   31,   32,   33,    0,   34,    0,    0,    0,
   35,   36,   37,   38,    0,   39,    0,   40,    0,   41,
    0,    0,   42,    0,    0,    0,   43,   44,   45,    0,
   46,   47,    0,   48,   49,   50,    0,  241,    0,    0,
    0,   26,    0,   51,   52,   53,    0,    0,    0,    0,
    0,    0,   54,   55,   56,   57,   58,   59,   60,    0,
  225,    0,    0,    0,    0,   61,    0,  241,    0,    0,
  325,   63,   64,   11,   71,    0,   69,   65,    0,   72,
   66,    0,    0,    9,    0,   10,    0,    0,    0,    0,
  225,    0,    0,    0,    0,    0,    0,    0,    0,   67,
    0,    0,    0,    0,   22,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   23,    0,    0,    0,    0,   70,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   68,    0,    0,   12,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   11,
   71,    0,   69,    0,    0,   72,   66,    0,    0,    9,
    0,   10,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   67,    0,    0,    0,    0,
   22,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   23,    0,    0,
    0,    0,   70,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   68,
    0,    0,   12,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    7,    6,
    5,    4,    3,    0,    0,    0,    8,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   21,
   20,   19,   18,   17,   16,   15,   14,   13,   25,   24,
   27,   28,    0,    0,    0,   29,   30,   31,   32,   33,
    0,   34,    0,    0,    0,   35,   36,   37,   38,    0,
   39,    0,   40,    0,   41,    0,    0,   42,    0,    0,
    0,   43,   44,   45,    0,   46,   47,    0,   48,   49,
   50,    0,    0,    0,    0,    0,   26,    0,   51,   52,
   53,    0,    0,    0,    0,    0,    0,   54,   55,   56,
   57,   58,   59,   60,    7,    6,    5,    4,    3,    0,
   61,    0,    8,    0,    0,   62,   63,   64,    0,    0,
    0,    0,   65,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   21,   20,   19,   18,   17,
   16,   15,   14,   13,   25,   24,   27,   28,    0,    0,
    0,   29,   30,   31,   32,   33,    0,   34,    0,    0,
    0,   35,   36,   37,   38,    0,   39,    0,   40,    0,
   41,    0,    0,   42,    0,    0,    0,   43,   44,   45,
    0,   46,   47,    0,   48,   49,   50,    0,    0,    0,
    0,    0,   26,    0,   51,   52,   53,    0,    0,    0,
    0,    0,    0,   54,   55,   56,   57,   58,   59,   60,
    0,    0,    0,    0,    0,    0,   61,    0,    0,    0,
    0,  325,   63,   64,   11,   71,    0,   69,   65,    0,
   72,   66,    0,    0,    9,    0,   10,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  573,
   67,    0,    0,    0,    0,   22,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   70,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   68,    0,    0,   12,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   11,   71,    0,   69,    0,    0,   72,   66,    0,    0,
    9,    0,   10,  252,    0,    0,  252,    0,    0,  252,
    0,    0,    0,    0,    0,    0,   67,    0,    0,    0,
    0,   22,    0,  252,  252,    0,    0,    0,  252,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   70,    0,    0,    0,    0,  252,  252,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   68,    0,    0,   12,    0,    0,    0,    0,    0,  252,
  252,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    7,
    6,    5,    4,    3,    0,    0,    0,    8,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   21,   20,   19,   18,   17,   16,   15,   14,   13,   25,
   24,   27,   28,    0,    0,    0,   29,   30,   31,   32,
   33,    0,   34,    0,    0,    0,   35,   36,   37,   38,
    0,   39,    0,   40,    0,   41,    0,    0,   42,    0,
    0,    0,   43,   44,    0,    0,   46,   47,    0,   48,
   49,   50,    0,    0,    0,    0,    0,   26,    0,   51,
   52,   53,    0,    0,    0,    0,    0,    0,   54,   55,
   56,   57,   58,   59,   60,    7,    6,    5,    4,    3,
    0,   61,    0,    8,    0,    0,    0,   63,  252,  252,
  252,    0,    0,   65,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  252,  252,    0,   21,   20,   19,   18,
   17,   16,   15,   14,   13,   25,   24,   27,   28,    0,
    0,    0,   29,   30,   31,   32,   33,    0,   34,    0,
    0,    0,   35,   36,   37,   38,    0,   39,    0,   40,
    0,   41,    0,    0,   42,    0,    0,    0,   43,   44,
    0,  252,   46,   47,    0,   48,   49,   50,    0,    0,
    0,    0,    0,   26,    0,   51,   52,   53,    0,    0,
    0,    0,    0,    0,   54,   55,   56,   57,   58,   59,
   60,  252,   11,   71,    0,   69,    0,   61,   72,   66,
    0,    0,    9,   63,   10,    0,    0,    0,    0,   65,
    0,    0,    0,    0,    0,    0,    0,    0,  153,    0,
    0,    0,    0,   22,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   70,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   12,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   11,   71,
    0,   69,    0,    0,   72,   66,    0,    0,    9,    0,
   10,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  155,    0,    0,    0,    0,   22,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   70,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  270,    0,    0,  270,
    0,    0,  270,    0,    0,    0,    0,    0,    0,    0,
    0,   12,    0,    0,    0,    0,  270,  270,    0,    0,
    0,  270,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    7,    6,    5,
    4,    3,    0,    0,    0,    8,    0,    0,    0,    0,
    0,  270,  270,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   21,   20,
   19,   18,   17,   16,   15,   14,   13,   25,   24,   27,
    0,    0,  270,  270,   29,   30,   31,   32,   33,    0,
    0,    0,    0,    0,   35,   11,   71,    0,   69,    0,
    0,   72,   66,    0,    0,    9,    0,   10,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  159,    0,    0,    0,    0,   22,    0,   52,   53,
    0,    0,    0,    0,    0,    0,   54,   55,   56,   57,
   58,   59,   60,    7,    6,    5,    4,    3,    0,   61,
    0,    8,    0,    0,    0,   63,    0,    0,   70,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   21,   20,   19,   18,   17,   16,
   15,   14,   13,   25,   24,   27,    0,    0,   12,    0,
   29,   30,   31,   32,   33,    0,    0,    0,    0,    0,
   35,   11,   71,    0,   69,    0,    0,   72,   66,  260,
    0,    9,    0,   10,    0,    0,    0,    0,    0,    0,
    0,  270,  270,  270,    0,    0,    0,    0,    0,    0,
    0,    0,   22,    0,   52,   53,  270,  270,  270,  270,
  270,  270,   54,   55,   56,   57,   58,   59,   60,    0,
    0,    0,    0,    0,    0,   61,    0,    0,    0,    0,
    0,   63,    0,    0,   70,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  271,
    0,    0,  271,    0,  270,  271,    0,    0,    0,    0,
    0,    0,    0,    0,   12,    0,    0,    0,    0,  271,
  271,    0,    0,    0,  271,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  270,    0,    0,    0,    0,    0,
    7,    6,    5,    4,    3,    0,    0,    0,    8,    0,
    0,    0,    0,    0,  271,  271,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   21,   20,   19,   18,   17,   16,   15,   14,   13,
   25,   24,   27,    0,    0,  271,  271,   29,   30,   31,
   32,   33,    0,    0,    0,    0,    0,   35,   11,   71,
    0,   69,    0,  263,   72,   66,    0,    0,    9,    0,
   10,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   22,
    0,   52,   53,    0,    0,    0,    0,    0,    0,   54,
   55,   56,   57,   58,   59,   60,    7,    6,    5,    4,
    3,    0,   61,    0,    8,    0,    0,    0,   63,    0,
    0,   70,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   21,   20,   19,
   18,   17,   16,   15,   14,   13,   25,   24,   27,    0,
    0,   12,    0,   29,   30,   31,   32,   33,    0,    0,
    0,    0,    0,   35,   11,   71,    0,   69,    0,  300,
   72,   66,    0,    0,    9,    0,   10,    0,    0,    0,
    0,    0,    0,    0,  271,  271,  271,    0,    0,    0,
    0,    0,    0,    0,    0,   22,    0,   52,   53,  271,
  271,  271,  271,  271,  271,   54,   55,   56,   57,   58,
   59,   60,    0,    0,    0,    0,    0,    0,   61,    0,
    0,    0,    0,    0,   63,    0,    0,   70,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  272,    0,    0,  272,    0,  271,  272,    0,
    0,    0,    0,    0,    0,    0,    0,   12,    0,    0,
    0,    0,  272,  272,    0,    0,    0,  272,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  271,    0,    0,
    0,    0,    0,    7,    6,    5,    4,    3,    0,    0,
    0,    8,    0,    0,    0,    0,    0,  272,  272,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   21,   20,   19,   18,   17,   16,
   15,   14,   13,   25,   24,   27,    0,    0,  272,  272,
   29,   30,   31,   32,   33,    0,    0,    0,    0,    0,
   35,   11,   71,    0,   69,    0,  364,   72,   66,    0,
    0,    9,    0,   10,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   22,    0,   52,   53,    0,    0,    0,    0,
    0,    0,   54,   55,   56,   57,   58,   59,   60,    7,
    6,    5,    4,    3,    0,   61,    0,    8,    0,    0,
    0,   63,    0,    0,   70,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   21,   20,   19,   18,   17,   16,   15,   14,   13,   25,
   24,   27,    0,    0,   12,    0,   29,   30,   31,   32,
   33,    0,    0,    0,    0,    0,   35,   11,   71,    0,
   69,    0,  491,   72,   66,    0,    0,    9,    0,   10,
    0,    0,    0,    0,    0,    0,    0,  272,  272,  272,
    0,    0,    0,    0,    0,    0,    0,    0,   22,    0,
   52,   53,  272,  272,  272,  272,  272,  272,   54,   55,
   56,   57,   58,   59,   60,    0,    0,    0,    0,    0,
    0,   61,    0,    0,    0,    0,    0,   63,    0,    0,
   70,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  273,    0,    0,  273,    0,
  272,  273,    0,    0,    0,    0,    0,    0,    0,    0,
   12,    0,    0,    0,    0,  273,  273,    0,    0,    0,
  273,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  272,    0,    0,    0,    0,    0,    7,    6,    5,    4,
    3,    0,    0,    0,    8,    0,    0,    0,    0,    0,
  273,  273,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   21,   20,   19,
   18,   17,   16,   15,   14,   13,   25,   24,   27,    0,
    0,  273,  273,   29,   30,   31,   32,   33,    0,    0,
    0,    0,    0,   35,   11,   71,    0,   69,    0,  519,
   72,   66,    0,    0,    9,    0,   10,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   22,    0,   52,   53,    0,
    0,    0,    0,    0,    0,   54,   55,   56,   57,   58,
   59,   60,    7,    6,    5,    4,    3,    0,   61,    0,
    8,    0,    0,    0,   63,    0,    0,   70,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   21,   20,   19,   18,   17,   16,   15,
   14,   13,   25,   24,   27,    0,    0,   12,    0,   29,
   30,   31,   32,   33,    0,    0,    0,    0,    0,   35,
   11,   71,    0,   69,    0,  521,   72,   66,    0,    0,
    9,    0,   10,    0,    0,    0,    0,    0,    0,    0,
  273,  273,  273,    0,    0,    0,    0,    0,    0,    0,
    0,   22,    0,   52,   53,  273,  273,  273,  273,  273,
  273,   54,   55,   56,   57,   58,   59,   60,    0,    0,
    0,    0,    0,    0,   61,    0,    0,    0,    0,    0,
   63,  215,  198,   70,    0,    0,  213,  210,    0,  211,
  212,  214,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  273,  203,    0,  205,  193,    0,    0,
    0,    0,    0,   12,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  273,    0,    0,    0,    0,  197,    7,
    6,    5,    4,    3,    0,    0,    0,    8,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  196,    0,
   21,   20,   19,   18,   17,   16,   15,   14,   13,   25,
   24,   27,    0,    0,    0,    0,   29,   30,   31,   32,
   33,    0,    0,    0,    0,    0,   35,   11,   71,    0,
   69,    0,  646,   72,   66,    0,    0,    9,    0,   10,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   22,    0,
   52,   53,    0,    0,    0,    0,    0,    0,   54,   55,
   56,   57,   58,   59,   60,    7,    6,    5,    4,    3,
    0,   61,    0,    8,    0,    0,    0,   63,    0,    0,
   70,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   21,   20,   19,   18,
   17,   16,   15,   14,   13,   25,   24,   27,    0,    0,
   12,    0,   29,   30,   31,   32,   33,    0,    0,    0,
    0,  207,   35,   11,   71,    0,   69,    0,    0,   72,
   66,    0,    0,    9,    0,   10,    0,    0,    0,    0,
    0,    0,  194,  195,  202,  201,  200,  199,  206,  204,
  209,  208,  216,    0,   22,    0,   52,   53,    0,    0,
    0,    0,    0,    0,   54,   55,   56,   57,   58,   59,
   60,    0,    0,    0,    0,    0,  274,   61,    0,  274,
    0,    0,  274,   63,  299,  299,   70,  299,  299,  299,
  299,  299,  299,  299,  299,    0,  274,  274,    0,    0,
    0,  274,    0,    0,    0,  299,  299,  299,    0,  299,
  299,    0,    0,    0,    0,    0,   12,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  274,  274,    0,    0,    0,    0,    0,    0,    0,
  299,  299,    7,    6,    5,    4,    3,    0,    0,    0,
    8,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  274,  274,    0,    0,    0,    0,    0,    0,
    0,  299,  299,   21,   20,   19,   18,   17,   16,   15,
   14,   13,   25,   24,   27,    0,    0,    0,    0,   29,
   30,   31,   32,   33,    0,    0,    0,    0,    0,   35,
   11,   71,    0,   69,    0,    0,   72,   66,    0,    0,
    9,    0,   10,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   22,    0,   52,   53,    0,    0,    0,    0,    0,
    0,   54,   55,   56,   57,   58,   59,   60,    7,    6,
    5,    4,    3,    0,   61,    0,    8,    0,    0,    0,
   63,    0,    0,   70,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   21,
   20,   19,   18,   17,   16,   15,   14,   13,   25,   24,
   27,    0,    0,   12,    0,   29,   30,   31,   32,   33,
    0,  274,  274,  274,  299,   35,    0,    0,    0,    0,
  299,  299,  299,    0,    0,    0,  274,  274,  274,  274,
  274,  274,    0,    0,    0,  299,  299,  299,  299,  299,
  299,  299,  299,  299,  299,  299,  215,  198,    0,   52,
   53,  213,  210,    0,  211,  212,  214,   54,   55,   56,
   57,   58,   59,   60,    0,    0,    0,    0,    0,  203,
   61,  205,    0,    0,  274,    0,   63,    0,    0,    0,
    0,    0,    0,  299,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  300,  300,    0,  300,  300,  300,  300,
  300,  300,  300,  300,  274,    0,    0,    0,    0,    0,
    0,    0,    0,  299,  300,  300,  300,    0,  300,  300,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  297,    0,    0,    0,    7,    6,    5,    4,    3,
    0,    0,    0,    8,    0,    0,    0,    0,    0,  300,
  300,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   21,   20,   19,   18,
   17,   16,   15,   14,   13,   25,   24,   27,    0,    0,
  300,  300,   29,   30,   31,  449,   33,    0,    0,    0,
    0,    0,   35,  326,  326,    0,    0,  326,  326,  326,
  326,  326,  326,  326,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  326,  326,  326,    0,  326,  326,
    0,    0,    0,    0,    0,    0,   52,   53,    0,    0,
    0,    0,    0,    0,   54,   55,   56,   57,   58,   59,
   60,    0,    0,    0,    0,    0,    0,   61,    0,  326,
  326,    0,    0,   63,    0,    0,    0,    0,    0,  215,
  198,    0,    0,    0,  213,  210,  207,  211,  212,  214,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  326,  326,  203,    0,  205,  193,    0,    0,    0,  202,
  201,  200,  199,  206,  204,  209,  208,  216,    0,    0,
    0,  358,  358,    0,  353,  358,  358,  358,  358,  358,
  358,  358,    0,  300,    0,    0,  197,    0,    0,  300,
  300,  300,  358,  358,  358,  358,  358,  358,    0,    0,
    0,    0,    0,    0,  300,  300,  300,  300,  300,  300,
  300,  300,  300,  300,  300,    0,  196,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  358,  358,    0,
  342,  342,    0,    0,  145,  342,  342,  145,  342,  342,
  342,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  300,  342,    0,  342,  342,    0,  358,  358,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  359,  359,    0,  354,  359,  359,  359,  359,  359,
  359,  359,  300,  326,    0,    0,    0,  342,    0,  326,
  326,  326,  359,  359,  359,  359,  359,  359,    0,    0,
  298,    0,    0,    0,  326,  326,  326,  326,  326,  326,
  326,  326,  326,  326,  326,    0,    0,  342,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  359,  359,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  207,
    0,    0,  326,    0,    0,  190,  191,  192,  359,  359,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  194,  195,  202,  201,  200,  199,  206,  204,  209,  208,
  216,    0,  326,    0,    0,    0,    0,    0,    0,    0,
    0,  358,    0,    0,    0,    0,    0,  358,  358,  358,
  297,  358,  358,  358,  358,  358,  358,  358,  358,  358,
  358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
  358,  358,  358,    0,    0,    0,    0,    0,    0,    0,
  358,  358,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  589,    0,
  342,    0,    0,    0,    0,    0,  342,  342,  342,    0,
  358,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  342,  342,  342,  342,  342,  342,  342,  342,  342,
  342,  342,    0,    0,    0,    0,    0,    0,    0,  358,
  358,  359,    0,    0,    0,    0,    0,  359,  359,  359,
    0,  359,  359,  359,  359,  359,  359,  359,  359,  359,
  359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
  359,  359,  359,    0,    0,    0,    0,    0,    0,    0,
  359,  359,    0,    0,    0,    0,    0,    0,    0,    0,
  353,  353,    0,  353,  353,  353,  353,  353,  353,  353,
  353,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  359,  353,  353,  353,  353,  353,  353,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  368,  368,    0,
  368,  368,  368,  368,  368,  368,  368,  368,    0,  359,
  359,    0,    0,    0,    0,    0,  353,  353,  368,  368,
  368,  368,  368,  368,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  353,  353,    0,
  215,  198,    0,  368,  368,  213,  210,    0,  211,  212,
  214,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  203,    0,  205,    0,    0,    0,    0,
    0,    0,    0,    0,  368,  368,    0,    0,    0,    0,
    0,  354,  354,    0,  354,  354,  354,  354,  354,  354,
  354,  354,    0,    0,    0,    0,    0,  197,    0,    0,
    0,    0,  354,  354,  354,  354,  354,  354,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  355,  355,
    0,    0,  355,  355,  355,  355,  355,  355,  355,    0,
    0,    0,    0,    0,    0,    0,    0,  354,  354,  355,
  355,  355,  355,  355,  355,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  354,  354,
  353,    0,    0,    0,  355,  355,  353,  353,  353,    0,
  353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
  353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
  353,  353,    0,    0,    0,  355,  355,  368,    0,  353,
  353,    0,    0,  368,  368,  368,    0,  368,  368,  368,
  368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
  368,  368,  368,  368,  368,  368,  368,  368,  368,  353,
    0,    0,    0,    0,    0,    0,  368,  368,  215,    0,
    0,    0,    0,  213,  210,    0,  211,  212,  214,    0,
  207,    0,    0,    0,    0,    0,    0,    0,  353,  353,
    0,  203,    0,  205,    0,    0,  368,    0,    0,    0,
    0,    0,    0,  202,  201,  200,  199,  206,  204,  209,
  208,  216,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  354,    0,    0,    0,  368,  368,  354,  354,  354,
    0,  354,  354,  354,  354,  354,  354,  354,  354,  354,
  354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
  354,  354,  354,    0,    0,    0,    0,    0,  355,    0,
  354,  354,    0,    0,  355,  355,  355,    0,  355,  355,
  355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
  355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
  354,    0,    0,    0,    0,    0,    0,  355,  355,    0,
    0,    0,    0,    0,    0,    0,    0,  352,  352,    0,
    0,  352,  352,  352,  352,  352,  352,  352,    0,  354,
  354,    0,    0,    0,    0,    0,    0,  355,  352,  352,
  352,  352,  352,  352,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  347,  347,    0,    0,  347,  347,
  347,  347,  347,  347,  347,    0,  355,  355,    0,    0,
    0,    0,    0,  352,  352,  347,  347,  347,  347,  347,
  347,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  207,    0,
    0,    0,    0,    0,  352,  352,    0,    0,    0,    0,
  347,  347,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  202,  201,  200,  199,  206,  204,  209,  208,  216,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  347,  347,    0,  346,  346,    0,    0,  346,  346,
  346,  346,  346,  346,  346,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  346,  346,  346,  346,  346,
  346,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  268,    0,    0,  268,    0,
    0,  268,    0,    0,    0,    0,    0,    0,    0,    0,
  346,  346,    0,    0,    0,  268,  268,    0,    0,    0,
  268,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  346,  346,    0,    0,    0,    0,  352,    0,    0,
  268,  268,    0,  352,  352,  352,    0,  352,  352,  352,
  352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
  352,  352,  352,  352,  352,  352,  352,  352,  352,    0,
    0,  268,  268,    0,  347,    0,  352,  352,    0,    0,
  347,  347,  347,    0,  347,  347,  347,  347,  347,  347,
  347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
  347,  347,  347,  347,  347,  347,  352,    0,    0,    0,
    0,    0,    0,  347,  347,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  352,  352,    0,    0,    0,
  343,  343,    0,  347,  343,  343,  343,  343,  343,  343,
  343,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  343,  343,  343,  346,  343,  343,    0,    0,    0,
  346,  346,  346,  347,  346,  346,  346,  346,  346,  346,
  346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  346,  346,  346,  346,  346,  343,  343,    0,    0,
    0,    0,    0,  346,  346,    0,    0,    0,    0,    0,
  268,  268,  268,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  268,  268,  343,  343,    0,
    0,    0,    0,  346,  358,  358,    0,  358,  358,  358,
  358,  358,  358,  358,  358,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  358,  358,  358,    0,  358,
  358,    0,    0,  346,    0,    0,    0,    0,    0,    0,
    0,  359,  359,  268,  359,  359,  359,  359,  359,  359,
  359,  359,    0,    0,    0,    0,    0,    0,    0,    0,
  358,  358,  359,  359,  359,    0,  359,  359,    0,    0,
    0,    0,    0,  268,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  358,  358,    0,    0,    0,    0,  359,  359,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  359,  359,
  343,    0,    0,    0,    0,    0,  343,  343,  343,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  343,  343,  343,  343,  343,  343,  343,  343,  343,
  343,  343,    0,    0,    0,    0,    0,    0,    0,  345,
  345,  303,  303,    0,  303,  303,  303,  303,  303,  303,
  303,  303,    0,    0,  260,    0,    0,  260,    0,    0,
  260,    0,  303,  303,  303,    0,  303,  303,    0,  343,
    0,    0,    0,    0,  260,  260,  260,    0,  260,  260,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  358,    0,    0,  303,  303,  343,
  358,  358,  358,    0,    0,    0,    0,    0,    0,  260,
  260,    0,    0,    0,    0,  358,  358,  358,  358,  358,
  358,  358,  358,  358,  358,  358,    0,    0,  303,  303,
    0,  359,    0,    0,    0,    0,    0,  359,  359,  359,
  260,  260,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  359,  359,  359,  359,  359,  359,  359,  359,
  359,  359,  359,  358,  302,  302,    0,  302,  302,  302,
  302,  302,  302,  302,  302,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  302,  302,  302,    0,  302,
  302,    0,  358,  358,    0,    0,    0,    0,    0,    0,
  359,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  307,  307,
  302,  302,  307,  307,  307,  307,  307,  307,  307,  359,
  359,    0,    0,    0,    0,    0,    0,    0,    0,  307,
  307,  307,    0,  307,  307,    0,    0,    0,    0,    0,
    0,  302,  302,    0,    0,    0,    0,    0,    0,    0,
    0,  303,    0,    0,    0,    0,    0,  303,  303,  303,
    0,    0,    0,  260,  307,  307,    0,    0,    0,  260,
  260,  260,  303,  303,  303,  303,  303,  303,  303,  303,
  303,  303,  303,    0,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,    0,  307,  307,    0,    0,    0,
    0,    0,  426,  426,    0,    0,  426,  426,  426,  426,
  426,  426,  426,    0,    0,    0,    0,    0,    0,    0,
  303,    0,    0,  426,  426,  426,    0,  426,  426,    0,
    0,    0,  260,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  303,    0,    0,    0,    0,    0,    0,    0,  426,  426,
  215,  198,  260,    0,    0,  213,  210,    0,  211,  212,
  214,    0,    0,    0,  302,    0,    0,    0,    0,    0,
  302,  302,  302,  203,    0,  205,    0,    0,    0,  426,
  426,    0,    0,    0,    0,  302,  302,  302,  302,  302,
  302,  302,  302,  302,  302,  302,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  197,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  307,    0,
    0,    0,    0,    0,  307,  307,  307,    0,    0,    0,
    0,    0,    0,  302,    0,    0,    0,  196,    0,  307,
  307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  302,    0,    0,    0,  310,  310,    0,
    0,  310,  310,  310,  310,  310,  310,  310,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  307,  310,  310,
  310,    0,  310,  310,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  426,    0,    0,    0,    0,  307,  426,  426,
  426,    0,    0,  310,  310,    0,    0,    0,    0,    0,
    0,    0,    0,  426,  426,  426,  426,  426,  426,  426,
  426,  426,  426,  426,    0,    0,    0,    0,    0,    0,
    0,    0,  264,  264,  310,  310,  264,  264,  264,  264,
  264,  264,  264,    0,    0,    0,    0,    0,    0,    0,
  207,    0,    0,  264,  264,  264,    0,  264,  264,    0,
    0,  426,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  194,  195,  202,  201,  200,  199,  206,  204,  209,
  208,  216,    0,    0,    0,    0,    0,    0,  264,  264,
    0,  426,  257,  257,    0,    0,  257,  257,  257,  257,
  257,  257,  257,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  257,  257,  257,    0,  257,  257,  264,
  264,    0,    0,    0,    0,    0,    0,    0,    0,  258,
  258,    0,    0,  258,  258,  258,  258,  258,  258,  258,
    0,    0,    0,    0,    0,    0,    0,    0,  257,  257,
  258,  258,  258,    0,  258,  258,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  310,    0,    0,
    0,    0,    0,  310,  310,  310,    0,    0,    0,  257,
  257,    0,    0,    0,    0,  258,  258,    0,  310,  310,
  310,  310,  310,  310,  310,  310,  310,  310,  310,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  215,  198,  258,  258,    0,  213,
  210,    0,  211,  212,  214,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  310,  203,    0,  205,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  264,    0,    0,    0,    0,    0,  264,  264,
  264,    0,    0,    0,    0,    0,  310,    0,    0,    0,
    0,  197,    0,  264,  264,  264,  264,  264,  264,  264,
  264,  264,  264,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  196,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  257,    0,    0,    0,    0,    0,  257,  257,
  257,  264,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  257,  257,  257,  257,  257,  257,  257,
  257,  257,  257,    0,    0,    0,    0,    0,    0,  258,
    0,  264,    0,    0,    0,  258,  258,  258,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
    0,  257,  259,  259,    0,    0,  259,  259,  259,  259,
  259,  259,  259,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  259,  259,  259,    0,  259,  259,    0,
    0,  257,    0,    0,    0,    0,    0,    0,  258,    0,
  262,    0,    0,  262,    0,  262,  262,  262,  262,    0,
    0,    0,    0,    0,  207,    0,    0,    0,  259,  259,
  262,  262,  262,    0,  262,  262,    0,    0,  258,    0,
    0,    0,    0,    0,    0,    0,  195,  202,  201,  200,
  199,  206,  204,  209,  208,  216,    0,    0,    0,  259,
  259,    0,    0,    0,    0,  262,  262,  263,    0,    0,
  263,    0,  263,  263,  263,  263,    0,    0,  255,    0,
    0,  255,    0,  255,  255,  255,  255,  263,  263,  263,
    0,  263,  263,    0,    0,    0,  262,  262,  255,  255,
  255,    0,  255,  255,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  263,  263,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  255,  255,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  263,  263,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  255,  255,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  256,    0,    0,  256,    0,  256,  256,
  256,  256,  259,    0,    0,    0,    0,    0,  259,  259,
  259,    0,    0,  256,  256,  256,    0,  256,  256,    0,
    0,    0,    0,  259,  259,  259,  259,  259,  259,  259,
  259,  259,  259,    0,    0,    0,    0,    0,    0,  262,
    0,    0,    0,    0,    0,  262,  262,  262,  256,  256,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
    0,  259,    0,    0,    0,    0,    0,    0,    0,  256,
  256,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  263,    0,    0,    0,
    0,  259,  263,  263,  263,    0,    0,  255,  262,    0,
    0,    0,    0,  255,  255,  255,    0,  263,  263,  263,
  263,  263,  263,  263,  263,  263,  263,    0,  255,  255,
  255,  255,  255,  255,  255,  255,  255,  255,  262,    0,
    0,    0,  254,    0,    0,  254,    0,  254,  254,  254,
  254,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  254,  254,  254,  263,  254,  254,    0,    0,
    0,    0,    0,    0,    0,    0,  255,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  263,    0,  254,  254,    0,
    0,  261,    0,    0,  261,    0,  255,  261,    0,    0,
    0,    0,  256,    0,    0,    0,    0,    0,  256,  256,
  256,  261,  261,  261,    0,  261,  261,    0,  254,  254,
    0,    0,    0,  256,  256,  256,  256,  256,  256,  256,
  256,  256,  256,  269,    0,    0,  269,    0,    0,  269,
    0,    0,  266,    0,    0,  266,  261,  261,  266,    0,
    0,    0,    0,  269,  269,    0,    0,    0,  269,    0,
    0,    0,  266,  266,    0,    0,  267,  266,    0,  267,
    0,  256,  267,    0,    0,    0,    0,  261,  261,    0,
    0,    0,    0,    0,    0,    0,  267,  267,  269,  269,
    0,  267,    0,    0,    0,    0,    0,  266,  266,    0,
    0,  256,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  269,
  269,  267,  267,    0,    0,    0,    0,    0,  266,  266,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  254,  267,  267,    0,    0,    0,  254,  254,  254,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  254,  254,  254,  254,  254,  254,  254,  254,
  254,  254,    0,    0,    0,    0,    0,    0,  343,  343,
    0,    0,    0,  343,  343,    0,  343,  343,  343,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  261,  343,    0,  343,  343,    0,  261,  261,  261,    0,
  254,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,    0,    0,    0,    0,  343,    0,    0,    0,    0,
  254,    0,    0,    0,    0,    0,    0,    0,  269,  269,
  269,    0,    0,    0,    0,    0,    0,  266,  266,  266,
    0,    0,    0,  269,  269,  343,    0,    0,    0,  261,
    0,    0,  266,  266,    0,    0,    0,    0,    0,  342,
  342,  267,  267,  267,  342,  342,    0,  342,  342,  342,
    0,    0,    0,    0,    0,    0,  267,  267,    0,  261,
    0,    0,  342,    0,  342,  342,    0,    0,    0,    0,
    0,  269,    0,    0,    0,    0,    0,    0,    0,    0,
  266,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  342,    0,    0,    0,
    0,  269,    0,    0,  267,    0,    0,    0,    0,    0,
  266,    0,  343,  343,    0,    0,  146,  343,  343,  146,
  343,  343,  343,    0,    0,    0,  342,    0,    0,    0,
    0,    0,    0,    0,  267,  343,    0,  343,  343,    0,
    0,    0,    0,    0,    0,    0,    0,  343,  343,    0,
    0,  149,  343,  343,  149,  343,  343,  343,  343,    0,
    0,    0,    0,    0,  343,  343,  343,    0,    0,  343,
  343,    0,  343,  343,    0,    0,    0,    0,    0,  343,
  343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
    0,    0,    0,    0,    0,    0,    0,  345,  345,  343,
    0,    0,    0,    0,  343,  343,  343,    0,    0,    0,
  343,  343,    0,  343,  343,  343,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   38,  343,    0,
  343,  343,    0,    0,  343,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  215,  198,    0,
    0,    0,  213,  210,    0,  211,  212,  214,    0,  342,
    0,    0,  343,    0,    0,  342,  342,  342,  694,  695,
  203,    0,  205,  193,    0,    0,    0,    0,    0,    0,
  342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
  342,    0,  343,  342,  342,    0,    0,  148,  342,  342,
  148,  342,  342,  342,  197,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  342,    0,  342,  342,
    0,    0,    0,    0,    0,    0,    0,    0,   42,    0,
    0,    0,  343,    0,  196,    0,    0,    0,  343,  343,
  343,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  342,    0,    0,  343,  343,  343,  343,  343,  343,  343,
  343,  343,  343,  343,    0,    0,    0,  343,    0,    0,
    0,  345,  345,  343,  343,  343,    0,    0,    0,    0,
  342,    0,    0,    0,    0,    0,    0,    0,  343,  343,
  343,  343,  343,  343,  343,  343,  343,  343,  343,    0,
    0,    0,    0,    0,    0,    0,  345,  345,    0,    0,
    0,    0,  215,  198,    0,    0,    0,  213,  210,    0,
  211,  212,  214,    0,    0,  343,    0,    0,    0,    0,
    0,  343,  343,  343,  217,  203,    0,  205,  193,    0,
    0,    0,    0,    0,    0,    0,  343,  343,  343,  343,
  343,  343,  343,  343,  343,  343,  343,    0,    0,    0,
    0,    0,    0,    0,  345,  345,    0,  207,    0,  197,
    0,    0,    0,  190,  191,  192,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  194,  195,
  202,  201,  200,  199,  206,  204,  209,  208,  216,  196,
  215,  198,    0,    0,    0,  213,  210,    0,  211,  212,
  214,    0,    0,  342,    0,    0,    0,    0,    0,  342,
  342,  342,  279,  203,    0,  205,  193,    0,    0,    0,
    0,    0,    0,    0,  342,  342,  342,  342,  342,  342,
  342,  342,  342,  342,  342,    0,  215,  198,    0,    0,
    0,  213,  210,    0,  211,  212,  214,  197,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  280,  203,
    0,  205,  193,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  215,  198,    0,  196,    0,  213,
  210,    0,  211,  212,  214,    0,    0,    0,    0,    0,
    0,    0,    0,  197,    0,    0,  285,  203,    0,  205,
  193,    0,    0,    0,    0,    0,    0,    0,    0,  215,
  198,    0,    0,  324,  213,  210,    0,  211,  212,  214,
    0,    0,  207,  196,    0,    0,    0,    0,  190,  191,
  192,  197,  203,    0,  205,  193,    0,    0,    0,    0,
    0,    0,    0,  194,  195,  202,  201,  200,  199,  206,
  204,  209,  208,  216,    0,    0,    0,    0,    0,    0,
    0,  196,    0,  215,  198,    0,  197,  396,  213,  210,
    0,  211,  212,  214,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  203,    0,  205,  193,
    0,    0,    0,    0,    0,    0,  196,    0,    0,    0,
    0,    0,    0,  215,  198,    0,    0,  412,  213,  210,
  207,  211,  212,  214,    0,    0,  190,  191,  192,    0,
  197,    0,    0,    0,    0,    0,  203,    0,  205,  193,
    0,  194,  195,  202,  201,  200,  199,  206,  204,  209,
  208,  216,    0,    0,    0,    0,    0,    0,    0,    0,
  196,    0,    0,    0,    0,    0,  207,    0,    0,    0,
  197,    0,  190,  191,  192,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  194,  195,  202,
  201,  200,  199,  206,  204,  209,  208,  216,    0,    0,
  196,    0,    0,    0,  207,    0,    0,    0,    0,    0,
  190,  191,  192,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  194,  195,  202,  201,  200,
  199,  206,  204,  209,  208,  216,    0,    0,    0,  207,
    0,    0,    0,    0,    0,  190,  191,  192,  215,  198,
    0,    0,  413,  213,  210,    0,  211,  212,  214,    0,
  194,  195,  202,  201,  200,  199,  206,  204,  209,  208,
  216,  203,    0,  205,  193,    0,    0,    0,    0,    0,
    0,  215,  198,    0,    0,  420,  213,  210,    0,  211,
  212,  214,    0,  207,    0,    0,    0,    0,    0,  190,
  191,  192,    0,    0,  203,  197,  205,  193,    0,    0,
    0,    0,    0,    0,  194,  195,  202,  201,  200,  199,
  206,  204,  209,  208,  216,    0,    0,    0,    0,    0,
    0,    0,    0,  207,    0,  196,    0,    0,  197,  190,
  191,  192,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  194,  195,  202,  201,  200,  199,
  206,  204,  209,  208,  216,  215,  198,    0,  196,  427,
  213,  210,    0,  211,  212,  214,  215,  198,    0,    0,
    0,  213,  210,    0,  211,  212,  214,    0,  203,    0,
  205,  193,    0,    0,    0,    0,    0,    0,    0,  203,
    0,  205,  193,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  215,  198,    0,    0,    0,
  213,  210,  197,  211,  212,  214,    0,    0,    0,    0,
    0,    0,    0,  197,    0,    0,  459,    0,  203,    0,
  205,  193,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  196,    0,    0,    0,    0,    0,    0,    0,
    0,  215,  198,  196,  458,    0,  213,  210,  207,  211,
  212,  214,  197,    0,  190,  191,  192,    0,    0,    0,
    0,    0,    0,    0,  203,    0,  205,  193,    0,  194,
  195,  202,  201,  200,  199,  206,  204,  209,  208,  216,
    0,  207,  196,    0,    0,    0,    0,  190,  191,  192,
    0,  215,  198,    0,    0,    0,  213,  210,  197,  211,
  212,  214,  194,  195,  202,  201,  200,  199,  206,  204,
  209,  208,  216,    0,  203,    0,  205,  193,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  196,  478,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  197,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  207,    0,    0,    0,    0,
    0,  190,  191,  192,    0,    0,  207,    0,  196,  512,
    0,    0,  190,  191,  192,    0,  194,  195,  202,  201,
  200,  199,  206,  204,  209,  208,  216,  194,  195,  202,
  201,  200,  199,  206,  204,  209,  208,  216,  215,  198,
    0,    0,    0,  213,  210,  207,  211,  212,  214,    0,
    0,  190,  191,  192,    0,    0,    0,    0,    0,    0,
    0,  203,    0,  205,  193,    0,  194,  195,  202,  201,
  200,  199,  206,  204,  209,  208,  216,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  207,    0,    0,    0,  197,    0,  190,  191,  192,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  194,  195,  202,  201,  200,  199,  206,  204,
  209,  208,  216,    0,    0,  196,  526,  215,  198,    0,
    0,    0,  213,  210,    0,  211,  212,  214,    0,    0,
    0,  207,    0,    0,    0,    0,    0,  190,  191,  192,
  203,    0,  205,  193,    0,    0,    0,    0,    0,    0,
    0,    0,  194,  195,  202,  201,  200,  199,  206,  204,
  209,  208,  216,  215,  198,    0,    0,  567,  213,  210,
    0,  211,  212,  214,  197,  215,  198,    0,    0,    0,
  213,  210,    0,  211,  212,  214,  203,    0,  205,  193,
    0,    0,    0,    0,    0,    0,    0,    0,  203,    0,
  205,  193,    0,    0,  196,  548,    0,    0,  215,  198,
    0,    0,    0,  213,  210,    0,  211,  212,  214,    0,
  197,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  203,  197,  205,  193,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  207,    0,
  196,    0,    0,    0,  190,  191,  192,    0,    0,    0,
    0,    0,  196,  615,  649,  197,    0,    0,    0,  194,
  195,  202,  201,  200,  199,  206,  204,  209,  208,  216,
    0,    0,  215,  198,    0,    0,  752,  213,  210,    0,
  211,  212,  214,  327,  327,  196,    0,    0,  327,  327,
    0,  327,  327,  327,    0,  203,    0,  205,  193,    0,
    0,    0,    0,    0,    0,    0,  327,    0,  327,  327,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  207,    0,  197,
    0,    0,    0,  190,  191,  192,    0,    0,    0,    0,
  327,    0,    0,    0,    0,    0,    0,    0,  194,  195,
  202,  201,  200,  199,  206,  204,  209,  208,  216,  196,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  327,  327,    0,  207,    0,    0,    0,    0,    0,  190,
  191,  192,    0,    0,    0,  207,    0,    0,    0,    0,
    0,  190,  191,  192,  194,  195,  202,  201,  200,  199,
  206,  204,  209,  208,  216,    0,  194,  195,  202,  201,
  200,  199,  206,  204,  209,  208,  216,    0,  207,    0,
    0,    0,    0,    0,  190,  191,  192,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  194,
  195,  202,  201,  200,  199,  206,  204,  209,  208,  216,
  215,  198,    0,    0,    0,  213,  210,    0,  211,  212,
  214,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  203,    0,  205,  193,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  207,    0,    0,    0,    0,    0,  190,  191,
  192,    0,    0,  327,    0,    0,    0,  197,    0,  327,
  327,  327,    0,  194,  195,  202,  201,  200,  199,  206,
  204,  209,  208,  216,  327,  327,  327,  327,  327,  327,
  327,  327,  327,  327,  327,  342,  342,  196,    0,    0,
  342,  342,    0,  342,  342,  342,  215,  198,    0,    0,
    0,  213,  210,    0,  211,  212,  214,    0,  342,    0,
  342,  342,    0,    0,    0,    0,    0,    0,    0,  203,
    0,  205,  193,    0,    0,    0,    0,    0,    0,  215,
  198,    0,    0,    0,  213,  210,    0,  211,  212,  214,
    0,    0,  342,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  203,  197,  205,  193,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  215,  198,    0,    0,    0,
  213,  210,  342,  211,  212,  214,    0,    0,    0,    0,
    0,    0,    0,  196,    0,    0,  197,    0,  203,    0,
  205,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  196,    0,    0,    0,
  207,    0,  197,    0,    0,    0,  190,  191,  192,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  194,  195,  202,  201,  200,  199,  206,  204,  209,
  208,  216,  196,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  342,    0,    0,    0,    0,
    0,  342,  342,  342,    0,    0,  207,    0,    0,    0,
    0,    0,    0,  191,  192,    0,  342,  342,  342,  342,
  342,  342,  342,  342,  342,  342,  342,  194,  195,  202,
  201,  200,  199,  206,  204,  209,  208,  216,    0,  207,
    0,    0,    0,    0,    0,    0,    0,  192,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  194,  195,  202,  201,  200,  199,  206,  204,  209,  208,
  216,    0,    0,    0,    0,  207,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  202,  201,
  200,  199,  206,  204,  209,  208,  216,
  );
 var $yyCheck = array(            13,
   14,   24,    2,   24,    2,   24,   36,   13,   14,    2,
   24,  255,  230,   24,   91,    0,   36,  123,   38,   36,
  163,  403,  404,  241,   91,  263,   36,  169,   46,  247,
   38,  307,   36,   36,  252,   59,   64,  255,   40,   37,
   46,  257,   65,  421,   40,   44,   65,  307,   38,   36,
   64,   65,   36,  307,   65,   36,   36,   33,  125,   36,
   59,   37,  300,   38,  603,   36,   42,   43,   36,   45,
   46,   47,   33,  333,   36,   44,   37,   40,  101,   36,
   38,   42,   43,   41,   45,   46,   47,   59,   41,   59,
   59,   44,   41,  123,   41,   44,  309,   44,   37,  123,
  376,   38,   91,   42,  358,  487,   59,  489,   47,   40,
   59,   58,   59,  123,  137,  603,  376,   40,  500,  379,
  709,  660,  376,  383,  384,   41,  144,  123,   44,   40,
  719,   37,  150,  672,  123,  307,   42,   43,  144,   45,
   46,   47,   58,   59,  150,  557,   93,   41,   91,   44,
   44,  123,   44,  123,   40,  169,  125,   41,  172,  173,
  174,  333,   40,  169,   58,   59,  172,  173,  174,   63,
   44,  553,  660,   41,  374,   59,   44,   93,  125,  240,
  123,  323,  398,  125,  672,   59,   40,  403,  404,  307,
  568,  309,  253,  216,  606,  216,  608,  216,   93,   93,
   41,   93,  216,   44,  376,  216,  603,  230,   44,  125,
   40,  383,  384,  610,   41,  333,  715,   44,  241,  230,
  602,  618,  240,   59,  247,  724,  296,  297,   91,  252,
  241,  125,  255,  123,  240,  253,  247,   44,  620,   40,
  622,  252,  741,  257,  255,   40,  745,  253,  354,  263,
   40,  633,   59,  491,  125,  344,  345,  263,  376,  125,
  642,  379,  351,  352,   41,  383,  384,   44,   40,  666,
  667,  487,  307,  489,  309,  310,   44,  307,  355,  309,
   44,  519,   59,  521,  500,  299,  300,  307,   40,  309,
  307,   59,  309,  299,  300,   59,  299,  307,  321,  309,
  314,  309,  321,  307,  307,  309,  309,  321,  314,  323,
  321,  302,  303,  315,  558,  382,  263,  323,  700,  309,
  296,  297,  309,  307,  355,  309,  307,  307,  309,  309,
   40,  569,  309,   44,  309,  296,  297,  553,  309,  125,
  558,  309,   58,   59,  726,  307,  376,  309,   59,  288,
  364,  309,  309,  357,  123,  737,  376,  380,  364,  344,
  345,   44,  744,  125,  746,   40,  351,  352,  612,  263,
  264,  265,  376,  376,  756,  374,   59,  125,  288,  326,
  286,  287,  288,   44,  278,  767,  602,  329,  330,  403,
  404,  374,  630,  378,  612,  376,  376,  793,   59,  417,
  307,  462,  463,  356,  620,  381,  622,  789,  646,  356,
  326,  417,  473,   40,  376,  413,  812,  633,  814,  433,
  381,  374,  420,   44,  820,  355,  642,  433,  824,  374,
  573,   34,  326,   70,   71,   72,   39,  460,   59,  460,
  356,  460,   13,   14,  462,  463,  460,   61,   41,  460,
  307,   44,  466,  453,  468,  473,  462,  463,  329,  330,
  453,   40,  356,  329,  330,   58,   59,  473,   41,  318,
  307,   44,   44,  487,  123,  489,  333,  491,  341,  342,
  343,  344,  345,  346,  700,  491,  500,   59,  326,   37,
   93,   44,   59,   96,   42,   43,  639,   45,   46,   47,
   93,  515,   44,  517,  502,  519,   59,  521,  307,  515,
  726,  517,  315,  519,   59,  521,   44,   59,   44,  376,
  123,  737,  125,  307,   41,  351,  383,  384,  744,  543,
  746,   59,  125,   59,  333,  558,  351,  307,   41,  553,
  756,   44,  307,  329,  330,  307,   44,  558,  307,  333,
   43,  767,   45,  696,   44,  569,  570,  307,  344,  345,
  663,   59,   40,  569,  570,  351,  352,  309,  582,   59,
  584,  333,   41,  789,   44,  678,   41,  376,  584,   44,
  379,  329,  330,  333,  383,  384,  344,  345,  602,  612,
  733,   40,  376,  351,  352,  609,  344,  345,   59,  383,
  384,  612,   41,  351,  352,   44,  620,   41,  622,   41,
   44,   34,   44,  742,  376,  758,  630,  379,   44,  633,
  378,  383,  384,  307,  630,   40,  376,  625,  642,  379,
  759,   41,  646,  383,  384,   41,   39,   41,    3,    4,
  646,    6,    7,    8,    9,   10,   11,   12,  662,  257,
   15,   16,   17,   18,   19,   20,   21,   44,  787,  307,
   25,   41,  791,  677,   44,  794,   59,  810,   91,  798,
   93,   36,  686,   41,   41,  123,   44,   44,   43,   44,
  686,   46,   40,   48,  827,  333,  700,  685,   91,   40,
   93,   58,   59,   40,  353,  709,   41,  840,  353,   44,
  123,   66,  125,   41,  307,  719,  309,  310,   40,  312,
  313,  314,  726,   58,   59,   93,   41,   41,   63,   44,
  123,   41,  125,  737,   44,   40,   93,  374,  376,  326,
  744,  379,  746,  326,   41,  383,  384,   44,   58,   59,
  288,  106,  756,  344,  345,   61,   41,   61,   93,   44,
  351,  352,  326,  767,  752,  753,  754,  123,  125,  344,
  345,  126,   41,  356,   40,   44,  351,  352,  371,  372,
  373,  805,  337,   93,   59,  789,  141,  378,  143,  144,
  125,  795,  307,  148,  149,  150,   91,  152,  125,  823,
   41,  825,   41,   44,  828,  403,  404,   41,  832,   41,
   44,  815,   44,  307,  354,  125,  123,  821,   61,   41,
  123,  176,  305,  306,  307,  355,  307,   91,   59,  307,
   59,  186,  315,   41,   44,  190,  191,  192,  193,  194,
  195,  196,  197,  198,  199,  200,  201,  202,  203,  204,
  205,  206,  207,  208,  209,  210,  211,  212,  213,  214,
  215,  125,   40,  218,  219,  220,  221,  222,  223,  224,
  225,  226,  227,  228,  229,  358,  359,  360,  361,  362,
  363,   61,  305,  306,  307,  240,  376,  242,  243,  487,
   59,  489,  315,  376,  307,   41,  309,  310,  253,  312,
  313,  314,  500,   41,  125,  123,  263,  264,  265,   44,
   41,  355,   93,  268,  307,  307,  309,  310,   41,  312,
  313,  314,  341,  342,  343,  344,  345,  346,  263,  264,
  265,  356,   44,  288,   91,   59,  359,  360,  361,  362,
  363,   61,  355,  278,  279,  309,  123,   61,   41,   91,
   93,   44,  326,  263,  264,  553,   40,  356,  313,  372,
  373,   41,  355,   61,  309,   58,   59,  125,  125,  326,
   41,   41,  125,  307,   44,  307,  309,  356,   41,  372,
  373,   41,   59,  125,  309,   61,   41,   40,   58,   59,
  307,  326,   61,   63,   61,   61,  123,   40,  307,  356,
   93,  309,   37,   38,  602,   61,  307,   42,   43,    0,
   45,   46,   47,   41,   40,   61,  326,   40,  380,   41,
   40,  356,  620,   93,  622,   60,   40,   62,   63,   41,
   41,   40,  125,  388,  385,  633,   41,   91,  337,   41,
   44,  123,   33,   34,  642,   36,  356,  309,   39,   40,
  123,   41,   43,  307,   45,  125,  374,   41,   41,   94,
   59,   44,  417,   41,  419,   41,  421,  422,   59,   93,
  334,   41,  123,   64,   93,   58,   59,  341,  342,  343,
  344,  345,  346,  347,   41,  123,   41,   41,  443,  124,
  445,  125,  123,   41,  123,   41,    2,    2,  686,  453,
   91,  321,  700,  631,  459,   96,  803,  462,  463,  433,
   93,  543,  651,  605,  603,  576,    0,  693,  473,  291,
  475,  476,  579,  764,  250,  555,  584,  535,  726,  562,
  679,  475,  123,  517,  125,  126,   -1,   -1,   -1,  737,
   -1,   -1,  125,   -1,   -1,   -1,  744,   -1,  746,   33,
   34,   -1,   36,   -1,   -1,   39,   40,   -1,  756,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  767,
  525,   -1,   -1,   -1,   -1,   59,   -1,  334,   -1,   -1,
   64,   -1,   -1,   -1,  341,  342,  343,  344,  345,  346,
  347,  789,  334,  263,  264,  265,   -1,   -1,   -1,  341,
  342,  343,  344,  345,  346,  347,   -1,   91,   -1,   -1,
   -1,   -1,   96,  568,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,  263,  264,
  265,  586,   -1,  326,  589,   -1,   -1,   -1,   -1,  123,
   -1,  125,  126,  278,  279,  280,  281,  282,  283,  284,
  285,  286,  287,  288,   -1,   -1,  326,   -1,   -1,   -1,
   -1,   -1,   -1,  356,   -1,   -1,   -1,  258,  259,  260,
  261,  262,   -1,   -1,   -1,  266,   -1,   -1,   -1,   -1,
  334,  636,   -1,   -1,   -1,   -1,  356,  341,  342,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,   -1,  305,  306,  307,  308,  309,   -1,
  311,  356,   -1,   -1,  315,  316,  317,  318,  683,  320,
   59,  322,   61,  324,  325,   -1,  327,   -1,  329,  330,
  331,  332,  333,  326,  335,  336,   -1,  338,  339,  340,
   -1,   -1,   -1,  344,  345,  346,   -1,  348,  349,  350,
  351,  352,   -1,   -1,   61,   -1,  357,  358,  359,  360,
  361,  362,  363,  356,  258,  259,  260,  261,  262,  370,
   -1,   -1,  266,   -1,  375,  376,  377,  378,   -1,   -1,
   -1,  382,   -1,   -1,  385,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
   -1,  305,  306,  307,  308,  309,   -1,  311,   -1,   -1,
   -1,  315,  316,  317,  318,   -1,  320,   -1,  322,   -1,
  324,  325,   -1,  327,   -1,  329,  330,  331,  332,  333,
   -1,  335,  336,   -1,  338,  339,  340,   -1,   -1,   -1,
  344,  345,  346,    0,  348,  349,  350,  351,  352,   -1,
   -1,   -1,   -1,  357,  358,  359,  360,  361,  362,  363,
   -1,   -1,   -1,   -1,   -1,   -1,  370,   -1,   -1,   -1,
   -1,  375,  376,  377,  378,   -1,   33,   34,  382,   36,
   -1,  385,   39,   40,   -1,   -1,   43,   -1,   45,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   -1,   -1,   -1,   -1,   64,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,
  269,  270,  271,  272,  273,  274,  275,  276,  277,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,   96,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
  277,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,  126,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   33,   34,   -1,   36,   -1,   -1,   39,   40,
   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   59,   44,
   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,   -1,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   -1,   -1,   96,   58,   59,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  123,   -1,  125,  126,   -1,   -1,   -1,   -1,
   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  258,  259,  260,  261,  262,   -1,   -1,   -1,  266,
   -1,   -1,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,   -1,  305,  306,
  307,  308,  309,   -1,  311,   -1,   -1,   -1,  315,  316,
  317,  318,   -1,  320,   -1,  322,   -1,  324,  325,   -1,
  327,   -1,  329,  330,  331,  332,  333,   -1,  335,  336,
   -1,  338,  339,  340,   -1,   -1,   -1,  344,  345,  346,
   -1,  348,  349,  350,  351,  352,   -1,   -1,   -1,   -1,
  357,  358,  359,  360,  361,  362,  363,  258,  259,  260,
  261,  262,   -1,  370,   -1,  266,   -1,   -1,  375,  376,
  377,  378,   -1,   -1,   -1,  382,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  263,  264,  265,  305,  306,  307,  308,  309,   -1,
  311,   -1,   -1,   -1,  315,  316,  317,  318,   -1,  320,
   -1,  322,   -1,  324,  325,   -1,  327,   -1,  329,  330,
  331,  332,  333,   -1,  335,  336,   -1,  338,  339,  340,
   -1,  326,   -1,  344,  345,  346,   -1,  348,  349,  350,
  351,  352,   -1,   -1,   -1,   -1,  357,  358,  359,  360,
  361,  362,  363,   -1,  326,   -1,   -1,   -1,   -1,  370,
   -1,  356,   -1,   -1,  375,  376,  377,  378,   -1,   33,
   34,  382,   36,   -1,   -1,   39,   40,   -1,   -1,   43,
   -1,   45,   -1,   -1,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   91,   -1,   93,
   64,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,  123,
   -1,  125,   96,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
   -1,  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   -1,
   -1,   39,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,
   -1,   59,   44,   -1,   -1,   -1,   64,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,   96,   58,
   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,  126,   -1,
   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  125,   -1,   -1,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,  258,  259,  260,  261,  262,   -1,
   -1,   -1,  266,   58,   59,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,  307,   -1,  309,  310,   -1,  312,  313,
  314,   -1,   -1,   -1,   -1,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,   93,   -1,
   -1,  305,  306,  307,  308,  309,   -1,  311,   -1,   -1,
   -1,  315,  316,  317,  318,   -1,  320,   -1,  322,   -1,
  324,  355,   -1,  327,   -1,   -1,   -1,  331,  332,  333,
  125,  335,  336,   -1,  338,  339,  340,  371,  372,  373,
   -1,   -1,  346,   -1,  348,  349,  350,   -1,   -1,   -1,
   -1,   -1,   -1,  357,  358,  359,  360,  361,  362,  363,
  258,  259,  260,  261,  262,   -1,  370,   -1,  266,   -1,
   -1,  375,  376,  377,   -1,   -1,   -1,   -1,  382,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  263,  264,  265,  305,  306,  307,
  308,  309,   -1,  311,   -1,   -1,   -1,  315,  316,  317,
  318,   -1,  320,   -1,  322,   -1,  324,   -1,   -1,  327,
   -1,   -1,   -1,  331,  332,  333,   41,  335,  336,   44,
  338,  339,  340,   -1,  326,   -1,   -1,   -1,  346,   -1,
  348,  349,  350,   58,   59,   -1,   -1,   -1,   63,  357,
  358,  359,  360,  361,  362,  363,   -1,  326,  263,  264,
  265,   -1,  370,   -1,  356,   -1,   -1,  375,  376,  377,
   33,   34,   -1,   36,  382,   -1,   39,   40,   93,   94,
   43,   -1,   45,   -1,   -1,   -1,   -1,  356,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  326,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   37,   -1,   96,   -1,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  356,   -1,   -1,   60,   -1,   62,   -1,   -1,   -1,
  123,   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,
   -1,   -1,   39,   40,   -1,   -1,   43,   -1,   45,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   41,   -1,   59,   44,   -1,   -1,   -1,   64,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,
   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,   96,
   58,   59,   -1,   -1,   -1,   -1,   -1,   -1,  263,  264,
  265,   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  278,  279,   -1,  123,   -1,  125,  126,
   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  125,   -1,   -1,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,  258,  259,  260,  261,  262,
   -1,   -1,   -1,  266,   58,   59,   -1,  125,   -1,   -1,
   -1,  326,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,   93,
   -1,  356,  305,  306,  307,  308,  309,   -1,  311,   -1,
   -1,  257,  315,  316,  317,  318,   -1,  320,   -1,  322,
   -1,  324,  325,   -1,  327,   -1,   -1,   -1,  331,  332,
  333,  125,  335,  336,   -1,  338,  339,  340,  284,  285,
  286,  287,  288,  346,   -1,  348,  349,  350,   -1,   -1,
   -1,   -1,   -1,   -1,  357,  358,  359,  360,  361,  362,
  363,  258,  259,  260,  261,  262,   -1,  370,   -1,  266,
   -1,   -1,  375,  376,  377,   -1,   -1,   -1,   -1,  382,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  263,  264,  265,  305,  306,
  307,  308,  309,   -1,  311,   -1,   -1,   -1,  315,  316,
  317,  318,   -1,  320,   -1,  322,   -1,  324,   -1,   -1,
  327,   -1,   -1,   -1,  331,  332,  333,   41,  335,  336,
   44,  338,  339,  340,   -1,  326,   -1,   -1,   -1,  346,
   -1,  348,  349,  350,   58,   59,   -1,   -1,   -1,   63,
  357,  358,  359,  360,  361,  362,  363,   -1,  326,  263,
  264,  265,   -1,  370,   -1,  356,   -1,   -1,  375,  376,
  377,   33,   34,   -1,   36,  382,   -1,   39,   40,   93,
   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   91,
   -1,   93,   64,   -1,   96,   -1,   -1,   -1,   -1,   -1,
  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  326,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,  123,   -1,  125,   96,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  123,   -1,  125,  126,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,
   36,   -1,   -1,   39,   40,   -1,   -1,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   41,   -1,   59,   44,   -1,   -1,   -1,   64,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,
   96,   58,   59,   -1,   -1,   -1,   -1,   -1,   -1,  263,
  264,  265,   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  278,  279,   -1,  123,   -1,  125,
  126,   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,  258,  259,  260,  261,
  262,   -1,   -1,   -1,  266,   58,   59,   -1,  125,   -1,
   -1,   -1,  326,   -1,   -1,  307,   -1,  309,  310,   -1,
  312,  313,  314,   -1,   -1,   -1,   -1,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
   93,   -1,  356,  305,  306,  307,  308,  309,   -1,  311,
   -1,   -1,   -1,  315,  316,  317,  318,   -1,  320,   -1,
  322,   -1,  324,  355,   -1,  327,   -1,   -1,   -1,  331,
  332,  333,  125,  335,  336,   -1,  338,  339,  340,   -1,
  372,  373,   -1,   -1,  346,   -1,  348,  349,  350,   -1,
   -1,   -1,   -1,   -1,   -1,  357,  358,  359,  360,  361,
  362,  363,  258,  259,  260,  261,  262,   -1,  370,   -1,
  266,   -1,   -1,  375,  376,  377,   -1,   -1,   -1,   -1,
  382,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  263,  264,  265,  305,
  306,  307,  308,  309,   -1,  311,   -1,   -1,   -1,  315,
  316,  317,  318,   -1,  320,   -1,  322,   -1,  324,   -1,
   -1,  327,   -1,   -1,   -1,  331,  332,  333,   41,  335,
  336,   44,  338,  339,  340,   -1,  326,   -1,   -1,   -1,
  346,   -1,  348,  349,  350,   58,   59,   -1,   -1,   -1,
   -1,  357,  358,  359,  360,  361,  362,  363,   -1,  326,
  263,  264,  265,   -1,  370,   -1,  356,   -1,   -1,  375,
  376,  377,   33,   34,   -1,   36,  382,   -1,   39,   40,
   93,   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,
   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  326,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   -1,   -1,   96,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  123,   -1,  125,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,
   -1,   36,   -1,   -1,   39,   40,   -1,   -1,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   41,   -1,   59,   44,   -1,   -1,   -1,   64,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,
   -1,   96,   58,   59,   -1,   -1,   -1,   -1,   -1,   -1,
  263,  264,  265,   -1,   93,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,
  125,  126,   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,  260,
  261,  262,   -1,   -1,   -1,  266,   -1,   -1,   -1,  125,
   -1,   -1,   -1,  326,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,   -1,   -1,  356,  305,  306,  307,  308,  309,   -1,
  311,   -1,   -1,   -1,  315,  316,  317,  318,   -1,  320,
   -1,  322,   -1,  324,   -1,   -1,  327,   -1,   -1,   -1,
  331,  332,  333,   -1,  335,  336,   -1,  338,  339,  340,
   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,  349,  350,
   -1,   -1,   -1,   -1,   -1,   -1,  357,  358,  359,  360,
  361,  362,  363,  258,  259,  260,  261,  262,   -1,  370,
   -1,  266,   -1,   -1,  375,  376,  377,   -1,   -1,   -1,
   -1,  382,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  263,  264,  265,
  305,  306,  307,  308,  309,   -1,  311,   -1,   -1,   -1,
  315,  316,  317,  318,   -1,  320,   -1,  322,   -1,  324,
   -1,   -1,  327,   -1,   -1,   -1,  331,  332,  333,   -1,
  335,  336,   -1,  338,  339,  340,   -1,  326,   -1,   -1,
   -1,  346,   -1,  348,  349,  350,   -1,   -1,   -1,   -1,
   -1,   -1,  357,  358,  359,  360,  361,  362,  363,   -1,
  326,   -1,   -1,   -1,   -1,  370,   -1,  356,   -1,   -1,
  375,  376,  377,   33,   34,   -1,   36,  382,   -1,   39,
   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   -1,   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   -1,   -1,   96,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   34,   -1,   36,   -1,   -1,   39,   40,   -1,   -1,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,
   64,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   -1,   -1,   96,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,
  260,  261,  262,   -1,   -1,   -1,  266,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,   -1,   -1,   -1,  305,  306,  307,  308,  309,
   -1,  311,   -1,   -1,   -1,  315,  316,  317,  318,   -1,
  320,   -1,  322,   -1,  324,   -1,   -1,  327,   -1,   -1,
   -1,  331,  332,  333,   -1,  335,  336,   -1,  338,  339,
  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,  349,
  350,   -1,   -1,   -1,   -1,   -1,   -1,  357,  358,  359,
  360,  361,  362,  363,  258,  259,  260,  261,  262,   -1,
  370,   -1,  266,   -1,   -1,  375,  376,  377,   -1,   -1,
   -1,   -1,  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,   -1,   -1,
   -1,  305,  306,  307,  308,  309,   -1,  311,   -1,   -1,
   -1,  315,  316,  317,  318,   -1,  320,   -1,  322,   -1,
  324,   -1,   -1,  327,   -1,   -1,   -1,  331,  332,  333,
   -1,  335,  336,   -1,  338,  339,  340,   -1,   -1,   -1,
   -1,   -1,  346,   -1,  348,  349,  350,   -1,   -1,   -1,
   -1,   -1,   -1,  357,  358,  359,  360,  361,  362,  363,
   -1,   -1,   -1,   -1,   -1,   -1,  370,   -1,   -1,   -1,
   -1,  375,  376,  377,   33,   34,   -1,   36,  382,   -1,
   39,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   -1,   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   96,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   33,   34,   -1,   36,   -1,   -1,   39,   40,   -1,   -1,
   43,   -1,   45,   38,   -1,   -1,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   64,   -1,   58,   59,   -1,   -1,   -1,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   96,   -1,   -1,   -1,   -1,   93,   94,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,  124,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  258,
  259,  260,  261,  262,   -1,   -1,   -1,  266,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,   -1,   -1,   -1,  305,  306,  307,  308,
  309,   -1,  311,   -1,   -1,   -1,  315,  316,  317,  318,
   -1,  320,   -1,  322,   -1,  324,   -1,   -1,  327,   -1,
   -1,   -1,  331,  332,   -1,   -1,  335,  336,   -1,  338,
  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,
  349,  350,   -1,   -1,   -1,   -1,   -1,   -1,  357,  358,
  359,  360,  361,  362,  363,  258,  259,  260,  261,  262,
   -1,  370,   -1,  266,   -1,   -1,   -1,  376,  263,  264,
  265,   -1,   -1,  382,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  278,  279,   -1,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,   -1,
   -1,   -1,  305,  306,  307,  308,  309,   -1,  311,   -1,
   -1,   -1,  315,  316,  317,  318,   -1,  320,   -1,  322,
   -1,  324,   -1,   -1,  327,   -1,   -1,   -1,  331,  332,
   -1,  326,  335,  336,   -1,  338,  339,  340,   -1,   -1,
   -1,   -1,   -1,  346,   -1,  348,  349,  350,   -1,   -1,
   -1,   -1,   -1,   -1,  357,  358,  359,  360,  361,  362,
  363,  356,   33,   34,   -1,   36,   -1,  370,   39,   40,
   -1,   -1,   43,  376,   45,   -1,   -1,   -1,   -1,  382,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,
   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   96,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,
   -1,   36,   -1,   -1,   39,   40,   -1,   -1,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   64,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   96,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  126,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,  260,
  261,  262,   -1,   -1,   -1,  266,   -1,   -1,   -1,   -1,
   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
   -1,   -1,  124,  125,  305,  306,  307,  308,  309,   -1,
   -1,   -1,   -1,   -1,  315,   33,   34,   -1,   36,   -1,
   -1,   39,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   -1,   -1,   -1,   -1,   64,   -1,  349,  350,
   -1,   -1,   -1,   -1,   -1,   -1,  357,  358,  359,  360,
  361,  362,  363,  258,  259,  260,  261,  262,   -1,  370,
   -1,  266,   -1,   -1,   -1,  376,   -1,   -1,   96,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,   -1,   -1,  126,   -1,
  305,  306,  307,  308,  309,   -1,   -1,   -1,   -1,   -1,
  315,   33,   34,   -1,   36,   -1,   -1,   39,   40,   41,
   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   64,   -1,  349,  350,  278,  279,  280,  281,
  282,  283,  357,  358,  359,  360,  361,  362,  363,   -1,
   -1,   -1,   -1,   -1,   -1,  370,   -1,   -1,   -1,   -1,
   -1,  376,   -1,   -1,   96,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   38,
   -1,   -1,   41,   -1,  326,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  126,   -1,   -1,   -1,   -1,   58,
   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  356,   -1,   -1,   -1,   -1,   -1,
  258,  259,  260,  261,  262,   -1,   -1,   -1,  266,   -1,
   -1,   -1,   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,   -1,   -1,  124,  125,  305,  306,  307,
  308,  309,   -1,   -1,   -1,   -1,   -1,  315,   33,   34,
   -1,   36,   -1,   38,   39,   40,   -1,   -1,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   64,
   -1,  349,  350,   -1,   -1,   -1,   -1,   -1,   -1,  357,
  358,  359,  360,  361,  362,  363,  258,  259,  260,  261,
  262,   -1,  370,   -1,  266,   -1,   -1,   -1,  376,   -1,
   -1,   96,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,   -1,
   -1,  126,   -1,  305,  306,  307,  308,  309,   -1,   -1,
   -1,   -1,   -1,  315,   33,   34,   -1,   36,   -1,   38,
   39,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   64,   -1,  349,  350,  278,
  279,  280,  281,  282,  283,  357,  358,  359,  360,  361,
  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,  370,   -1,
   -1,   -1,   -1,   -1,  376,   -1,   -1,   96,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   38,   -1,   -1,   41,   -1,  326,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  126,   -1,   -1,
   -1,   -1,   58,   59,   -1,   -1,   -1,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,   -1,   -1,
   -1,   -1,   -1,  258,  259,  260,  261,  262,   -1,   -1,
   -1,  266,   -1,   -1,   -1,   -1,   -1,   93,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,   -1,   -1,  124,  125,
  305,  306,  307,  308,  309,   -1,   -1,   -1,   -1,   -1,
  315,   33,   34,   -1,   36,   -1,   38,   39,   40,   -1,
   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   64,   -1,  349,  350,   -1,   -1,   -1,   -1,
   -1,   -1,  357,  358,  359,  360,  361,  362,  363,  258,
  259,  260,  261,  262,   -1,  370,   -1,  266,   -1,   -1,
   -1,  376,   -1,   -1,   96,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,   -1,   -1,  126,   -1,  305,  306,  307,  308,
  309,   -1,   -1,   -1,   -1,   -1,  315,   33,   34,   -1,
   36,   -1,   38,   39,   40,   -1,   -1,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   64,   -1,
  349,  350,  278,  279,  280,  281,  282,  283,  357,  358,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,
   -1,  370,   -1,   -1,   -1,   -1,   -1,  376,   -1,   -1,
   96,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,   -1,
  326,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  126,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  356,   -1,   -1,   -1,   -1,   -1,  258,  259,  260,  261,
  262,   -1,   -1,   -1,  266,   -1,   -1,   -1,   -1,   -1,
   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,   -1,
   -1,  124,  125,  305,  306,  307,  308,  309,   -1,   -1,
   -1,   -1,   -1,  315,   33,   34,   -1,   36,   -1,   38,
   39,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   64,   -1,  349,  350,   -1,
   -1,   -1,   -1,   -1,   -1,  357,  358,  359,  360,  361,
  362,  363,  258,  259,  260,  261,  262,   -1,  370,   -1,
  266,   -1,   -1,   -1,  376,   -1,   -1,   96,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,   -1,   -1,  126,   -1,  305,
  306,  307,  308,  309,   -1,   -1,   -1,   -1,   -1,  315,
   33,   34,   -1,   36,   -1,   38,   39,   40,   -1,   -1,
   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   64,   -1,  349,  350,  278,  279,  280,  281,  282,
  283,  357,  358,  359,  360,  361,  362,  363,   -1,   -1,
   -1,   -1,   -1,   -1,  370,   -1,   -1,   -1,   -1,   -1,
  376,   37,   38,   96,   -1,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  326,   60,   -1,   62,   63,   -1,   -1,
   -1,   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  356,   -1,   -1,   -1,   -1,   94,  258,
  259,  260,  261,  262,   -1,   -1,   -1,  266,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,   -1,   -1,   -1,   -1,  305,  306,  307,  308,
  309,   -1,   -1,   -1,   -1,   -1,  315,   33,   34,   -1,
   36,   -1,   38,   39,   40,   -1,   -1,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   64,   -1,
  349,  350,   -1,   -1,   -1,   -1,   -1,   -1,  357,  358,
  359,  360,  361,  362,  363,  258,  259,  260,  261,  262,
   -1,  370,   -1,  266,   -1,   -1,   -1,  376,   -1,   -1,
   96,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,   -1,   -1,
  126,   -1,  305,  306,  307,  308,  309,   -1,   -1,   -1,
   -1,  257,  315,   33,   34,   -1,   36,   -1,   -1,   39,
   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   -1,  278,  279,  280,  281,  282,  283,  284,  285,
  286,  287,  288,   -1,   64,   -1,  349,  350,   -1,   -1,
   -1,   -1,   -1,   -1,  357,  358,  359,  360,  361,  362,
  363,   -1,   -1,   -1,   -1,   -1,   38,  370,   -1,   41,
   -1,   -1,   44,  376,   37,   38,   96,   40,   41,   42,
   43,   44,   45,   46,   47,   -1,   58,   59,   -1,   -1,
   -1,   63,   -1,   -1,   -1,   58,   59,   60,   -1,   62,
   63,   -1,   -1,   -1,   -1,   -1,  126,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   93,   94,  258,  259,  260,  261,  262,   -1,   -1,   -1,
  266,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  124,  125,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,   -1,   -1,   -1,   -1,  305,
  306,  307,  308,  309,   -1,   -1,   -1,   -1,   -1,  315,
   33,   34,   -1,   36,   -1,   -1,   39,   40,   -1,   -1,
   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   64,   -1,  349,  350,   -1,   -1,   -1,   -1,   -1,
   -1,  357,  358,  359,  360,  361,  362,  363,  258,  259,
  260,  261,  262,   -1,  370,   -1,  266,   -1,   -1,   -1,
  376,   -1,   -1,   96,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,   -1,   -1,  126,   -1,  305,  306,  307,  308,  309,
   -1,  263,  264,  265,  257,  315,   -1,   -1,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,  278,  279,  280,  281,
  282,  283,   -1,   -1,   -1,  278,  279,  280,  281,  282,
  283,  284,  285,  286,  287,  288,   37,   38,   -1,  349,
  350,   42,   43,   -1,   45,   46,   47,  357,  358,  359,
  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   60,
  370,   62,   -1,   -1,  326,   -1,  376,   -1,   -1,   -1,
   -1,   -1,   -1,  326,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,
   44,   45,   46,   47,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  356,   58,   59,   60,   -1,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  374,   -1,   -1,   -1,  258,  259,  260,  261,  262,
   -1,   -1,   -1,  266,   -1,   -1,   -1,   -1,   -1,   93,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,   -1,   -1,
  124,  125,  305,  306,  307,  308,  309,   -1,   -1,   -1,
   -1,   -1,  315,   37,   38,   -1,   -1,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   60,   -1,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,  349,  350,   -1,   -1,
   -1,   -1,   -1,   -1,  357,  358,  359,  360,  361,  362,
  363,   -1,   -1,   -1,   -1,   -1,   -1,  370,   -1,   93,
   94,   -1,   -1,  376,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   -1,   -1,   42,   43,  257,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  124,  125,   60,   -1,   62,   63,   -1,   -1,   -1,  280,
  281,  282,  283,  284,  285,  286,  287,  288,   -1,   -1,
   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
   46,   47,   -1,  257,   -1,   -1,   94,   -1,   -1,  263,
  264,  265,   58,   59,   60,   61,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,  278,  279,  280,  281,  282,  283,
  284,  285,  286,  287,  288,   -1,  124,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,   -1,
   37,   38,   -1,   -1,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  326,   60,   -1,   62,   63,   -1,  124,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
   46,   47,  356,  257,   -1,   -1,   -1,   94,   -1,  263,
  264,  265,   58,   59,   60,   61,   62,   63,   -1,   -1,
  374,   -1,   -1,   -1,  278,  279,  280,  281,  282,  283,
  284,  285,  286,  287,  288,   -1,   -1,  124,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,  326,   -1,   -1,  263,  264,  265,  124,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,
  288,   -1,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,   -1,  263,  264,  265,
  374,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,  285,
  286,  287,  288,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,   -1,
  257,   -1,   -1,   -1,   -1,   -1,  263,  264,  265,   -1,
  326,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  278,  279,  280,  281,  282,  283,  284,  285,  286,
  287,  288,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,
  356,  257,   -1,   -1,   -1,   -1,   -1,  263,  264,  265,
   -1,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,  285,
  286,  287,  288,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  296,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  326,   58,   59,   60,   61,   62,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   41,   42,   43,   44,   45,   46,   47,   -1,  355,
  356,   -1,   -1,   -1,   -1,   -1,   93,   94,   58,   59,
   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,
   37,   38,   -1,   93,   94,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   94,   -1,   -1,
   -1,   -1,   58,   59,   60,   61,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
   -1,   -1,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,   58,
   59,   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,
  257,   -1,   -1,   -1,   93,   94,  263,  264,  265,   -1,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,  285,  286,
  287,  288,   -1,   -1,   -1,  124,  125,  257,   -1,  296,
  297,   -1,   -1,  263,  264,  265,   -1,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,  285,  286,  287,  288,  326,
   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,   37,   -1,
   -1,   -1,   -1,   42,   43,   -1,   45,   46,   47,   -1,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,
   -1,   60,   -1,   62,   -1,   -1,  326,   -1,   -1,   -1,
   -1,   -1,   -1,  280,  281,  282,  283,  284,  285,  286,
  287,  288,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,  355,  356,  263,  264,  265,
   -1,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,  285,
  286,  287,  288,   -1,   -1,   -1,   -1,   -1,  257,   -1,
  296,  297,   -1,   -1,  263,  264,  265,   -1,  267,  268,
  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,
  326,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   -1,   41,   42,   43,   44,   45,   46,   47,   -1,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,  326,   58,   59,
   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   46,   47,   -1,  355,  356,   -1,   -1,
   -1,   -1,   -1,   93,   94,   58,   59,   60,   61,   62,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,
   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,   -1,
   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  280,  281,  282,  283,  284,  285,  286,  287,  288,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  124,  125,   -1,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   93,   94,   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  124,  125,   -1,   -1,   -1,   -1,  257,   -1,   -1,
   93,   94,   -1,  263,  264,  265,   -1,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,  285,  286,  287,  288,   -1,
   -1,  124,  125,   -1,  257,   -1,  296,  297,   -1,   -1,
  263,  264,  265,   -1,  267,  268,  269,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,  285,  286,  287,  288,  326,   -1,   -1,   -1,
   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,
   37,   38,   -1,  326,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   59,   60,  257,   62,   63,   -1,   -1,   -1,
  263,  264,  265,  356,  267,  268,  269,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,  285,  286,  287,  288,   93,   94,   -1,   -1,
   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  278,  279,  124,  125,   -1,
   -1,   -1,   -1,  326,   37,   38,   -1,   40,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   -1,   62,
   63,   -1,   -1,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,  326,   40,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   93,   94,   58,   59,   60,   -1,   62,   63,   -1,   -1,
   -1,   -1,   -1,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  124,  125,   -1,   -1,   -1,   -1,   93,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,
  257,   -1,   -1,   -1,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  278,  279,  280,  281,  282,  283,  284,  285,  286,
  287,  288,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
  297,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   38,   -1,   -1,   41,   -1,   -1,
   44,   -1,   58,   59,   60,   -1,   62,   63,   -1,  326,
   -1,   -1,   -1,   -1,   58,   59,   60,   -1,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,   -1,   -1,   93,   94,  356,
  263,  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,   93,
   94,   -1,   -1,   -1,   -1,  278,  279,  280,  281,  282,
  283,  284,  285,  286,  287,  288,   -1,   -1,  124,  125,
   -1,  257,   -1,   -1,   -1,   -1,   -1,  263,  264,  265,
  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  278,  279,  280,  281,  282,  283,  284,  285,
  286,  287,  288,  326,   37,   38,   -1,   40,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   -1,   62,
   63,   -1,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
  326,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
   93,   94,   41,   42,   43,   44,   45,   46,   47,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,  257,   93,   94,   -1,   -1,   -1,  263,
  264,  265,  278,  279,  280,  281,  282,  283,  284,  285,
  286,  287,  288,   -1,  278,  279,  280,  281,  282,  283,
  284,  285,  286,  287,   -1,  124,  125,   -1,   -1,   -1,
   -1,   -1,   37,   38,   -1,   -1,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  326,   -1,   -1,   58,   59,   60,   -1,   62,   63,   -1,
   -1,   -1,  326,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,
   37,   38,  356,   -1,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,
  263,  264,  265,   60,   -1,   62,   -1,   -1,   -1,  124,
  125,   -1,   -1,   -1,   -1,  278,  279,  280,  281,  282,
  283,  284,  285,  286,  287,  288,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,
   -1,   -1,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,   -1,   -1,  326,   -1,   -1,   -1,  124,   -1,  278,
  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  356,   -1,   -1,   -1,   37,   38,   -1,
   -1,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  326,   58,   59,
   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,   -1,   -1,   -1,   -1,  356,  263,  264,
  265,   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  278,  279,  280,  281,  282,  283,  284,
  285,  286,  287,  288,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   37,   38,  124,  125,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,   -1,   -1,   58,   59,   60,   -1,   62,   63,   -1,
   -1,  326,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  278,  279,  280,  281,  282,  283,  284,  285,  286,
  287,  288,   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,
   -1,  356,   37,   38,   -1,   -1,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   60,   -1,   62,   63,  124,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   -1,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,
   58,   59,   60,   -1,   62,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
   -1,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,  124,
  125,   -1,   -1,   -1,   -1,   93,   94,   -1,  278,  279,
  280,  281,  282,  283,  284,  285,  286,  287,  288,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   37,   38,  124,  125,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  326,   60,   -1,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,   -1,  356,   -1,   -1,   -1,
   -1,   94,   -1,  278,  279,  280,  281,  282,  283,  284,
  285,  286,  287,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,  263,  264,
  265,  326,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  278,  279,  280,  281,  282,  283,  284,
  285,  286,  287,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   -1,  356,   -1,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,
   -1,  326,   37,   38,   -1,   -1,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   60,   -1,   62,   63,   -1,
   -1,  356,   -1,   -1,   -1,   -1,   -1,   -1,  326,   -1,
   38,   -1,   -1,   41,   -1,   43,   44,   45,   46,   -1,
   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,   93,   94,
   58,   59,   60,   -1,   62,   63,   -1,   -1,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  279,  280,  281,  282,
  283,  284,  285,  286,  287,  288,   -1,   -1,   -1,  124,
  125,   -1,   -1,   -1,   -1,   93,   94,   38,   -1,   -1,
   41,   -1,   43,   44,   45,   46,   -1,   -1,   38,   -1,
   -1,   41,   -1,   43,   44,   45,   46,   58,   59,   60,
   -1,   62,   63,   -1,   -1,   -1,  124,  125,   58,   59,
   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   38,   -1,   -1,   41,   -1,   43,   44,
   45,   46,  257,   -1,   -1,   -1,   -1,   -1,  263,  264,
  265,   -1,   -1,   58,   59,   60,   -1,   62,   63,   -1,
   -1,   -1,   -1,  278,  279,  280,  281,  282,  283,  284,
  285,  286,  287,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,   -1,   -1,   -1,  263,  264,  265,   93,   94,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,
   -1,  326,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,
   -1,  356,  263,  264,  265,   -1,   -1,  257,  326,   -1,
   -1,   -1,   -1,  263,  264,  265,   -1,  278,  279,  280,
  281,  282,  283,  284,  285,  286,  287,   -1,  278,  279,
  280,  281,  282,  283,  284,  285,  286,  287,  356,   -1,
   -1,   -1,   38,   -1,   -1,   41,   -1,   43,   44,   45,
   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   59,   60,  326,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  326,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  356,   -1,   93,   94,   -1,
   -1,   38,   -1,   -1,   41,   -1,  356,   44,   -1,   -1,
   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,  263,  264,
  265,   58,   59,   60,   -1,   62,   63,   -1,  124,  125,
   -1,   -1,   -1,  278,  279,  280,  281,  282,  283,  284,
  285,  286,  287,   38,   -1,   -1,   41,   -1,   -1,   44,
   -1,   -1,   38,   -1,   -1,   41,   93,   94,   44,   -1,
   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,   63,   -1,
   -1,   -1,   58,   59,   -1,   -1,   38,   63,   -1,   41,
   -1,  326,   44,   -1,   -1,   -1,   -1,  124,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   93,   94,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   93,   94,   -1,
   -1,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,
  125,   93,   94,   -1,   -1,   -1,   -1,   -1,  124,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  124,  125,   -1,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  278,  279,  280,  281,  282,  283,  284,  285,
  286,  287,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
   -1,   -1,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,   60,   -1,   62,   63,   -1,  263,  264,  265,   -1,
  326,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  278,  279,  280,  281,  282,  283,  284,  285,  286,
  287,   -1,   -1,   -1,   -1,   94,   -1,   -1,   -1,   -1,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,  278,  279,  124,   -1,   -1,   -1,  326,
   -1,   -1,  278,  279,   -1,   -1,   -1,   -1,   -1,   37,
   38,  263,  264,  265,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,  278,  279,   -1,  356,
   -1,   -1,   60,   -1,   62,   63,   -1,   -1,   -1,   -1,
   -1,  326,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  326,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   94,   -1,   -1,   -1,
   -1,  356,   -1,   -1,  326,   -1,   -1,   -1,   -1,   -1,
  356,   -1,   37,   38,   -1,   -1,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,  124,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  356,   60,   -1,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   -1,   41,   42,   43,   44,   45,   46,   47,  257,   -1,
   -1,   -1,   -1,   -1,  263,  264,  265,   -1,   -1,   94,
   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,  278,
  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,  124,
   -1,   -1,   -1,   -1,   94,   37,   38,   -1,   -1,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  326,   60,   -1,
   62,   63,   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   -1,   -1,   42,   43,   -1,   45,   46,   47,   -1,  257,
   -1,   -1,   94,   -1,   -1,  263,  264,  265,   58,   59,
   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,
  288,   -1,  124,   37,   38,   -1,   -1,   41,   42,   43,
   44,   45,   46,   47,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  326,   -1,
   -1,   -1,  257,   -1,  124,   -1,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   94,   -1,   -1,  278,  279,  280,  281,  282,  283,  284,
  285,  286,  287,  288,   -1,   -1,   -1,  257,   -1,   -1,
   -1,  296,  297,  263,  264,  265,   -1,   -1,   -1,   -1,
  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  278,  279,
  280,  281,  282,  283,  284,  285,  286,  287,  288,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,
   -1,   -1,   37,   38,   -1,   -1,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,  257,   -1,   -1,   -1,   -1,
   -1,  263,  264,  265,   59,   60,   -1,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  278,  279,  280,  281,
  282,  283,  284,  285,  286,  287,  288,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  296,  297,   -1,  257,   -1,   94,
   -1,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  278,  279,
  280,  281,  282,  283,  284,  285,  286,  287,  288,  124,
   37,   38,   -1,   -1,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,  263,
  264,  265,   59,   60,   -1,   62,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  278,  279,  280,  281,  282,  283,
  284,  285,  286,  287,  288,   -1,   37,   38,   -1,   -1,
   -1,   42,   43,   -1,   45,   46,   47,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   60,
   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   37,   38,   -1,  124,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   94,   -1,   -1,   59,   60,   -1,   62,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   -1,   41,   42,   43,   -1,   45,   46,   47,
   -1,   -1,  257,  124,   -1,   -1,   -1,   -1,  263,  264,
  265,   94,   60,   -1,   62,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  278,  279,  280,  281,  282,  283,  284,
  285,  286,  287,  288,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  124,   -1,   37,   38,   -1,   94,   41,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   -1,   41,   42,   43,
  257,   45,   46,   47,   -1,   -1,  263,  264,  265,   -1,
   94,   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,   63,
   -1,  278,  279,  280,  281,  282,  283,  284,  285,  286,
  287,  288,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,
   94,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  278,  279,  280,
  281,  282,  283,  284,  285,  286,  287,  288,   -1,   -1,
  124,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  278,  279,  280,  281,  282,
  283,  284,  285,  286,  287,  288,   -1,   -1,   -1,  257,
   -1,   -1,   -1,   -1,   -1,  263,  264,  265,   37,   38,
   -1,   -1,   41,   42,   43,   -1,   45,   46,   47,   -1,
  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,
  288,   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   -1,   41,   42,   43,   -1,   45,
   46,   47,   -1,  257,   -1,   -1,   -1,   -1,   -1,  263,
  264,  265,   -1,   -1,   60,   94,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,  278,  279,  280,  281,  282,  283,
  284,  285,  286,  287,  288,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,   -1,  124,   -1,   -1,   94,  263,
  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  278,  279,  280,  281,  282,  283,
  284,  285,  286,  287,  288,   37,   38,   -1,  124,   41,
   42,   43,   -1,   45,   46,   47,   37,   38,   -1,   -1,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   60,   -1,
   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   -1,   -1,
   42,   43,   94,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   94,   -1,   -1,   58,   -1,   60,   -1,
   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,  124,  125,   -1,   42,   43,  257,   45,
   46,   47,   94,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   -1,   62,   63,   -1,  278,
  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,
   -1,  257,  124,   -1,   -1,   -1,   -1,  263,  264,  265,
   -1,   37,   38,   -1,   -1,   -1,   42,   43,   94,   45,
   46,   47,  278,  279,  280,  281,  282,  283,  284,  285,
  286,  287,  288,   -1,   60,   -1,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,
   -1,  263,  264,  265,   -1,   -1,  257,   -1,  124,  125,
   -1,   -1,  263,  264,  265,   -1,  278,  279,  280,  281,
  282,  283,  284,  285,  286,  287,  288,  278,  279,  280,
  281,  282,  283,  284,  285,  286,  287,  288,   37,   38,
   -1,   -1,   -1,   42,   43,  257,   45,   46,   47,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   -1,   62,   63,   -1,  278,  279,  280,  281,
  282,  283,  284,  285,  286,  287,  288,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   94,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  278,  279,  280,  281,  282,  283,  284,  285,
  286,  287,  288,   -1,   -1,  124,  125,   37,   38,   -1,
   -1,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,   -1,  263,  264,  265,
   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  278,  279,  280,  281,  282,  283,  284,  285,
  286,  287,  288,   37,   38,   -1,   -1,   41,   42,   43,
   -1,   45,   46,   47,   94,   37,   38,   -1,   -1,   -1,
   42,   43,   -1,   45,   46,   47,   60,   -1,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,
   62,   63,   -1,   -1,  124,  125,   -1,   -1,   37,   38,
   -1,   -1,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   94,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,
  124,   -1,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,   -1,  124,  125,   93,   94,   -1,   -1,   -1,  278,
  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,
   -1,   -1,   37,   38,   -1,   -1,   41,   42,   43,   -1,
   45,   46,   47,   37,   38,  124,   -1,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   60,   -1,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   94,
   -1,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  278,  279,
  280,  281,  282,  283,  284,  285,  286,  287,  288,  124,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  124,  125,   -1,  257,   -1,   -1,   -1,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,
   -1,  263,  264,  265,  278,  279,  280,  281,  282,  283,
  284,  285,  286,  287,  288,   -1,  278,  279,  280,  281,
  282,  283,  284,  285,  286,  287,  288,   -1,  257,   -1,
   -1,   -1,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  278,
  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,
   37,   38,   -1,   -1,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   -1,   62,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,  263,  264,
  265,   -1,   -1,  257,   -1,   -1,   -1,   94,   -1,  263,
  264,  265,   -1,  278,  279,  280,  281,  282,  283,  284,
  285,  286,  287,  288,  278,  279,  280,  281,  282,  283,
  284,  285,  286,  287,  288,   37,   38,  124,   -1,   -1,
   42,   43,   -1,   45,   46,   47,   37,   38,   -1,   -1,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   60,   -1,
   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   -1,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   94,   62,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   -1,   -1,
   42,   43,  124,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  124,   -1,   -1,   94,   -1,   60,   -1,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,   -1,
  257,   -1,   94,   -1,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  278,  279,  280,  281,  282,  283,  284,  285,  286,
  287,  288,  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,
   -1,  263,  264,  265,   -1,   -1,  257,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  278,  279,  280,  281,
  282,  283,  284,  285,  286,  287,  288,  278,  279,  280,
  281,  282,  283,  284,  285,  286,  287,  288,   -1,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  265,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,
  288,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  280,  281,
  282,  283,  284,  285,  286,  287,  288,
  );
  var $yyFinal = 1;
//tvar $yyRule = array(
//t   "\$accept :  start ",
//t    "start :  top_statement_list ",
//t    "top_statement_list :  top_statement_list   top_statement ",
//t    "top_statement_list :",
//t    "top_statement :  statement ",
//t    "top_statement :  function_declaration_statement ",
//t    "top_statement :  class_declaration_statement ",
//t    "top_statement :  package_declaration_statement ",
//t    "top_statement :  enum_declaration_statement ",
//t    "top_statement :  T_HALT_COMPILER  '(' ')' ';'",
//t    "inner_statement_list :  inner_statement_list   inner_statement ",
//t    "inner_statement_list :",
//t    "inner_statement :  statement ",
//t    "inner_statement :  function_declaration_statement ",
//t    "inner_statement :  class_declaration_statement ",
//t    "inner_statement :  package_declaration_statement ",
//t    "inner_statement :  T_HALT_COMPILER  '(' ')' ';'",
//t    "statement :  unticked_statement ",
//t    "unticked_statement : '{'  inner_statement_list  '}'",
//t    "unticked_statement :  T_IF  '('  expr  ')'  statement   elseif_list   else_single ",
//t    "unticked_statement :  T_WHILE  '('  expr  ')'  statement ",
//t    "unticked_statement :  T_DO   statement   T_WHILE  '('  expr  ')' ';'",
//t    "unticked_statement :  T_FOR  '('  for_expr  ';'  for_expr  ';'  for_expr  ')'  statement ",
//t    "unticked_statement :  T_SWITCH  '('  expr  ')'  switch_case_list ",
//t    "unticked_statement :  T_BREAK  ';'",
//t    "unticked_statement :  T_BREAK   expr  ';'",
//t    "unticked_statement :  T_CONTINUE  ';'",
//t    "unticked_statement :  T_CONTINUE   expr  ';'",
//t    "unticked_statement :  T_RETURN  ';'",
//t    "unticked_statement :  T_RETURN   expr_without_variable  ';'",
//t    "unticked_statement :  T_RETURN   variable  ';'",
//t    "unticked_statement :  T_GLOBAL   global_var_list  ';'",
//t    "unticked_statement :  T_STATIC   static_var_list  ';'",
//t    "unticked_statement :  T_ECHO   echo_expr_list  ';'",
//t    "unticked_statement :  T_INLINE_HTML ",
//t    "unticked_statement :  expr  ';'",
//t    "unticked_statement :  T_USE   use_filename  ';'",
//t    "unticked_statement :  T_UNSET  '('  unset_variables  ')' ';'",
//t   "\$\$1 :",
//t   "\$\$2 :",
//t   "\$\$3 :",
//t    "unticked_statement :  T_FOREACH  '('  variable \$\$1  T_AS \$\$2  foreach_variable   foreach_optional_arg  ')'\$\$3  statement ",
//t   "\$\$4 :",
//t   "\$\$5 :",
//t   "\$\$6 :",
//t    "unticked_statement :  T_FOREACH  '('  expr_without_variable \$\$4  T_AS \$\$5  w_variable   foreach_optional_arg  ')'\$\$6  statement ",
//t   "\$\$7 :",
//t    "unticked_statement :  T_DECLARE \$\$7 '('  declare_list  ')'  declare_statement ",
//t    "unticked_statement : ';'",
//t    "unticked_statement :  T_TRY  '{'  inner_statement_list  '}'  T_CATCH  '('  fully_qualified_class_name   T_VARIABLE  ')' '{'  inner_statement_list  '}'  additional_catches   optional_finally ",
//t    "unticked_statement :  T_THROW   expr  ';'",
//t    "unticked_statement :  T_IMPORT   import_list  ';'",
//t    "import_list :  import_list  ','  import ",
//t    "import_list :  import ",
//t    "import :  class_name_reference ",
//t    "import :  class_name_reference   T_AS   T_STRING ",
//t    "import :  class_name_reference   T_AS   r_variable ",
//t    "additional_catches :  non_empty_additional_catches ",
//t    "additional_catches :",
//t    "non_empty_additional_catches :  additional_catch ",
//t    "non_empty_additional_catches :  non_empty_additional_catches   additional_catch ",
//t    "optional_finally :  T_FINALLY  '{'  inner_statement_list  '}'",
//t    "optional_finally :",
//t    "additional_catch :  T_CATCH  '('  fully_qualified_class_name   T_VARIABLE  ')' '{'  inner_statement_list  '}'",
//t    "enum_declaration_statement :  unticked_enum_declaration_statement ",
//t    "unset_variables :  unset_variable ",
//t    "unset_variables :  unset_variables  ','  unset_variable ",
//t    "unset_variable :  variable ",
//t    "use_filename :  T_CONSTANT_ENCAPSED_STRING ",
//t    "use_filename : '('  T_CONSTANT_ENCAPSED_STRING  ')'",
//t    "function_declaration_statement :  unticked_function_declaration_statement ",
//t    "class_declaration_statement :  unticked_class_declaration_statement ",
//t    "package_inner_statement_list :  package_inner_statement_list   package_inner_statement ",
//t    "package_inner_statement_list :",
//t    "package_inner_statement :  class_declaration_statement ",
//t    "package_inner_statement :  enum_declaration_statement ",
//t    "package_inner_statement :  T_IMPORT   package_import_list  ';'",
//t    "package_import_list :  package_import_list  ','  package_import ",
//t    "package_import_list :  package_import ",
//t    "package_import :  T_CLASSNAME ",
//t    "package_import :  T_CLASSNAME   T_AS   T_STRING ",
//t    "package_declaration_statement :  unticked_package_declaration_statement ",
//t    "is_reference :",
//t    "is_reference : '&'",
//t    "unticked_function_declaration_statement :  T_FUNCTION   is_reference   T_STRING  '('  parameter_list  ')' '{'  inner_statement_list  '}'",
//t    "optional_annotation_list :",
//t    "optional_annotation_list :  annotation_list ",
//t    "unticked_class_declaration_statement :  optional_annotation_list   class_entry_type   T_STRING   extends_from   implements_list  '{'  class_statement_list  '}'",
//t    "unticked_class_declaration_statement :  optional_annotation_list   interface_entry   T_STRING   interface_extends_list  '{'  class_statement_list  '}'",
//t    "unticked_package_declaration_statement :  T_PACKAGE   fully_qualified_class_name  '{'  package_inner_statement_list  '}'",
//t    "class_entry_type :  T_CLASS ",
//t    "class_entry_type :  T_ABSTRACT   T_CLASS ",
//t    "class_entry_type :  T_FINAL   T_CLASS ",
//t    "extends_from :",
//t    "extends_from :  T_EXTENDS   fully_qualified_class_name ",
//t    "interface_entry :  T_INTERFACE ",
//t    "interface_extends_list :",
//t    "interface_extends_list :  T_EXTENDS   interface_list ",
//t    "implements_list :",
//t    "implements_list :  T_IMPLEMENTS   interface_list ",
//t    "interface_list :  fully_qualified_class_name ",
//t    "interface_list :  interface_list  ','  fully_qualified_class_name ",
//t    "unticked_enum_declaration_statement :  optional_annotation_list   T_ENUM   T_STRING  '{'  enum_inner_statement_list  '}'",
//t    "enum_inner_statement_list :  enum_declaration_list ",
//t    "enum_inner_statement_list :  enum_declaration_list  ';'  class_statement_list ",
//t    "enum_declaration_list :  enum_declaration_list  ','  enum_declaration_list_member ",
//t    "enum_declaration_list :  enum_declaration_list_member ",
//t    "enum_declaration_list_member :  T_STRING ",
//t    "enum_declaration_list_member :  T_STRING  '('  static_scalar  ')'",
//t    "enum_declaration_list_member :  T_STRING  '{'  method_declaration  '}'",
//t    "foreach_optional_arg :",
//t    "foreach_optional_arg :  T_DOUBLE_ARROW   foreach_variable ",
//t    "foreach_variable :  w_variable ",
//t    "foreach_variable : '&'  w_variable ",
//t    "declare_statement :  statement ",
//t    "declare_statement : ':'  inner_statement_list   T_ENDDECLARE  ';'",
//t    "declare_list :  T_STRING  '='  static_scalar ",
//t    "declare_list :  declare_list  ','  T_STRING  '='  static_scalar ",
//t    "switch_case_list : '{'  case_list  '}'",
//t    "switch_case_list : '{' ';'  case_list  '}'",
//t    "case_list :",
//t    "case_list :  case_list   T_CASE   expr   case_separator   inner_statement_list ",
//t    "case_list :  case_list   T_DEFAULT   case_separator   inner_statement_list ",
//t    "case_separator : ':'",
//t    "case_separator : ';'",
//t    "elseif_list :",
//t    "elseif_list :  elseif_list   T_ELSEIF  '('  expr  ')'  statement ",
//t    "else_single :",
//t    "else_single :  T_ELSE   statement ",
//t    "parameter_list :  non_empty_parameter_list ",
//t    "parameter_list :",
//t    "non_empty_parameter_list :  optional_class_type   T_VARIABLE ",
//t    "non_empty_parameter_list :  optional_class_type  '&'  T_VARIABLE ",
//t    "non_empty_parameter_list :  optional_class_type  '&'  T_VARIABLE  '='  static_scalar ",
//t    "non_empty_parameter_list :  optional_class_type   T_VARIABLE  '='  static_scalar ",
//t    "non_empty_parameter_list :  non_empty_parameter_list  ','  optional_class_type   T_VARIABLE ",
//t    "non_empty_parameter_list :  non_empty_parameter_list  ','  optional_class_type  '&'  T_VARIABLE ",
//t    "non_empty_parameter_list :  non_empty_parameter_list  ','  optional_class_type  '&'  T_VARIABLE  '='  static_scalar ",
//t    "non_empty_parameter_list :  non_empty_parameter_list  ','  optional_class_type   T_VARIABLE  '='  static_scalar ",
//t    "optional_class_type :",
//t    "optional_class_type :  T_STRING ",
//t    "optional_class_type :  T_CLASSNAME ",
//t    "optional_class_type :  T_ARRAY ",
//t    "function_call_parameter_list :  non_empty_function_call_parameter_list ",
//t    "function_call_parameter_list :",
//t    "non_empty_function_call_parameter_list :  expr_without_variable ",
//t    "non_empty_function_call_parameter_list :  variable ",
//t    "non_empty_function_call_parameter_list : '&'  w_variable ",
//t    "non_empty_function_call_parameter_list :  non_empty_function_call_parameter_list  ','  expr_without_variable ",
//t    "non_empty_function_call_parameter_list :  non_empty_function_call_parameter_list  ','  variable ",
//t    "non_empty_function_call_parameter_list :  non_empty_function_call_parameter_list  ',' '&'  w_variable ",
//t    "global_var_list :  global_var_list  ','  global_var ",
//t    "global_var_list :  global_var ",
//t    "global_var :  T_VARIABLE ",
//t    "global_var : '\$'  r_variable ",
//t    "global_var : '\$' '{'  expr  '}'",
//t    "static_var_list :  static_var_list  ','  T_VARIABLE ",
//t    "static_var_list :  static_var_list  ','  T_VARIABLE  '='  static_scalar ",
//t    "static_var_list :  T_VARIABLE ",
//t    "static_var_list :  T_VARIABLE  '='  static_scalar ",
//t    "class_statement_list :  class_statement_list   class_statement ",
//t    "class_statement_list :",
//t    "class_statement :  variable_modifiers   class_variable_declaration  ';'",
//t    "class_statement :  class_constant_declaration  ';'",
//t    "class_statement :  method_modifiers   T_OPERATOR   is_reference   operator_token  '('  parameter_list  ')'  throws   method_body ",
//t    "class_statement :  annotation_list   method_modifiers   T_OPERATOR   is_reference   operator_token  '('  parameter_list  ')'  throws   method_body ",
//t    "class_statement :  method_declaration ",
//t    "method_declaration :  method_modifiers   T_CONSTRUCT  '('  parameter_list  ')'  throws   method_body ",
//t    "method_declaration :  annotation_list   method_modifiers   T_CONSTRUCT  '('  parameter_list  ')'  throws   method_body ",
//t    "method_declaration :  method_modifiers   return_type_name   is_reference   T_STRING  '('  parameter_list  ')'  throws   method_body ",
//t    "method_declaration :  annotation_list   method_modifiers   return_type_name   is_reference   T_STRING  '('  parameter_list  ')'  throws   method_body ",
//t    "return_type_name :  fully_qualified_class_name ",
//t    "return_type_name :  T_VOID ",
//t    "return_type_name :  T_FUNCTION ",
//t    "throws :",
//t    "throws :  T_THROWS   throws_list ",
//t    "throws_list :  fully_qualified_class_name ",
//t    "throws_list :  throws_list  ','  fully_qualified_class_name ",
//t    "annotation_list : '['  annotation_elements  ']'",
//t    "annotation_elements :  annotation ",
//t    "annotation_elements :  annotation_elements  ','  annotation ",
//t    "annotation : '@'  T_STRING ",
//t    "annotation : '@'  T_STRING  '('  common_scalar  ')'",
//t    "annotation : '@'  T_STRING  '('  annotation_defines  ')'",
//t    "annotation_defines :  annotation_define ",
//t    "annotation_defines :  annotation_defines  ','  annotation_define ",
//t    "annotation_define :  T_STRING ",
//t    "annotation_define :  T_STRING  '='  static_scalar ",
//t    "operator_token : '+'",
//t    "operator_token : '-'",
//t    "operator_token : '*'",
//t    "operator_token : '/'",
//t    "operator_token : '%'",
//t    "operator_token : '!'",
//t    "operator_token : '.'",
//t    "operator_token :  T_INC ",
//t    "operator_token :  T_DEC ",
//t    "operator_token :  T_COMPARE ",
//t    "method_body : ';'",
//t    "method_body : '{'  inner_statement_list  '}'",
//t    "variable_modifiers :  non_empty_member_modifiers ",
//t    "variable_modifiers :  T_VAR ",
//t    "method_modifiers :",
//t    "method_modifiers :  non_empty_member_modifiers ",
//t    "non_empty_member_modifiers :  member_modifier ",
//t    "non_empty_member_modifiers :  non_empty_member_modifiers   member_modifier ",
//t    "member_modifier :  T_PUBLIC ",
//t    "member_modifier :  T_PROTECTED ",
//t    "member_modifier :  T_PRIVATE ",
//t    "member_modifier :  T_STATIC ",
//t    "member_modifier :  T_ABSTRACT ",
//t    "member_modifier :  T_FINAL ",
//t    "class_variable_declaration :  class_variable_declaration  ','  T_VARIABLE ",
//t    "class_variable_declaration :  class_variable_declaration  ','  T_VARIABLE  '='  static_scalar ",
//t    "class_variable_declaration :  T_VARIABLE ",
//t    "class_variable_declaration :  T_VARIABLE  '='  static_scalar ",
//t    "class_constant_declaration :  class_constant_declaration  ','  T_STRING  '='  static_scalar ",
//t    "class_constant_declaration :  T_CONST   T_STRING  '='  static_scalar ",
//t    "echo_expr_list :  echo_expr_list  ','  expr ",
//t    "echo_expr_list :  expr ",
//t    "for_expr :",
//t    "for_expr :  non_empty_for_expr ",
//t    "non_empty_for_expr :  non_empty_for_expr  ','  expr ",
//t    "non_empty_for_expr :  expr ",
//t   "\$\$8 :",
//t    "expr_without_variable :  T_LIST  '('\$\$8  assignment_list  ')' '='  expr ",
//t    "expr_without_variable :  variable  '='  expr ",
//t    "expr_without_variable :  variable  '=' '&'  variable ",
//t    "expr_without_variable :  variable  '=' '&'  T_NEW   class_name_reference   ctor_arguments ",
//t    "expr_without_variable :  T_NEW   class_name_reference   ctor_arguments ",
//t    "expr_without_variable :  T_CLONE   expr ",
//t    "expr_without_variable :  variable   T_PLUS_EQUAL   expr ",
//t    "expr_without_variable :  variable   T_MINUS_EQUAL   expr ",
//t    "expr_without_variable :  variable   T_MUL_EQUAL   expr ",
//t    "expr_without_variable :  variable   T_DIV_EQUAL   expr ",
//t    "expr_without_variable :  variable   T_CONCAT_EQUAL   expr ",
//t    "expr_without_variable :  variable   T_MOD_EQUAL   expr ",
//t    "expr_without_variable :  variable   T_AND_EQUAL   expr ",
//t    "expr_without_variable :  variable   T_OR_EQUAL   expr ",
//t    "expr_without_variable :  variable   T_XOR_EQUAL   expr ",
//t    "expr_without_variable :  variable   T_SL_EQUAL   expr ",
//t    "expr_without_variable :  variable   T_SR_EQUAL   expr ",
//t    "expr_without_variable :  rw_variable   T_INC ",
//t    "expr_without_variable :  T_INC   rw_variable ",
//t    "expr_without_variable :  rw_variable   T_DEC ",
//t    "expr_without_variable :  T_DEC   rw_variable ",
//t    "expr_without_variable :  expr   T_BOOLEAN_OR   expr ",
//t    "expr_without_variable :  expr   T_BOOLEAN_AND   expr ",
//t    "expr_without_variable :  expr   T_LOGICAL_OR   expr ",
//t    "expr_without_variable :  expr   T_LOGICAL_AND   expr ",
//t    "expr_without_variable :  expr   T_LOGICAL_XOR   expr ",
//t    "expr_without_variable :  expr  '|'  expr ",
//t    "expr_without_variable :  expr  '&'  expr ",
//t    "expr_without_variable :  expr  '^'  expr ",
//t    "expr_without_variable :  expr  '.'  expr ",
//t    "expr_without_variable :  expr  '+'  expr ",
//t    "expr_without_variable :  expr  '-'  expr ",
//t    "expr_without_variable :  expr  '*'  expr ",
//t    "expr_without_variable :  expr  '/'  expr ",
//t    "expr_without_variable :  expr  '%'  expr ",
//t    "expr_without_variable :  expr   T_SL   expr ",
//t    "expr_without_variable :  expr   T_SR   expr ",
//t    "expr_without_variable : '+'  expr ",
//t    "expr_without_variable : '-'  expr ",
//t    "expr_without_variable : '!'  expr ",
//t    "expr_without_variable : '~'  expr ",
//t    "expr_without_variable :  expr   T_IS_IDENTICAL   expr ",
//t    "expr_without_variable :  expr   T_IS_NOT_IDENTICAL   expr ",
//t    "expr_without_variable :  expr   T_IS_EQUAL   expr ",
//t    "expr_without_variable :  expr   T_IS_NOT_EQUAL   expr ",
//t    "expr_without_variable :  expr  '<'  expr ",
//t    "expr_without_variable :  expr   T_IS_SMALLER_OR_EQUAL   expr ",
//t    "expr_without_variable :  expr  '>'  expr ",
//t    "expr_without_variable :  expr   T_IS_GREATER_OR_EQUAL   expr ",
//t    "expr_without_variable :  expr   T_COMPARE_ARROW   expr ",
//t    "expr_without_variable :  expr   T_INSTANCEOF   class_name_reference ",
//t    "expr_without_variable : '('  expr  ')'",
//t    "expr_without_variable :  expr  '?'  expr  ':'  expr ",
//t    "expr_without_variable :  internal_functions_in_yacc ",
//t    "expr_without_variable :  T_INT_CAST   expr ",
//t    "expr_without_variable :  T_DOUBLE_CAST   expr ",
//t    "expr_without_variable :  T_STRING_CAST   expr ",
//t    "expr_without_variable :  T_ARRAY_CAST   expr ",
//t    "expr_without_variable :  T_OBJECT_CAST   expr ",
//t    "expr_without_variable :  T_BOOL_CAST   expr ",
//t    "expr_without_variable :  T_UNSET_CAST   expr ",
//t    "expr_without_variable :  T_EXIT   exit_expr ",
//t   "\$\$9 :",
//t    "expr_without_variable : '@'\$\$9  expr ",
//t    "expr_without_variable :  scalar ",
//t    "expr_without_variable :  T_ARRAY  '('  array_pair_list  ')'",
//t    "expr_without_variable : '`'  encaps_list  '`'",
//t    "expr_without_variable :  T_PRINT   expr ",
//t    "function_call :  T_STRING  '('  function_call_parameter_list  ')'",
//t    "function_call :  fully_qualified_class_name   T_DOUBLE_COLON   T_STRING  '('  function_call_parameter_list  ')'",
//t    "function_call :  fully_qualified_class_name   T_DOUBLE_COLON   variable_without_objects  '('  function_call_parameter_list  ')'",
//t    "function_call :  variable_without_objects  '('  function_call_parameter_list  ')'",
//t    "fully_qualified_class_name :  T_STRING ",
//t    "fully_qualified_class_name :  T_CLASSNAME ",
//t    "class_name_reference :  T_STRING ",
//t    "class_name_reference :  T_CLASSNAME ",
//t    "class_name_reference :  dynamic_class_name_reference ",
//t    "dynamic_class_name_reference :  base_variable   T_OBJECT_OPERATOR   object_property   dynamic_class_name_variable_properties ",
//t    "dynamic_class_name_reference :  base_variable ",
//t    "dynamic_class_name_variable_properties :  dynamic_class_name_variable_properties   dynamic_class_name_variable_property ",
//t    "dynamic_class_name_variable_properties :",
//t    "dynamic_class_name_variable_property :  T_OBJECT_OPERATOR   object_property ",
//t    "exit_expr :",
//t    "exit_expr : '(' ')'",
//t    "exit_expr : '('  expr  ')'",
//t    "ctor_arguments : '('  function_call_parameter_list  ')'",
//t    "ctor_arguments : '('  function_call_parameter_list  ')' '{'  class_statement_list  '}'",
//t    "common_scalar :  T_LNUMBER ",
//t    "common_scalar :  T_DNUMBER ",
//t    "common_scalar :  T_CONSTANT_ENCAPSED_STRING ",
//t    "common_scalar :  T_LINE ",
//t    "common_scalar :  T_FILE ",
//t    "common_scalar :  T_CLASS_C ",
//t    "common_scalar :  T_METHOD_C ",
//t    "common_scalar :  T_FUNC_C ",
//t    "static_scalar :  common_scalar ",
//t    "static_scalar :  T_STRING ",
//t    "static_scalar : '+'  static_scalar ",
//t    "static_scalar : '-'  static_scalar ",
//t    "static_scalar :  T_ARRAY  '('  static_array_pair_list  ')'",
//t    "static_scalar :  class_constant ",
//t    "scalar :  T_STRING ",
//t    "scalar :  T_STRING_VARNAME ",
//t    "scalar :  class_constant ",
//t    "scalar :  common_scalar ",
//t    "scalar : '\"'  encaps_list  '\"'",
//t    "scalar : '\\''  encaps_list  '\\''",
//t    "scalar :  T_START_HEREDOC   encaps_list   T_END_HEREDOC ",
//t    "static_array_pair_list :",
//t    "static_array_pair_list :  non_empty_static_array_pair_list   possible_comma ",
//t    "possible_comma :",
//t    "possible_comma : ','",
//t    "non_empty_static_array_pair_list :  non_empty_static_array_pair_list  ','  static_scalar   T_DOUBLE_ARROW   static_scalar ",
//t    "non_empty_static_array_pair_list :  non_empty_static_array_pair_list  ','  static_scalar ",
//t    "non_empty_static_array_pair_list :  static_scalar   T_DOUBLE_ARROW   static_scalar ",
//t    "non_empty_static_array_pair_list :  static_scalar ",
//t    "expr :  r_variable ",
//t    "expr :  expr_without_variable ",
//t    "r_variable :  variable ",
//t    "w_variable :  variable ",
//t    "rw_variable :  variable ",
//t    "variable :  base_variable_with_function_calls   T_OBJECT_OPERATOR   object_property   method_or_not   variable_properties ",
//t    "variable :  base_variable_with_function_calls ",
//t    "variable_properties :  variable_properties   variable_property ",
//t    "variable_properties :",
//t    "variable_property :  T_OBJECT_OPERATOR   object_property   method_or_not ",
//t    "method_or_not : '('  function_call_parameter_list  ')'",
//t    "method_or_not :",
//t    "variable_without_objects :  reference_variable ",
//t    "variable_without_objects :  simple_indirect_reference   reference_variable ",
//t    "static_member :  fully_qualified_class_name   T_DOUBLE_COLON   variable_without_objects ",
//t    "base_variable_with_function_calls :  base_variable ",
//t    "base_variable_with_function_calls :  function_call ",
//t    "base_variable :  reference_variable ",
//t    "base_variable :  simple_indirect_reference   reference_variable ",
//t    "base_variable :  static_member ",
//t    "reference_variable :  reference_variable  '['  dim_offset  ']'",
//t    "reference_variable :  reference_variable  '{'  expr  '}'",
//t    "reference_variable :  compound_variable ",
//t    "compound_variable :  T_VARIABLE ",
//t    "compound_variable : '\$' '{'  expr  '}'",
//t    "dim_offset :",
//t    "dim_offset :  expr ",
//t    "object_property :  object_dim_list ",
//t   "\$\$10 :",
//t    "object_property :  variable_without_objects \$\$1",
//t    "object_dim_list :  object_dim_list  '['  dim_offset  ']'",
//t    "object_dim_list :  object_dim_list  '{'  expr  '}'",
//t    "object_dim_list :  variable_name ",
//t    "variable_name :  T_STRING ",
//t    "variable_name : '{'  expr  '}'",
//t    "simple_indirect_reference : '\$'",
//t    "simple_indirect_reference :  simple_indirect_reference  '\$'",
//t    "assignment_list :  assignment_list  ','  assignment_list_element ",
//t    "assignment_list :  assignment_list_element ",
//t    "assignment_list_element :  variable ",
//t   "\$\$11 :",
//t    "assignment_list_element :  T_LIST  '('\$\$1  assignment_list  ')'",
//t    "assignment_list_element :",
//t    "array_pair_list :",
//t    "array_pair_list :  non_empty_array_pair_list   possible_comma ",
//t    "non_empty_array_pair_list :  non_empty_array_pair_list  ','  expr   T_DOUBLE_ARROW   expr ",
//t    "non_empty_array_pair_list :  non_empty_array_pair_list  ','  expr ",
//t    "non_empty_array_pair_list :  expr   T_DOUBLE_ARROW   expr ",
//t    "non_empty_array_pair_list :  expr ",
//t    "non_empty_array_pair_list :  non_empty_array_pair_list  ','  expr   T_DOUBLE_ARROW  '&'  w_variable ",
//t    "non_empty_array_pair_list :  non_empty_array_pair_list  ',' '&'  w_variable ",
//t    "non_empty_array_pair_list :  expr   T_DOUBLE_ARROW  '&'  w_variable ",
//t    "non_empty_array_pair_list : '&'  w_variable ",
//t    "encaps_list :  encaps_list   encaps_var ",
//t    "encaps_list :  encaps_list   T_STRING ",
//t    "encaps_list :  encaps_list   T_NUM_STRING ",
//t    "encaps_list :  encaps_list   T_ENCAPSED_AND_WHITESPACE ",
//t    "encaps_list :  encaps_list   T_CHARACTER ",
//t    "encaps_list :  encaps_list   T_BAD_CHARACTER ",
//t    "encaps_list :  encaps_list  '['",
//t    "encaps_list :  encaps_list  ']'",
//t    "encaps_list :  encaps_list  '{'",
//t    "encaps_list :  encaps_list  '}'",
//t    "encaps_list :  encaps_list   T_OBJECT_OPERATOR ",
//t    "encaps_list :",
//t    "encaps_var :  T_VARIABLE ",
//t   "\$\$12 :",
//t    "encaps_var :  T_VARIABLE  '['\$\$1  encaps_var_offset  ']'",
//t    "encaps_var :  T_VARIABLE   T_OBJECT_OPERATOR   T_STRING ",
//t    "encaps_var :  T_DOLLAR_OPEN_CURLY_BRACES   expr  '}'",
//t    "encaps_var :  T_DOLLAR_OPEN_CURLY_BRACES   T_STRING_VARNAME  '['  expr  ']' '}'",
//t    "encaps_var :  T_CURLY_OPEN   variable  '}'",
//t    "encaps_var_offset :  T_STRING ",
//t    "encaps_var_offset :  T_NUM_STRING ",
//t    "encaps_var_offset :  T_VARIABLE ",
//t    "internal_functions_in_yacc :  T_ISSET  '('  isset_variables  ')'",
//t    "internal_functions_in_yacc :  T_EMPTY  '('  variable  ')'",
//t    "internal_functions_in_yacc :  T_INCLUDE   expr ",
//t    "internal_functions_in_yacc :  T_INCLUDE_ONCE   expr ",
//t    "internal_functions_in_yacc :  T_EVAL  '('  expr  ')'",
//t    "internal_functions_in_yacc :  T_REQUIRE   expr ",
//t    "internal_functions_in_yacc :  T_REQUIRE_ONCE   expr ",
//t    "isset_variables :  variable ",
//t   "\$\$13 :",
//t    "isset_variables :  isset_variables  ','\$\$1  variable ",
//t    "class_constant :  fully_qualified_class_name   T_DOUBLE_COLON   T_STRING ",
//t  );
  var $yyName= array(    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"'!'","'\"'",null,"'\$'","'%'",
    "'&'","'\\''","'('","')'","'*'","'+'","','","'-'","'.'","'/'",null,
    null,null,null,null,null,null,null,null,null,"':'","';'","'<'","'='",
    "'>'","'?'","'@'",null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,"'['",null,"']'","'^'",null,"'`'",null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"'{'","'|'","'}'","'~'",null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,"T_COMPARE_ARROW","T_REQUIRE_ONCE","T_REQUIRE","T_EVAL",
    "T_INCLUDE_ONCE","T_INCLUDE","T_LOGICAL_OR","T_LOGICAL_XOR",
    "T_LOGICAL_AND","T_PRINT","T_SR_EQUAL","T_SL_EQUAL","T_XOR_EQUAL",
    "T_OR_EQUAL","T_AND_EQUAL","T_MOD_EQUAL","T_CONCAT_EQUAL",
    "T_DIV_EQUAL","T_MUL_EQUAL","T_MINUS_EQUAL","T_PLUS_EQUAL",
    "T_BOOLEAN_OR","T_BOOLEAN_AND","T_IS_NOT_IDENTICAL","T_IS_IDENTICAL",
    "T_IS_NOT_EQUAL","T_IS_EQUAL","T_IS_GREATER_OR_EQUAL",
    "T_IS_SMALLER_OR_EQUAL","T_SR","T_SL","T_INSTANCEOF","T_UNSET_CAST",
    "T_BOOL_CAST","T_OBJECT_CAST","T_ARRAY_CAST","T_STRING_CAST",
    "T_DOUBLE_CAST","T_INT_CAST","T_DEC","T_INC","T_CLONE","T_NEW",
    "T_EXIT","T_IF","T_ELSEIF","T_ELSE","T_ENDIF","T_LNUMBER","T_DNUMBER",
    "T_STRING","T_STRING_VARNAME","T_VARIABLE","T_NUM_STRING",
    "T_INLINE_HTML","T_CHARACTER","T_BAD_CHARACTER",
    "T_ENCAPSED_AND_WHITESPACE","T_CONSTANT_ENCAPSED_STRING","T_ECHO",
    "T_DO","T_WHILE","T_ENDWHILE","T_FOR","T_ENDFOR","T_FOREACH",
    "T_ENDFOREACH","T_DECLARE","T_ENDDECLARE","T_AS","T_SWITCH",
    "T_ENDSWITCH","T_CASE","T_DEFAULT","T_BREAK","T_CONTINUE",
    "T_FUNCTION","T_CONST","T_RETURN","T_TRY","T_CATCH","T_THROW","T_USE",
    "T_GLOBAL","T_PUBLIC","T_PROTECTED","T_PRIVATE","T_FINAL",
    "T_ABSTRACT","T_STATIC","T_VAR","T_UNSET","T_ISSET","T_EMPTY",
    "T_CLASS","T_INTERFACE","T_EXTENDS","T_IMPLEMENTS",
    "T_OBJECT_OPERATOR","T_DOUBLE_ARROW","T_LIST","T_ARRAY","T_CLASS_C",
    "T_METHOD_C","T_FUNC_C","T_LINE","T_FILE","T_COMMENT","T_DOC_COMMENT",
    "T_OPEN_TAG","T_OPEN_TAG_WITH_ECHO","T_CLOSE_TAG","T_WHITESPACE",
    "T_START_HEREDOC","T_END_HEREDOC","T_DOLLAR_OPEN_CURLY_BRACES",
    "T_CURLY_OPEN","T_DOUBLE_COLON","T_HALT_COMPILER","T_CLASSNAME",
    "T_PACKAGE","T_ENUM","T_OPERATOR","T_THROWS","T_COMPARE","T_IMPORT",
    "T_VOID","T_CONSTRUCT","T_FINALLY",
  );
    /**
     * (syntax) error message.
     * Can be overwritten to control message format.
     * @param message text to be displayed.
     * @param expected vector of acceptable tokens, if available.
     */
    function raiseError ($message, $expected = null)
    {     
        if ($expected !== null ) {
            $m = "$message expecting";
            foreach($expected as $e) {
                $m .= " $e";
            }
        } else {
            $m = $message;
        }
        return xp::error($message);  
    }



    /**
     * index-checked interface to yyName[].
     * @param token single character or %token value.
     * @return token name or [illegal] or [unknown].
     */
    function yyname ($token) {
        if ($token < 0 || $token >  count($this->yyName)) return "[illegal]";
        if (($name = $this->yyName[$token]) != null) return $name;
        return "[unknown]";
    }

    /**
     * computes list of expected tokens on error by tracing the tables.
     * @param state for which to compute the list.
     * @return list of token names.
     */
    function yyExpecting ($state) {
        $len = 0;
        $ok = array();//new boolean[YyNameClass.yyName.length];

        if (($n =  $this->yySindex[$state]) != 0) {
            $start = $n;
            if ($start < 0) { $start = 0; }       
            for ($token = $start;
                $token < count($this->yyName) && 
                        $n+$token < count($this->yyTable); $token++) {
                if (@$this->yyCheck[$n+$token] == $token && !@$ok[$token] && 
                        $this->yyName[$token] != null) {
                    $len++;
                    $ok[$token] = true;
                }
            } // end for
        }
        if (($n = $this->yyRindex[$state]) != 0) {
            $start = $n;
            if ($start < 0) { $start = 0; }       
            for ($token = $start;
                     $token < count($this->yyName)  && 
                     $n+$token <  count($this->yyTable); $token++) 
            {
               if (@$this->yyCheck[$n+$token] == $token && !@$ok[$token] 
                          && @$this->yyName[$token] != null) {
                    $len++;
                    $ok[$token] = true;
               }
            } // end for
        }
        $result = array();
        for ($n = $token = 0; $n < $len;  $token++) {
            if (@$ok[$token]) { $result[$n++] =$this->yyName[$token]; }
        }
        return $result;
    }


    /**
     * initial size and increment of the state/value stack [default 256].
     * This is not final so that it can be overwritten outside of invocations
     * of yyparse().
     */
    var $yyMax;

    /**
     * executed at the beginning of a reduce action.
     * Used as $$ = yyDefault($1), prior to the user-specified action, if any.
     * Can be overwritten to provide deep copy, etc.
     * @param first value for $1, or null.
     * @return first.
     */
    function yyDefault ($first) {
        return $first;
    }

    /**
     * the generated parser.
     * Maintains a state and a value stack, currently with fixed maximum size.
     * @param yyLex scanner.
     * @return result of the last reduction, if any.
     * @throws yyException on irrecoverable parse error.
     */
    function yyparse (&$yyLex) {
//t        $this->debug = true;
        $this->yyLex = &$yyLex;

        if ($this->debug)
           echo "\tStarting jay:yyparse";
        //error_reporting(E_ALL);
        if ($this->yyMax <= 0) $this->yyMax = 256;			// initial size
        $yyState = 0;
        $yyStates = array();
        $yyVal = null;
        $yyVals = array();
        $this->yyTableCount = count($this->yyTable);
        $yyToken = -1;                 // current input
        $yyErrorFlag = 0;              // #tks to shift
        $tloop = 0;
    
        while (1) {//yyLoop: 
            //echo "yyLoop\n";
            //if ($this->debug) echo "\tyyLoop:\n";
            for ($yyTop = 0;; $yyTop++) {
                //if ($this->debug) echo ($tloop++) .">>>>>>yyLoop:yTop = {$yyTop}\n";
                $yyStates[$yyTop] = $yyState;
                $yyVals[$yyTop] = $yyVal;

                //yyDiscarded: 
                for (;;) {	// discarding a token does not change stack
                    //echo "yyDiscarded\n";
                    if ($this->debug) echo "\tIn main loop : State = {$yyState}\n";
                    if ($this->debug) echo "\tyydefred = {$this->yyDefRed[$yyState]}\n";
                    if (($yyN = $this->yyDefRed[$yyState]) == 0) {	
                        // else [default] reduce (yyN)
                        //if ($this->debug) echo "\tA:token is $yyToken\n";
                        if ($yyToken < 0) {
                            //if ($this->debug) echo "\tA:advance\n";
                            if ($yyLex->advance()) {
                               
                                $yyToken = $yyLex->token ;
                            } else {
                                $yyToken = 0;
                            }
                        }
                        if ($this->debug) {
                            echo "\tA:token is now " .
                            "{$this->yyName[$yyToken]} " .token_name($yyToken).  "\n";
                            var_dump($yyToken);
                        }
                        //if ($this->debug) echo "GOT TOKEN $yyToken";
                        //if ($this->debug) echo "Sindex:  {$this->yySindex[$yyState]}\n";

                        if (($yyN = $this->yySindex[$yyState]) != 0
                                  && ($yyN += $yyToken) >= 0
                                  && $yyN < $this->yyTableCount && $this->yyCheck[$yyN] == $yyToken) {
                            $yyState = $this->yyTable[$yyN];		// shift to yyN
                            $yyVal = $yyLex->value;
                            $yyToken = -1;
                            if ($yyErrorFlag > 0) $yyErrorFlag--;
                            continue 2; // goto!!yyLoop;
                        }
 
                       
              
                        if (($yyN = $this->yyRindex[$yyState]) != 0
                                && ($yyN += $yyToken) >= 0
                                && $yyN < $this->yyTableCount && $this->yyCheck[$yyN] == $yyToken) {
                            $yyN = $this->yyTable[$yyN];			// reduce (yyN)
                        } else {
                            switch ($yyErrorFlag) {
    
                                case 0:
                                    $info = $yyLex->parseError();
                                    $info .= ', Unexpected '.$this->yyName($yyToken).',';
                                    return $this->raiseError("$info syntax error",
                                                $this->yyExpecting($yyState));
                                
                                case 1: case 2:
                                    $yyErrorFlag = 3;
                                    do { 
                                        if (($yyN = @$this->yySindex
                                                [$yyStates[$yyTop]]) != 0
                                                && ($yyN += $this->yyErrorCode) >= 0 && $yyN < $this->yyTableCount
                                                && $this->yyCheck[$yyN] == $this->yyErrorCode) {
                                            $yyState = $this->yyTable[$yyN];
                                            $yyVal = $yyLex->value;
                                            //vi /echo "goto yyLoop?\n";
                                            break 3; //continue yyLoop;
                                        }
                                    } while ($yyTop-- >= 0);
                                    $info = $yyLex->parseError();
                                    return $this->raiseError("$info irrecoverable syntax error");
    
                                case 3:
                                    if ($yyToken == 0) {
                                        $info =$yyLex->parseError();
                                        return $this->raiseError("$info irrecoverable syntax error at end-of-file");
                                    }
                                    $yyToken = -1;
                                    //echo "goto yyDiscarded?";  
                                    break 1; //continue yyDiscarded;		// leave stack alone
                            }
                        }
                    }    
                    $yyV = $yyTop + 1-$this->yyLen[$yyN];
                    //if ($this->debug) echo "\tyyV is $yyV\n";
                    $yyVal = $yyV > $yyTop ? null : $yyVals[$yyV];
                    // echo "\tyyVal is ". serialize($yyVal) ."\n";
                    if ($this->debug) echo "\tswitch($yyN)\n";
                   
 switch ($yyN) {

    case 1:  #line 196 "parser_generator/XP2.jay"
    { /* echo PNode::stringOf($$); */ } break;

    case 2:  #line 200 "parser_generator/XP2.jay"
    { $yyVal[]= $yyVals[0+$yyTop]; } break;

    case 9:  #line 211 "parser_generator/XP2.jay"
    { compiler::register("__COMPILER_HALT_OFFSET__", compiler::call('zend_get_scanned_file_offset'), CONST_CS); YYACCEPT; } break;

    case 10:  #line 216 "parser_generator/XP2.jay"
    {
          $yyVal[]= $yyVals[0+$yyTop]; 
        } break;

    case 11:  #line 219 "parser_generator/XP2.jay"
    {
          $yyVal= NULL; 
        } break;

    case 16:  #line 230 "parser_generator/XP2.jay"
    { compiler::error(E_COMPILE_ERROR, '[E_COMPILE_ERROR] '."__HALT_COMPILER() can only be used from the outermost scope"); } break;

    case 17:  #line 235 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 18:  #line 239 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 19:  #line 240 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('If', array(&$yyVals[-4+$yyTop], &$yyVals[-2+$yyTop], &$yyVals[-1+$yyTop], &$yyVals[0+$yyTop]));
        } break;

    case 20:  #line 243 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('While', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop]));
        } break;

    case 21:  #line 246 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('DoWhile', array(&$yyVals[-5+$yyTop], &$yyVals[-2+$yyTop]));
        } break;

    case 22:  #line 249 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('For', array(&$yyVals[-6+$yyTop], &$yyVals[-4+$yyTop], &$yyVals[-2+$yyTop], &$yyVals[0+$yyTop]));
        } break;

    case 23:  #line 252 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Switch', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop]));
        } break;

    case 24:  #line 255 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('Break', array(NULL));
        } break;

    case 25:  #line 258 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Break', array(&$yyVals[-1+$yyTop]));
        } break;

    case 26:  #line 261 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Contine', array(NULL));
        } break;

    case 27:  #line 264 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Break', array(&$yyVals[-1+$yyTop]));
        } break;

    case 28:  #line 267 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('Return', array(NULL)); 
        } break;

    case 29:  #line 270 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('Return', array($yyVals[-1+$yyTop]));
        } break;

    case 30:  #line 273 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Return', array($yyVals[-1+$yyTop]));
        } break;

    case 33:  #line 278 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('Echo', array($yyVals[-1+$yyTop])); 
        } break;

    case 34:  #line 281 "parser_generator/XP2.jay"
    { compiler::call('zend_do_echo', array($yyVals[0+$yyTop] )); } break;

    case 35:  #line 282 "parser_generator/XP2.jay"
    { 
          /* Intentionally empty*/
        } break;

    case 36:  #line 285 "parser_generator/XP2.jay"
    {
    	  compiler::error(E_COMPILE_ERROR, 'use: Not yet supported. Please use include_once() or require_once()');
        } break;

    case 38:  #line 289 "parser_generator/XP2.jay"
    { compiler::call('zend_do_foreach_begin', array($yyVals[-2+$yyTop], $yyVals[-1+$yyTop], $yyVals[0+$yyTop], 1 )); } break;

    case 39:  #line 290 "parser_generator/XP2.jay"
    { compiler::call('zend_do_foreach_fetch', array($yyVals[-4+$yyTop], $yyVals[-3+$yyTop], $yyVals[0+$yyTop] )); } break;

    case 40:  #line 291 "parser_generator/XP2.jay"
    { compiler::call('zend_do_foreach_cont', array($yyVals[-8+$yyTop], $yyVals[-4+$yyTop], $yyVals[-2+$yyTop], $yyVals[-1+$yyTop] )); } break;

    case 41:  #line 292 "parser_generator/XP2.jay"
    { compiler::call('zend_do_foreach_end', array($yyVals[-10+$yyTop], $yyVals[-6+$yyTop] )); } break;

    case 42:  #line 293 "parser_generator/XP2.jay"
    { compiler::call('zend_do_foreach_begin', array($yyVals[-2+$yyTop], $yyVals[-1+$yyTop], $yyVals[0+$yyTop], 0 )); } break;

    case 43:  #line 294 "parser_generator/XP2.jay"
    { compiler::call('zend_do_foreach_fetch', array($yyVals[-4+$yyTop], $yyVals[-3+$yyTop], $yyVals[0+$yyTop] )); } break;

    case 44:  #line 295 "parser_generator/XP2.jay"
    { compiler::call('zend_do_foreach_cont', array($yyVals[-8+$yyTop], $yyVals[-4+$yyTop], $yyVals[-2+$yyTop], $yyVals[-1+$yyTop] )); } break;

    case 45:  #line 296 "parser_generator/XP2.jay"
    { compiler::call('zend_do_foreach_end', array($yyVals[-10+$yyTop], $yyVals[-6+$yyTop] )); } break;

    case 46:  #line 297 "parser_generator/XP2.jay"
    { $yyVals[0+$yyTop]->u_opline_num = get_next_op_number($CG['active_op_array']); compiler::call('zend_do_declare_begin'); } break;

    case 47:  #line 297 "parser_generator/XP2.jay"
    { compiler::call('zend_do_declare_end', array($yyVals[-5+$yyTop] )); } break;

    case 49:  #line 299 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Try', array(&$yyVals[-11+$yyTop], PNode::create('Catch', array($yyVals[-7+$yyTop], &$yyVals[-6+$yyTop], &$yyVals[-3+$yyTop], &$yyVals[-1+$yyTop])), &$yyVals[0+$yyTop]));
        } break;

    case 50:  #line 302 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('Throw', array(&$yyVals[-1+$yyTop]));
        } break;

    case 51:  #line 305 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('ImportList', array(&$yyVals[-1+$yyTop]));
        } break;

    case 52:  #line 311 "parser_generator/XP2.jay"
    { 
          $yyVal[]= $yyVals[0+$yyTop]; 
        } break;

    case 53:  #line 314 "parser_generator/XP2.jay"
    { 
          $yyVal= array($yyVals[0+$yyTop]); 
        } break;

    case 54:  #line 320 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('Import', array(&$yyVals[0+$yyTop], NULL)); 
        } break;

    case 55:  #line 323 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('Import', array(&$yyVals[-2+$yyTop], $yyVals[0+$yyTop])); 
        } break;

    case 56:  #line 326 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('Import', array(&$yyVals[-2+$yyTop], $yyVals[0+$yyTop])); 
        } break;

    case 57:  #line 332 "parser_generator/XP2.jay"
    { 
          $yyVal= $yyVals[0+$yyTop]; 
        } break;

    case 58:  #line 335 "parser_generator/XP2.jay"
    { 
          $yyVal= NULL; 
        } break;

    case 59:  #line 341 "parser_generator/XP2.jay"
    { 
          $yyVal= array($yyVals[0+$yyTop]); 
        } break;

    case 60:  #line 344 "parser_generator/XP2.jay"
    { 
          $yyVal[]= $yyVals[0+$yyTop]; 
        } break;

    case 61:  #line 350 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Finally', array($yyVals[-1+$yyTop]));
        } break;

    case 62:  #line 353 "parser_generator/XP2.jay"
    { 
          $yyVal= NULL; 
        } break;

    case 63:  #line 359 "parser_generator/XP2.jay"
    {
      $yyVal= &PNode::create('Catch', array($yyVals[-5+$yyTop], &$yyVals[-4+$yyTop], &$yyVals[-1+$yyTop]));
    } break;

    case 64:  #line 365 "parser_generator/XP2.jay"
    { 
          /* compiler::call('zend_do_ticks'); */ 
        } break;

    case 67:  #line 376 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('Unset', array(&$yyVals[0+$yyTop])); 
        } break;

    case 68:  #line 382 "parser_generator/XP2.jay"
    { $yyVal = $yyVals[0+$yyTop]; } break;

    case 69:  #line 383 "parser_generator/XP2.jay"
    { $yyVal = $yyVals[-1+$yyTop]; } break;

    case 70:  #line 388 "parser_generator/XP2.jay"
    { /* compiler::call('zend_do_ticks'); */ } break;

    case 71:  #line 392 "parser_generator/XP2.jay"
    { /* compiler::call('zend_do_ticks'); */ } break;

    case 72:  #line 396 "parser_generator/XP2.jay"
    { 
          $yyVal[]= $yyVals[0+$yyTop];
        } break;

    case 73:  #line 399 "parser_generator/XP2.jay"
    {
          $yyVal= NULL;
        } break;

    case 76:  #line 407 "parser_generator/XP2.jay"
    {
          $yyVal= PNode::create('ImportList', array(&$yyVals[-1+$yyTop]));
        } break;

    case 79:  #line 418 "parser_generator/XP2.jay"
    { compiler::call('zend_do_fetch_class', array($yyVal, $yyVals[0+$yyTop])); compiler::call('zend_do_import', array($yyVal, NULL )); } break;

    case 80:  #line 419 "parser_generator/XP2.jay"
    { compiler::call('zend_do_fetch_class', array($yyVal, $yyVals[-2+$yyTop])); compiler::call('zend_do_import', array($yyVal, $yyVals[0+$yyTop] )); } break;

    case 81:  #line 423 "parser_generator/XP2.jay"
    { /* compiler::call('zend_do_ticks'); */ } break;

    case 82:  #line 427 "parser_generator/XP2.jay"
    { $yyVal= FALSE; } break;

    case 83:  #line 428 "parser_generator/XP2.jay"
    { $yyVal= TRUE; } break;

    case 84:  #line 433 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('FunctionDeclaration', array($yyVals[-7+$yyTop], $yyVals[-6+$yyTop], $yyVals[-4+$yyTop], $yyVals[-1+$yyTop]));
        } break;

    case 85:  #line 439 "parser_generator/XP2.jay"
    { $yyVal= NULL; } break;

    case 86:  #line 440 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 87:  #line 444 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('ClassDeclaration', array($yyVals[-7+$yyTop], $yyVals[-6+$yyTop], $yyVals[-5+$yyTop], $yyVals[-4+$yyTop], $yyVals[-3+$yyTop], $yyVals[-1+$yyTop]));
        } break;

    case 88:  #line 447 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('ClassDeclaration', array($yyVals[-6+$yyTop], $yyVals[-5+$yyTop], $yyVals[-4+$yyTop], $yyVals[-3+$yyTop], NULL, $yyVals[-1+$yyTop]));
        } break;

    case 89:  #line 453 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('PackageDeclaration', array($yyVals[-3+$yyTop], &$yyVals[-1+$yyTop]));
        } break;

    case 90:  #line 459 "parser_generator/XP2.jay"
    { $yyVal= 0; } break;

    case 91:  #line 460 "parser_generator/XP2.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 92:  #line 461 "parser_generator/XP2.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 93:  #line 465 "parser_generator/XP2.jay"
    { $yyVal= NULL; } break;

    case 94:  #line 466 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 95:  #line 470 "parser_generator/XP2.jay"
    { $yyVal= 0; } break;

    case 98:  #line 479 "parser_generator/XP2.jay"
    { $yyVal= NULL; } break;

    case 99:  #line 480 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 100:  #line 484 "parser_generator/XP2.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 101:  #line 485 "parser_generator/XP2.jay"
    { $yyVal[]= $yyVals[0+$yyTop]; } break;

    case 102:  #line 489 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('ClassDeclaration', array($yyVals[-5+$yyTop], 0, $yyVals[-3+$yyTop], NULL, NULL, &$yyVals[-1+$yyTop]));
        } break;

    case 105:  #line 500 "parser_generator/XP2.jay"
    {
          $yyVal[]= $yyVals[0+$yyTop];
        } break;

    case 106:  #line 503 "parser_generator/XP2.jay"
    {
          $yyVal= array($yyVals[0+$yyTop]);
        } break;

    case 107:  #line 509 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('EnumMember', array($yyVals[0+$yyTop], NULL));
        } break;

    case 108:  #line 512 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('EnumMember', array($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]));
        } break;

    case 109:  #line 515 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('EnumMethod', array($yyVals[-3+$yyTop], &$yyVals[-1+$yyTop]));
        } break;

    case 110:  #line 521 "parser_generator/XP2.jay"
    { $yyVal= NULL; } break;

    case 111:  #line 522 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 112:  #line 527 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 113:  #line 528 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 116:  #line 538 "parser_generator/XP2.jay"
    {
          $yyVal= array(PNode::create('declare', array($yyVals[-2+$yyTop], $yyVals[0+$yyTop])));
        } break;

    case 117:  #line 541 "parser_generator/XP2.jay"
    {
          $yyVal[]= &PNode::create('declare', array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]));
        } break;

    case 118:  #line 548 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 119:  #line 549 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 120:  #line 554 "parser_generator/XP2.jay"
    { 
          $yyVal= array();
        } break;

    case 121:  #line 557 "parser_generator/XP2.jay"
    { 
          $yyVal[]= &PNode::create('Case', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop]));
        } break;

    case 122:  #line 560 "parser_generator/XP2.jay"
    {
          $yyVal[]= &PNode::create('Case', array(NULL, &$yyVals[0+$yyTop]));
        } break;

    case 125:  #line 571 "parser_generator/XP2.jay"
    {
          $yyVal= NULL;
        } break;

    case 126:  #line 574 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('ElseIf', array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]));
        } break;

    case 128:  #line 581 "parser_generator/XP2.jay"
    {
          $yyVal= $yyVals[0+$yyTop];
        } break;

    case 129:  #line 587 "parser_generator/XP2.jay"
    {
          $yyVal= $yyVals[0+$yyTop];
        } break;

    case 130:  #line 590 "parser_generator/XP2.jay"
    {
          $yyVal= NULL;
        } break;

    case 131:  #line 596 "parser_generator/XP2.jay"
    {
          $yyVal= array(PNode::create('Parameter', array($yyVals[-1+$yyTop], FALSE, $yyVals[0+$yyTop], NULL)));
        } break;

    case 132:  #line 599 "parser_generator/XP2.jay"
    {
          $yyVal= array(PNode::create('Parameter', array($yyVals[-2+$yyTop], TRUE, $yyVals[0+$yyTop], NULL)));
        } break;

    case 133:  #line 602 "parser_generator/XP2.jay"
    {
          $yyVal= array(PNode::create('Parameter', array($yyVals[-4+$yyTop], TRUE, $yyVals[-2+$yyTop], $yyVals[0+$yyTop])));
        } break;

    case 134:  #line 605 "parser_generator/XP2.jay"
    {
          $yyVal= array(PNode::create('Parameter', array($yyVals[-3+$yyTop], FALSE, $yyVals[-2+$yyTop], $yyVals[0+$yyTop])));
        } break;

    case 135:  #line 608 "parser_generator/XP2.jay"
    {
          $yyVal[]= &PNode::create('Parameter', array($yyVals[-1+$yyTop], FALSE, $yyVals[0+$yyTop], NULL));
        } break;

    case 136:  #line 611 "parser_generator/XP2.jay"
    {
          $yyVal[]= &PNode::create('Parameter', array($yyVals[-2+$yyTop], TRUE, $yyVals[-1+$yyTop], NULL));
        } break;

    case 137:  #line 614 "parser_generator/XP2.jay"
    {
          $yyVal[]= &PNode::create('Parameter', array($yyVals[-4+$yyTop], TRUE, $yyVals[-3+$yyTop], $yyVals[-2+$yyTop]));
        } break;

    case 138:  #line 617 "parser_generator/XP2.jay"
    {
          $yyVal[]= &PNode::create('Parameter', array($yyVals[-3+$yyTop], FALSE, $yyVals[-2+$yyTop], $yyVals[-1+$yyTop]));
        } break;

    case 139:  #line 623 "parser_generator/XP2.jay"
    { $yyVal= NULL; } break;

    case 140:  #line 624 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 141:  #line 625 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 142:  #line 626 "parser_generator/XP2.jay"
    { $yyVal= 'array'; } break;

    case 143:  #line 630 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 144:  #line 631 "parser_generator/XP2.jay"
    { $yyVal= array(); } break;

    case 145:  #line 636 "parser_generator/XP2.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 146:  #line 637 "parser_generator/XP2.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 147:  #line 638 "parser_generator/XP2.jay"
    { $yyVal= array($yyVals[0+$yyTop]);  } break;

    case 148:  #line 639 "parser_generator/XP2.jay"
    { $yyVal[]= $yyVals[0+$yyTop]; } break;

    case 149:  #line 640 "parser_generator/XP2.jay"
    { $yyVal[]= $yyVals[0+$yyTop]; } break;

    case 150:  #line 641 "parser_generator/XP2.jay"
    { $yyVal[]= $yyVals[0+$yyTop]; } break;

    case 151:  #line 645 "parser_generator/XP2.jay"
    { compiler::call('zend_do_fetch_global_variable', array($yyVals[0+$yyTop], NULL, ZEND_FETCH_GLOBAL )); } break;

    case 152:  #line 646 "parser_generator/XP2.jay"
    { compiler::call('zend_do_fetch_global_variable', array($yyVals[0+$yyTop], NULL, ZEND_FETCH_GLOBAL )); } break;

    case 153:  #line 651 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 154:  #line 652 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 155:  #line 653 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 156:  #line 658 "parser_generator/XP2.jay"
    { compiler::call('zend_do_fetch_static_variable', array($yyVals[0+$yyTop], NULL, ZEND_FETCH_STATIC )); } break;

    case 157:  #line 659 "parser_generator/XP2.jay"
    { compiler::call('zend_do_fetch_static_variable', array($yyVals[-2+$yyTop], $yyVals[0+$yyTop], ZEND_FETCH_STATIC )); } break;

    case 158:  #line 660 "parser_generator/XP2.jay"
    { compiler::call('zend_do_fetch_static_variable', array($yyVals[0+$yyTop], NULL, ZEND_FETCH_STATIC )); } break;

    case 159:  #line 661 "parser_generator/XP2.jay"
    { compiler::call('zend_do_fetch_static_variable', array($yyVals[-2+$yyTop], $yyVals[0+$yyTop], ZEND_FETCH_STATIC )); } break;

    case 160:  #line 667 "parser_generator/XP2.jay"
    { $yyVal[]= $yyVals[0+$yyTop]; } break;

    case 161:  #line 668 "parser_generator/XP2.jay"
    { $yyVal= NULL; } break;

    case 162:  #line 672 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('MemberDeclarationList', array($yyVals[-2+$yyTop], &$yyVals[-1+$yyTop])); 
        } break;

    case 163:  #line 675 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('ClassConstantDeclarationList', array($yyVals[-1+$yyTop], $yyVals[0+$yyTop])); 
        } break;

    case 164:  #line 678 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('OperatorDeclaration', array(NULL, $yyVals[-8+$yyTop], $yyVals[-6+$yyTop], $yyVals[-5+$yyTop], $yyVals[-3+$yyTop], $yyVals[-1+$yyTop], $yyVals[0+$yyTop]));
        } break;

    case 165:  #line 681 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('OperatorDeclaration', array($yyVals[-9+$yyTop], $yyVals[-8+$yyTop], $yyVals[-6+$yyTop], $yyVals[-5+$yyTop], $yyVals[-3+$yyTop], $yyVals[-1+$yyTop], $yyVals[0+$yyTop]));
        } break;

    case 167:  #line 688 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('ConstructorDeclaration', array(NULL, $yyVals[-6+$yyTop], $yyVals[-3+$yyTop], $yyVals[-1+$yyTop], $yyVals[0+$yyTop]));
        } break;

    case 168:  #line 691 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('ConstructorDeclaration', array($yyVals[-7+$yyTop], $yyVals[-6+$yyTop], $yyVals[-3+$yyTop], $yyVals[-1+$yyTop], $yyVals[0+$yyTop]));
        } break;

    case 169:  #line 694 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('MethodDeclaration', array(NULL, $yyVals[-8+$yyTop], $yyVals[-7+$yyTop], $yyVals[-6+$yyTop], $yyVals[-5+$yyTop], $yyVals[-3+$yyTop], $yyVals[-1+$yyTop], $yyVals[0+$yyTop]));
        } break;

    case 170:  #line 697 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('MethodDeclaration', array($yyVals[-9+$yyTop], $yyVals[-8+$yyTop], $yyVals[-7+$yyTop], $yyVals[-6+$yyTop], $yyVals[-5+$yyTop], $yyVals[-3+$yyTop], $yyVals[-1+$yyTop], $yyVals[0+$yyTop]));
        } break;

    case 171:  #line 703 "parser_generator/XP2.jay"
    { 
          $yyVal= $yyVals[0+$yyTop]; 
        } break;

    case 172:  #line 706 "parser_generator/XP2.jay"
    { 
          $yyVal= NULL; 
        } break;

    case 173:  #line 709 "parser_generator/XP2.jay"
    { 
          $yyVal= 'mixed'; 
          compiler::error(E_STRICT, '"function" is deprecated, use return type or "void" instead'); 
        } break;

    case 174:  #line 716 "parser_generator/XP2.jay"
    { 
          $yyVal= NULL; 
        } break;

    case 175:  #line 719 "parser_generator/XP2.jay"
    { 
          $yyVal= $yyVals[0+$yyTop]; 
        } break;

    case 176:  #line 725 "parser_generator/XP2.jay"
    {
          $yyVal= array($yyVals[0+$yyTop]); 
        } break;

    case 177:  #line 728 "parser_generator/XP2.jay"
    { 
          $yyVal[]= $yyVals[0+$yyTop]; 
        } break;

    case 178:  #line 734 "parser_generator/XP2.jay"
    { 
          $yyVal= $yyVals[-1+$yyTop]; 
        } break;

    case 179:  #line 740 "parser_generator/XP2.jay"
    {
          $yyVal= array($yyVals[0+$yyTop]);
        } break;

    case 180:  #line 743 "parser_generator/XP2.jay"
    {
          $yyVal[]= $yyVals[0+$yyTop];
        } break;

    case 181:  #line 749 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('Annotation', array($yyVals[0+$yyTop], NULL)); 
        } break;

    case 182:  #line 752 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('Annotation', array($yyVals[-3+$yyTop], $yyVals[-1+$yyTop])); 
        } break;

    case 183:  #line 755 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('Annotation', array($yyVals[-3+$yyTop], $yyVals[-1+$yyTop])); 
        } break;

    case 186:  #line 766 "parser_generator/XP2.jay"
    { compiler::call('zend_do_annotation_define', array($yyVals[0+$yyTop], NULL )); } break;

    case 187:  #line 767 "parser_generator/XP2.jay"
    { compiler::call('zend_do_annotation_define', array($yyVals[-2+$yyTop], $yyVals[0+$yyTop])); } break;

    case 188:  #line 771 "parser_generator/XP2.jay"
    { $yyVal= '+'; } break;

    case 189:  #line 772 "parser_generator/XP2.jay"
    { $yyVal= '-'; } break;

    case 190:  #line 773 "parser_generator/XP2.jay"
    { $yyVal= '*'; } break;

    case 191:  #line 774 "parser_generator/XP2.jay"
    { $yyVal= '/'; } break;

    case 192:  #line 775 "parser_generator/XP2.jay"
    { $yyVal= '%'; } break;

    case 193:  #line 776 "parser_generator/XP2.jay"
    { $yyVal= '!'; } break;

    case 194:  #line 777 "parser_generator/XP2.jay"
    { $yyVal= '.'; } break;

    case 195:  #line 778 "parser_generator/XP2.jay"
    { $yyVal= '++'; } break;

    case 196:  #line 779 "parser_generator/XP2.jay"
    { $yyVal= '--'; } break;

    case 197:  #line 780 "parser_generator/XP2.jay"
    { $yyVal= '__compare'; } break;

    case 198:  #line 784 "parser_generator/XP2.jay"
    { $yyVal= NULL; } break;

    case 199:  #line 785 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 200:  #line 789 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 201:  #line 790 "parser_generator/XP2.jay"
    { $yyVal= MODIFIER_PUBLIC; compiler::error(E_STRICT, '[E_STRICT] '."var: Deprecated. Please use the public/private/protected modifiers"); } break;

    case 202:  #line 794 "parser_generator/XP2.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 203:  #line 795 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 204:  #line 799 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 205:  #line 800 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 206:  #line 804 "parser_generator/XP2.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 207:  #line 805 "parser_generator/XP2.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 208:  #line 806 "parser_generator/XP2.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 209:  #line 807 "parser_generator/XP2.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 210:  #line 808 "parser_generator/XP2.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 211:  #line 809 "parser_generator/XP2.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 212:  #line 813 "parser_generator/XP2.jay"
    {
          $yyVal[]= &PNode::create('MemberDeclaration', array($yyVals[0+$yyTop], NULL));
        } break;

    case 213:  #line 816 "parser_generator/XP2.jay"
    { 
          $yyVal[]= &PNode::create('MemberDeclaration', array($yyVals[-2+$yyTop], $yyVals[0+$yyTop]));
        } break;

    case 214:  #line 819 "parser_generator/XP2.jay"
    {
          $yyVal= array(PNode::create('MemberDeclaration', array($yyVals[0+$yyTop], NULL)));
        } break;

    case 215:  #line 822 "parser_generator/XP2.jay"
    {
          $yyVal= array(PNode::create('MemberDeclaration', array($yyVals[-2+$yyTop], $yyVals[0+$yyTop])));
        } break;

    case 216:  #line 828 "parser_generator/XP2.jay"
    {
          $yyVal[]= &PNode::create('ClassConstantDeclaration', array($yyVals[-3+$yyTop], &$yyVals[-2+$yyTop]));
        } break;

    case 217:  #line 831 "parser_generator/XP2.jay"
    {
          $yyVal= array(PNode::create('ClassConstantDeclaration', array($yyVals[-2+$yyTop], &$yyVals[-1+$yyTop])));
        } break;

    case 218:  #line 837 "parser_generator/XP2.jay"
    { $yyVal[]= $yyVals[0+$yyTop]; } break;

    case 219:  #line 838 "parser_generator/XP2.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 220:  #line 843 "parser_generator/XP2.jay"
    { $yyVal= TRUE; } break;

    case 221:  #line 844 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 222:  #line 848 "parser_generator/XP2.jay"
    { $yyVal[]= $yyVals[0+$yyTop]; } break;

    case 223:  #line 849 "parser_generator/XP2.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 224:  #line 853 "parser_generator/XP2.jay"
    { compiler::call('zend_do_list_init'); } break;

    case 225:  #line 853 "parser_generator/XP2.jay"
    { compiler::call('zend_do_list_end', array($yyVal, $yyVals[0+$yyTop] )); } break;

    case 226:  #line 854 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Assign', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], TRUE));
        } break;

    case 227:  #line 857 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('Assign', array($yyVals[-3+$yyTop], &$yyVals[-1+$yyTop], TRUE));
        } break;

    case 228:  #line 860 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('New', array(&$yyVals[-2+$yyTop], &$yyVals[-1+$yyTop]));
          compiler::error(E_STRICT, 'Assigning the return value of new by reference is deprecated');
        } break;

    case 229:  #line 864 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('New', array(&$yyVals[-1+$yyTop], &$yyVals[0+$yyTop]));
        } break;

    case 230:  #line 867 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('Clone', array(&$yyVals[0+$yyTop]));
        } break;

    case 231:  #line 870 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('BinaryAssign', array($yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '+'));
        } break;

    case 232:  #line 873 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('BinaryAssign', array($yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '-'));
        } break;

    case 233:  #line 876 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('BinaryAssign', array($yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '*'));
        } break;

    case 234:  #line 879 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('BinaryAssign', array($yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '/'));
        } break;

    case 235:  #line 882 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('BinaryAssign', array($yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '.'));
        } break;

    case 236:  #line 885 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('BinaryAssign', array($yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '%'));
        } break;

    case 237:  #line 888 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('BinaryAssign', array($yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '&'));
        } break;

    case 238:  #line 891 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('BinaryAssign', array($yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '|'));
        } break;

    case 239:  #line 894 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('BinaryAssign', array($yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '^'));
        } break;

    case 240:  #line 897 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('BinaryAssign', array($yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '<<'));
        } break;

    case 241:  #line 900 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('BinaryAssign', array($yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '>>'));
        } break;

    case 242:  #line 903 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('PostInc', array(&$yyVals[-1+$yyTop]));
        } break;

    case 243:  #line 906 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('PreInc', array(&$yyVals[-1+$yyTop]));
        } break;

    case 244:  #line 909 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('PostDec', array(&$yyVals[-1+$yyTop]));
        } break;

    case 245:  #line 912 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('PreDec', array(&$yyVals[-1+$yyTop]));
        } break;

    case 246:  #line 915 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Boolean', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '||'));
        } break;

    case 247:  #line 918 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Boolean', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '&&'));
        } break;

    case 248:  #line 921 "parser_generator/XP2.jay"
    {    /* "or"*/
          $yyVal= &PNode::create('Boolean', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '||'));
        } break;

    case 249:  #line 924 "parser_generator/XP2.jay"
    {   /* "and"*/
          $yyVal= &PNode::create('Boolean', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '&&'));
        } break;

    case 250:  #line 927 "parser_generator/XP2.jay"
    {   /* "xor"*/
          $yyVal= &PNode::create('Boolean', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '^^'));
        } break;

    case 251:  #line 930 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Binary', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '|'));
        } break;

    case 252:  #line 933 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Binary', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '&'));
        } break;

    case 253:  #line 936 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Binary', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '^'));
        } break;

    case 254:  #line 939 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Binary', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '.'));
        } break;

    case 255:  #line 942 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Binary', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '+'));
        } break;

    case 256:  #line 945 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Binary', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '-'));
        } break;

    case 257:  #line 948 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Binary', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '*'));
        } break;

    case 258:  #line 951 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Binary', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '/'));
        } break;

    case 259:  #line 954 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Binary', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '%'));
        } break;

    case 260:  #line 957 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Binary', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '<<'));
        } break;

    case 261:  #line 960 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Binary', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '>>'));
        } break;

    case 262:  #line 963 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Binary', array(NULL, &$yyVals[0+$yyTop], '+'));
        } break;

    case 263:  #line 966 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Binary', array(NULL, &$yyVals[0+$yyTop], '-'));
        } break;

    case 264:  #line 969 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Not', array(&$yyVals[0+$yyTop]));
        } break;

    case 265:  #line 972 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Unary', array(&$yyVals[0+$yyTop], '~'));
        } break;

    case 266:  #line 975 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Binary', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '==='));
        } break;

    case 267:  #line 978 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Binary', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '!=='));
        } break;

    case 268:  #line 981 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Binary', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '=='));
        } break;

    case 269:  #line 984 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Binary', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '!='));
        } break;

    case 270:  #line 987 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Binary', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '<'));
        } break;

    case 271:  #line 990 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Binary', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '<='));
        } break;

    case 272:  #line 993 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Binary', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '>'));
        } break;

    case 273:  #line 996 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Binary', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '>='));
        } break;

    case 274:  #line 999 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Binary', array(&$yyVals[-2+$yyTop], &$yyVals[0+$yyTop], '<=>'));
        } break;

    case 275:  #line 1002 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('InstanceOf', array(&$yyVals[-2+$yyTop], $yyVals[0+$yyTop]));
        } break;

    case 276:  #line 1005 "parser_generator/XP2.jay"
    { 
          $yyVal= &$yyVals[-1+$yyTop]; 
        } break;

    case 277:  #line 1008 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Ternary', array(&$yyVals[-4+$yyTop], &$yyVals[-2+$yyTop], &$yyVals[0+$yyTop]));
        } break;

    case 278:  #line 1011 "parser_generator/XP2.jay"
    { $yyVal = $yyVals[0+$yyTop]; } break;

    case 279:  #line 1012 "parser_generator/XP2.jay"
    { compiler::call('zend_do_cast', array($yyVal, $yyVals[0+$yyTop], IS_LONG )); } break;

    case 280:  #line 1013 "parser_generator/XP2.jay"
    { compiler::call('zend_do_cast', array($yyVal, $yyVals[0+$yyTop], IS_DOUBLE )); } break;

    case 281:  #line 1014 "parser_generator/XP2.jay"
    { compiler::call('zend_do_cast', array($yyVal, $yyVals[0+$yyTop], IS_STRING )); } break;

    case 282:  #line 1015 "parser_generator/XP2.jay"
    { compiler::call('zend_do_cast', array($yyVal, $yyVals[0+$yyTop], IS_ARRAY )); } break;

    case 283:  #line 1016 "parser_generator/XP2.jay"
    { compiler::call('zend_do_cast', array($yyVal, $yyVals[0+$yyTop], IS_OBJECT )); } break;

    case 284:  #line 1017 "parser_generator/XP2.jay"
    { compiler::call('zend_do_cast', array($yyVal, $yyVals[0+$yyTop], IS_BOOL )); } break;

    case 285:  #line 1018 "parser_generator/XP2.jay"
    { compiler::call('zend_do_cast', array($yyVal, $yyVals[0+$yyTop], IS_NULL )); } break;

    case 286:  #line 1019 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Exit', $yyVals[0+$yyTop]);
        } break;

    case 287:  #line 1022 "parser_generator/XP2.jay"
    { compiler::call('zend_do_begin_silence', array($yyVals[0+$yyTop])); } break;

    case 288:  #line 1022 "parser_generator/XP2.jay"
    { compiler::call('zend_do_end_silence', array($yyVals[-2+$yyTop] )); $yyVal = $yyVals[0+$yyTop]; } break;

    case 289:  #line 1023 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 290:  #line 1024 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 291:  #line 1025 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Execute', $yyVals[-1+$yyTop]);
        } break;

    case 292:  #line 1028 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('Echo', array(&$yyVals[0+$yyTop])); 
        } break;

    case 293:  #line 1034 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('FunctionCall', array($yyVals[-3+$yyTop], $yyVals[-1+$yyTop])); 
        } break;

    case 294:  #line 1037 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('MethodCall', array($yyVals[-5+$yyTop], $yyVals[-3+$yyTop], $yyVals[-1+$yyTop])); 
        } break;

    case 295:  #line 1040 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('MethodCall', array($yyVals[-5+$yyTop], $yyVals[-3+$yyTop], $yyVals[-1+$yyTop])); 
        } break;

    case 296:  #line 1043 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('FunctionCall', array($yyVals[-3+$yyTop], $yyVals[-1+$yyTop])); 
        } break;

    case 297:  #line 1049 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 298:  #line 1050 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 299:  #line 1054 "parser_generator/XP2.jay"
    { $yyVal= &PNode::create('ClassReference', array($yyVals[0+$yyTop], NULL)); } break;

    case 300:  #line 1056 "parser_generator/XP2.jay"
    { $yyVal= &PNode::create('ClassReference', array($yyVals[0+$yyTop], NULL)); } break;

    case 301:  #line 1058 "parser_generator/XP2.jay"
    { $yyVal= &PNode::create('ClassReference', array($yyVals[0+$yyTop], NULL)); } break;

    case 302:  #line 1062 "parser_generator/XP2.jay"
    {
          $yyVal= &PNode::create('ObjectReference', array(&$yyVals[-3+$yyTop], &$yyVals[-1+$yyTop], &$yyVals[0+$yyTop]));
        } break;

    case 303:  #line 1065 "parser_generator/XP2.jay"
    { 
          $yyVal = $yyVals[0+$yyTop]; 
        } break;

    case 306:  #line 1078 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('PropertyReference', array(&$yyVals[0+$yyTop]));
        } break;

    case 307:  #line 1084 "parser_generator/XP2.jay"
    { 
          $yyVal= NULL; 
        } break;

    case 308:  #line 1087 "parser_generator/XP2.jay"
    { 
          $yyVal= NULL; 
        } break;

    case 309:  #line 1090 "parser_generator/XP2.jay"
    { 
          $yyVal= $yyVals[-1+$yyTop]; 
        } break;

    case 310:  #line 1097 "parser_generator/XP2.jay"
    { 
          $yyVal= $yyVals[-1+$yyTop]; 
        } break;

    case 311:  #line 1100 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('NewClass', array($yyVals[-4+$yyTop], &$yyVals[-1+$yyTop]));
        } break;

    case 312:  #line 1107 "parser_generator/XP2.jay"
    { $yyVal= (int)$yyVals[0+$yyTop]; } break;

    case 313:  #line 1108 "parser_generator/XP2.jay"
    { $yyVal= (float)$yyVals[0+$yyTop]; } break;

    case 314:  #line 1109 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 315:  #line 1110 "parser_generator/XP2.jay"
    { $yyVal= (int)$yyVals[0+$yyTop]; } break;

    case 316:  #line 1111 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 317:  #line 1112 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 318:  #line 1113 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 319:  #line 1114 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 320:  #line 1118 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 321:  #line 1119 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 322:  #line 1120 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 323:  #line 1121 "parser_generator/XP2.jay"
    { $yyVal= -1 * $yyVals[0+$yyTop]; } break;

    case 324:  #line 1122 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 325:  #line 1123 "parser_generator/XP2.jay"
    { $yyVal = $yyVals[0+$yyTop]; } break;

    case 326:  #line 1127 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 327:  #line 1128 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 328:  #line 1129 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 329:  #line 1130 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 330:  #line 1131 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 331:  #line 1132 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 332:  #line 1133 "parser_generator/XP2.jay"
    { $yyVal = $yyVals[-1+$yyTop]; compiler::call('zend_do_end_heredoc'); } break;

    case 333:  #line 1137 "parser_generator/XP2.jay"
    {
          $yyVal= array(); 
        } break;

    case 334:  #line 1140 "parser_generator/XP2.jay"
    { 
          $yyVal= $yyVals[-1+$yyTop]; 
        } break;

    case 337:  #line 1151 "parser_generator/XP2.jay"
    { 
          $yyVal[$yyVals[-2+$yyTop]]= $yyVals[0+$yyTop];
        } break;

    case 338:  #line 1154 "parser_generator/XP2.jay"
    {
          $yyVal[]= $yyVals[0+$yyTop];
        } break;

    case 339:  #line 1157 "parser_generator/XP2.jay"
    {
          $yyVal= array($yyVals[-2+$yyTop] => $yyVals[0+$yyTop]);
        } break;

    case 340:  #line 1160 "parser_generator/XP2.jay"
    { 
          $yyVal= array($yyVals[0+$yyTop]);
        } break;

    case 341:  #line 1166 "parser_generator/XP2.jay"
    { 
          $yyVal= $yyVals[0+$yyTop]; 
        } break;

    case 342:  #line 1169 "parser_generator/XP2.jay"
    { 
          $yyVal= $yyVals[0+$yyTop]; 
        } break;

    case 343:  #line 1175 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 344:  #line 1179 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 345:  #line 1183 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 346:  #line 1187 "parser_generator/XP2.jay"
    {
          if (NULL !== $yyVals[-1+$yyTop]) {
            /* $this->setDate()*/
            $yyVal= &PNode::create('MethodCall', array($yyVals[-4+$yyTop], $yyVals[-2+$yyTop], $yyVals[-1+$yyTop], $yyVals[0+$yyTop]));
          } else {
            /* $this->date*/
            $yyVal= &PNode::create('ObjectReference', array($yyVals[-4+$yyTop], $yyVals[-2+$yyTop], NULL, $yyVals[0+$yyTop]));
          }
	    } break;

    case 347:  #line 1196 "parser_generator/XP2.jay"
    { 
          $yyVal= $yyVals[0+$yyTop]; 
        } break;

    case 348:  #line 1202 "parser_generator/XP2.jay"
    { 
          $yyVal[]= $yyVals[0+$yyTop]; 
        } break;

    case 349:  #line 1205 "parser_generator/XP2.jay"
    { 
          $yyVal= NULL; 
        } break;

    case 350:  #line 1212 "parser_generator/XP2.jay"
    {
            if (NULL !== $yyVals[0+$yyTop]) {
              /* $this->setOrder()->setDate() or $this->order->setDate()*/
              $yyVal= &PNode::create('MethodCall', array(NULL, $yyVals[-1+$yyTop], $yyVals[0+$yyTop]));
            } else {
              /* $this->setOrder()->date or $this->order->date*/
              $yyVal= &PNode::create('ObjectReference', array(NULL, $yyVals[-1+$yyTop], NULL));
            }
        } break;

    case 351:  #line 1224 "parser_generator/XP2.jay"
    {
          $yyVal= $yyVals[-1+$yyTop]; 
        } break;

    case 352:  #line 1227 "parser_generator/XP2.jay"
    { 
          $yyVal= NULL; 
        } break;

    case 353:  #line 1233 "parser_generator/XP2.jay"
    { 
          $yyVal = $yyVals[0+$yyTop]; 
        } break;

    case 354:  #line 1236 "parser_generator/XP2.jay"
    { 
          xp::error('TODO variable_without_objects: simple_indirect_reference reference_variable');
        } break;

    case 355:  #line 1242 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('StaticMember', array($yyVals[-2+$yyTop], &$yyVals[0+$yyTop])); 
        } break;

    case 356:  #line 1248 "parser_generator/XP2.jay"
    { 
          $yyVal= $yyVals[0+$yyTop]; 
        } break;

    case 357:  #line 1251 "parser_generator/XP2.jay"
    { 
          $yyVal= $yyVals[0+$yyTop]; 
        } break;

    case 358:  #line 1257 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; /* $$->u_EA_type = ZEND_PARSED_VARIABLE; */ } break;

    case 359:  #line 1258 "parser_generator/XP2.jay"
    { compiler::call('zend_do_indirect_references', array($yyVal, $yyVals[-1+$yyTop], $yyVals[0+$yyTop] )); $yyVal->u_EA_type = ZEND_PARSED_VARIABLE; } break;

    case 360:  #line 1259 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop];} break;

    case 361:  #line 1263 "parser_generator/XP2.jay"
    { 
          $yyVal->args[]= array('arrayoffset' => $yyVals[-1+$yyTop]);
        } break;

    case 362:  #line 1266 "parser_generator/XP2.jay"
    {
          $yyVal->args[]= array('stringoffset' => $yyVals[-1+$yyTop]);
        } break;

    case 363:  #line 1269 "parser_generator/XP2.jay"
    { 
          $yyVal= $yyVals[0+$yyTop]; 
        } break;

    case 364:  #line 1276 "parser_generator/XP2.jay"
    { $yyVal= &PNode::create('Variable', array(&$yyVals[0+$yyTop])); } break;

    case 365:  #line 1277 "parser_generator/XP2.jay"
    { $yyVal= &PNode::create('DynamicVariable', array(&$yyVals[-1+$yyTop])); } break;

    case 366:  #line 1281 "parser_generator/XP2.jay"
    { $yyVal= NULL; } break;

    case 367:  #line 1282 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 368:  #line 1287 "parser_generator/XP2.jay"
    { $yyVal = $yyVals[0+$yyTop]; } break;

    case 369:  #line 1288 "parser_generator/XP2.jay"
    { compiler::call('zend_do_end_variable_parse', array(BP_VAR_R, 0 )); } break;

    case 370:  #line 1288 "parser_generator/XP2.jay"
    {  compiler::call('zend_do_pop_object', array($tmp_znode ));  compiler::call('zend_do_fetch_property', array($yyVal, $tmp_znode, $yyVals[-1+$yyTop] ));} break;

    case 371:  #line 1292 "parser_generator/XP2.jay"
    { compiler::call('fetch_array_dim', array($yyVal, $yyVals[-3+$yyTop], $yyVals[-1+$yyTop] )); } break;

    case 372:  #line 1293 "parser_generator/XP2.jay"
    { compiler::call('fetch_string_offset', array($yyVal, $yyVals[-3+$yyTop], $yyVals[-1+$yyTop] )); } break;

    case 373:  #line 1294 "parser_generator/XP2.jay"
    {  compiler::call('zend_do_pop_object', array($tmp_znode ));  compiler::call('zend_do_fetch_property', array($yyVal, $tmp_znode, $yyVals[0+$yyTop] ));} break;

    case 374:  #line 1298 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 375:  #line 1299 "parser_generator/XP2.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 376:  #line 1303 "parser_generator/XP2.jay"
    { $yyVal->u_constant_value_lval = 1; } break;

    case 377:  #line 1304 "parser_generator/XP2.jay"
    { $yyVal->u_constant_value_lval++; } break;

    case 380:  #line 1313 "parser_generator/XP2.jay"
    { compiler::call('zend_do_add_list_element', array($yyVals[0+$yyTop] )); } break;

    case 381:  #line 1314 "parser_generator/XP2.jay"
    { compiler::call('zend_do_new_list_begin'); } break;

    case 382:  #line 1314 "parser_generator/XP2.jay"
    { compiler::call('zend_do_new_list_end'); } break;

    case 383:  #line 1315 "parser_generator/XP2.jay"
    { compiler::call('zend_do_add_list_element', array(NULL )); } break;

    case 384:  #line 1320 "parser_generator/XP2.jay"
    { compiler::call('zend_do_init_array', array($yyVal, NULL, NULL, 0 )); } break;

    case 385:  #line 1321 "parser_generator/XP2.jay"
    { $yyVal = $yyVals[-1+$yyTop]; } break;

    case 386:  #line 1325 "parser_generator/XP2.jay"
    { compiler::call('zend_do_add_array_element', array($yyVal, $yyVals[0+$yyTop], $yyVals[-2+$yyTop], 0 )); } break;

    case 387:  #line 1326 "parser_generator/XP2.jay"
    { compiler::call('zend_do_add_array_element', array($yyVal, $yyVals[0+$yyTop], NULL, 0 )); } break;

    case 388:  #line 1327 "parser_generator/XP2.jay"
    { compiler::call('zend_do_init_array', array($yyVal, $yyVals[0+$yyTop], $yyVals[-2+$yyTop], 0 )); } break;

    case 389:  #line 1328 "parser_generator/XP2.jay"
    { compiler::call('zend_do_init_array', array($yyVal, $yyVals[0+$yyTop], NULL, 0 )); } break;

    case 390:  #line 1329 "parser_generator/XP2.jay"
    { compiler::call('zend_do_add_array_element', array($yyVal, $yyVals[0+$yyTop], $yyVals[-3+$yyTop], 1 )); } break;

    case 391:  #line 1330 "parser_generator/XP2.jay"
    { compiler::call('zend_do_add_array_element', array($yyVal, $yyVals[0+$yyTop], NULL, 1 )); } break;

    case 392:  #line 1331 "parser_generator/XP2.jay"
    { compiler::call('zend_do_init_array', array($yyVal, $yyVals[0+$yyTop], $yyVals[-3+$yyTop], 1 )); } break;

    case 393:  #line 1332 "parser_generator/XP2.jay"
    { compiler::call('zend_do_init_array', array($yyVal, $yyVals[0+$yyTop], NULL, 1 )); } break;

    case 394:  #line 1336 "parser_generator/XP2.jay"
    { compiler::call('zend_do_end_variable_parse', array(BP_VAR_R, 0 ));  compiler::call('zend_do_add_variable', array($yyVal, $yyVals[-1+$yyTop], $yyVals[0+$yyTop] )); } break;

    case 395:  #line 1337 "parser_generator/XP2.jay"
    { compiler::call('zend_do_add_string', array($yyVal, $yyVals[-1+$yyTop], $yyVals[0+$yyTop] )); } break;

    case 396:  #line 1338 "parser_generator/XP2.jay"
    { compiler::call('zend_do_add_string', array($yyVal, $yyVals[-1+$yyTop], $yyVals[0+$yyTop] )); } break;

    case 397:  #line 1339 "parser_generator/XP2.jay"
    { compiler::call('zend_do_add_string', array($yyVal, $yyVals[-1+$yyTop], $yyVals[0+$yyTop] )); } break;

    case 398:  #line 1340 "parser_generator/XP2.jay"
    { compiler::call('zend_do_add_char', array($yyVal, $yyVals[-1+$yyTop], $yyVals[0+$yyTop] )); } break;

    case 399:  #line 1341 "parser_generator/XP2.jay"
    { compiler::call('zend_do_add_string', array($yyVal, $yyVals[-1+$yyTop], $yyVals[0+$yyTop] )); } break;

    case 400:  #line 1342 "parser_generator/XP2.jay"
    { $yyVals[0+$yyTop]->u_constant_value_lval = '['; compiler::call('zend_do_add_char', array($yyVal, $yyVals[-1+$yyTop], $yyVals[0+$yyTop] )); } break;

    case 401:  #line 1343 "parser_generator/XP2.jay"
    { $yyVals[0+$yyTop]->u_constant_value_lval = ']'; compiler::call('zend_do_add_char', array($yyVal, $yyVals[-1+$yyTop], $yyVals[0+$yyTop] )); } break;

    case 402:  #line 1344 "parser_generator/XP2.jay"
    { $yyVals[0+$yyTop]->u_constant_value_lval = '{'; compiler::call('zend_do_add_char', array($yyVal, $yyVals[-1+$yyTop], $yyVals[0+$yyTop] )); } break;

    case 403:  #line 1345 "parser_generator/XP2.jay"
    { $yyVals[0+$yyTop]->u_constant_value_lval = '}'; compiler::call('zend_do_add_char', array($yyVal, $yyVals[-1+$yyTop], $yyVals[0+$yyTop] )); } break;

    case 404:  #line 1346 "parser_generator/XP2.jay"
    {  $yyVals[0+$yyTop]->u_constant_value_lval = '-';  compiler::call('zend_do_add_char', array($tmp, $yyVals[-1+$yyTop], $yyVals[0+$yyTop] ));  $yyVals[0+$yyTop]->u_constant_value_lval = '>'; compiler::call('zend_do_add_char', array($yyVal, $tmp, $yyVals[0+$yyTop] )); } break;

    case 405:  #line 1347 "parser_generator/XP2.jay"
    { 
          $yyVal= ''; 
        } break;

    case 406:  #line 1354 "parser_generator/XP2.jay"
    { compiler::call('zend_do_begin_variable_parse'); compiler::call('fetch_simple_variable', array($yyVal, $yyVals[0+$yyTop], 1 )); } break;

    case 407:  #line 1355 "parser_generator/XP2.jay"
    { compiler::call('zend_do_begin_variable_parse'); } break;

    case 408:  #line 1355 "parser_generator/XP2.jay"
    { compiler::call('fetch_array_begin', array($yyVal, $yyVals[-4+$yyTop], $yyVals[-1+$yyTop] )); } break;

    case 409:  #line 1356 "parser_generator/XP2.jay"
    { compiler::call('zend_do_begin_variable_parse'); compiler::call('fetch_simple_variable', array($yyVals[-1+$yyTop], $yyVals[-2+$yyTop], 1 )); compiler::call('zend_do_fetch_property', array($yyVal, $yyVals[-1+$yyTop], $yyVals[0+$yyTop] )); } break;

    case 410:  #line 1357 "parser_generator/XP2.jay"
    { compiler::call('zend_do_begin_variable_parse');  compiler::call('fetch_simple_variable', array($yyVal, $yyVals[-1+$yyTop], 1 )); } break;

    case 411:  #line 1358 "parser_generator/XP2.jay"
    { compiler::call('zend_do_begin_variable_parse');  compiler::call('fetch_array_begin', array($yyVal, $yyVals[-4+$yyTop], $yyVals[-2+$yyTop] )); } break;

    case 412:  #line 1359 "parser_generator/XP2.jay"
    { $yyVal = $yyVals[-1+$yyTop]; } break;

    case 413:  #line 1363 "parser_generator/XP2.jay"
    { $yyVal = $yyVals[0+$yyTop]; } break;

    case 414:  #line 1364 "parser_generator/XP2.jay"
    { $yyVal = $yyVals[0+$yyTop]; } break;

    case 415:  #line 1365 "parser_generator/XP2.jay"
    { compiler::call('fetch_simple_variable', array($yyVal, $yyVals[0+$yyTop], 1 )); } break;

    case 416:  #line 1369 "parser_generator/XP2.jay"
    { $yyVal = $yyVals[-1+$yyTop]; } break;

    case 417:  #line 1370 "parser_generator/XP2.jay"
    { compiler::call('zend_do_isset_or_isempty', array(ZEND_ISEMPTY, $yyVal, $yyVals[-1+$yyTop] )); } break;

    case 418:  #line 1371 "parser_generator/XP2.jay"
    { compiler::call('zend_do_include_or_eval', array(ZEND_INCLUDE, $yyVal, $yyVals[0+$yyTop] )); } break;

    case 419:  #line 1372 "parser_generator/XP2.jay"
    { compiler::call('zend_do_include_or_eval', array(ZEND_INCLUDE_ONCE, $yyVal, $yyVals[0+$yyTop] )); } break;

    case 420:  #line 1373 "parser_generator/XP2.jay"
    { compiler::call('zend_do_include_or_eval', array(ZEND_EVAL, $yyVal, $yyVals[-1+$yyTop] )); } break;

    case 421:  #line 1374 "parser_generator/XP2.jay"
    { compiler::call('zend_do_include_or_eval', array(ZEND_REQUIRE, $yyVal, $yyVals[0+$yyTop] )); } break;

    case 422:  #line 1375 "parser_generator/XP2.jay"
    { compiler::call('zend_do_include_or_eval', array(ZEND_REQUIRE_ONCE, $yyVal, $yyVals[0+$yyTop] )); } break;

    case 423:  #line 1379 "parser_generator/XP2.jay"
    { compiler::call('zend_do_isset_or_isempty', array(ZEND_ISSET, $yyVal, $yyVals[0+$yyTop] )); } break;

    case 424:  #line 1380 "parser_generator/XP2.jay"
    { compiler::call('zend_do_boolean_and_begin', array($yyVals[-1+$yyTop], $yyVals[0+$yyTop] )); } break;

    case 425:  #line 1380 "parser_generator/XP2.jay"
    { compiler::call('zend_do_isset_or_isempty', array(ZEND_ISSET, $tmp, $yyVals[0+$yyTop] )); compiler::call('zend_do_boolean_and_end', array($yyVal, $yyVals[-3+$yyTop], $tmp, $yyVals[-2+$yyTop] )); } break;

    case 426:  #line 1384 "parser_generator/XP2.jay"
    { 
          $yyVal= &PNode::create('ConstantReference', array($yyVals[-2+$yyTop], $yyVals[0+$yyTop])); 
        } break;
#line 5160 "-"
  }
                   
                    //if ($this->debug) echo "\tDONE switch\n";if ($this->debug) echo "\t--------------\n";
                    $yyTop -= $this->yyLen[$yyN];
                    //if ($this->debug) echo "\tyyTop is $yyTop\n";
                    $yyState = $yyStates[$yyTop];
                    //if ($this->debug) echo "\tyyState is {$yyState}\n";
                    $yyM = $this->yyLhs[$yyN];
                    //if ($this->debug) echo "\tyyM is now $yyM\n";



                    if ($yyState == 0 && $yyM == 0) {
                        $yyState = $yyFinal;
                        if ($yyToken < 0) {
                            $yyToken =0;
                            if ($yyLex->advance()) {
                                $yyToken = $yyLex->token;
                            }
                        }
                        if ($this->debug) echo "\tTOKEN IS NOW $yyToken\n";
                        if ($yyToken == 0) {
                            return $yyVal;
                        }
                        //if ($this->debug) echo "\t>>>>> yyLoop(A)?\n";
                        continue 2; //continue yyLoop;
                    }
                    if (($yyN = $this->yyGindex[$yyM]) != 0 && ($yyN += $yyState) >= 0
                            && $yyN < $this->yyTableCount && $this->yyCheck[$yyN] == $yyState) {
                        //if ($this->debug) echo "\tyyState: using yyTable\n";
                        $yyState = $this->yyTable[$yyN];
                    } else {
                        //if ($this->debug) echo "\tyyState: using yyDgoto\n";
                        $yyState = $this->yyDgoto[$yyM];
                    }  
                    //if ($this->debug) echo "\t>>>>> yyLoop(B)?\n";
                    continue 2;//continue yyLoop;
                }
            }
        }
    }


#line 1390 "parser_generator/XP2.jay"
}
#line 5206 "-"


 ?>
