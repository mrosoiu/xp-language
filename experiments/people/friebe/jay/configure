#!/bin/sh

##
# Configure
#
# $Id$

checkPhpBinary() {
  EXE=$1  
  VERSION=$2

  echo "---> Checking $EXE"
  if [ ! -e $EXE ] ; then
    echo "*** Does not exist"
    return 1;
  fi

  if [ ! -x $EXE ] ; then
    echo "*** Not executable"
    return 1;
  fi
  
  $EXE -r 'exit(intval(PHP_SAPI != "cli" || !version_compare(phpversion(), "'$VERSION'", "ge")));'
  
  if [ 0 != $? ] ; then
    echo "*** Prerequisites not met (CLI sapi, >= $VERSION)"
    return 1;
  fi
  
  $EXE -v
  return 0;
}

# {{{ main
PHPFOUR=""
PHPFIVE=""
SKELETON_TAR="http://xp-framework.net/downloads/xp-skeleton.tar.gz"

while getopts '4:5:s:h?' COMMAND_LINE_ARGUMENT ; do
  case "$COMMAND_LINE_ARGUMENT" in
    4) PHPFOUR=$OPTARG ;;
    5) PHPFIVE=$OPTARG ;;
    s) SKELETON_TAR=$OPTARG ;;
    *)
      echo "== Configures JAY experiment =="
      echo "* Usage: ./configure [-4 php4] [-5 php5] [-s skeleton-tar] [-h|-?]"
      echo ""    
      echo "* Example: ./configure"
      echo "  Will guess php4 and php5 cli binaries by using 'which'"
      echo ""    
      echo "* Example: ./configure -4 /usr/local/bin/php4 -5 /usr/local/bin/php5"
      echo "  Will set /usr/local/bin/php4 as PHP4 binary, /usr/local/bin/php5 for PHP5"
      echo ""    
      exit
  esac
done
shift `expr $OPTIND - 1`

if [ "" = "$PHPFOUR" ] ; then 
  echo "===> Guessing php4 binary"
  PHPFOUR=`which php4 || which php`
fi
if [ "" = "$PHPFIVE" ] ; then 
  echo "===> Guessing php5 binary"
  PHPFIVE=`which php5`
fi

# Sanity check
echo "===> Performing checks"
WGET=`which wget`
if [ -z $WGET ] ; then
  exit 1
fi
$WGET -N 2>&1 | grep 'unknown option'
if [ 0 = $? ] ; then
  echo "*** $WGET does not support the -N flag!"
  exit 1
fi
echo "---> Using `$WGET --version | head -1`"

checkPhpBinary $PHPFOUR 4.3.1 || exit
checkPhpBinary $PHPFIVE 5.1.4 || exit

# Create config
echo "===> Creating environment"
echo "# Environment generated @ `date` by $0" > .environment
echo "php4=$PHPFOUR" >> .environment
echo "php5=$PHPFIVE" >> .environment

# Check for tempdir
echo "===> Checking for temp dir"
if [ "$OS" = "Windows_NT" ] ; then
  REALPATH="cygpath -w"
  LIST="$TEMP /tmp /cygdrive/c/Temp `cygpath -W`/Temp"
else
  REALPATH="realpath"
  LIST="$TEMP $HOME/tmp /tmp"
fi

TEMPDIR=""
for t in $LIST ; do 
  echo "---> Checking $t"
  if [ -d $t ] ; then
    TEMPDIR="'"`$REALPATH $t`"'"
    RUN_TEMP="$TEMPDIR/t.php5"
    echo "---> Using tempdir=$TEMPDIR"
    break
  fi
done
if [ "" = "$TEMPDIR" ] ; then
  echo "---> Could not find any tempdir, using tempdir=."
  RUN_TEMP="./t.php5"
fi

# Download skeleton
echo "===> Checking for skeleton"
SKELETON_TAR_LOCAL=`basename $SKELETON_TAR`
echo "---> Downloading from $SKELETON_TAR"

SKELETON_TAR_CMP=""
if [ -e $SKELETON_TAR_LOCAL ] ; then
  SKELETON_TAR_CMP=`ls -l $SKELETON_TAR_LOCAL`
fi
$WGET -N $SKELETON_TAR

if [ "$SKELETON_TAR_CMP" != "`ls -l $SKELETON_TAR_LOCAL`" ] ; then
  echo "---> Extracting from $SKELETON_TAR_LOCAL"
  tar xfz $SKELETON_TAR_LOCAL
else
  echo "---> $SKELETON_TAR_LOCAL unchanged, not extracting"
fi

# Create runner
echo "===> Creating runner"
echo "#!/bin/sh" > xp
echo "export COMPILE_CMD='`$REALPATH $PHPFOUR` tophp5.php %s'" >> xp
echo "$PHPFOUR tophp5.php \$1 -o $RUN_TEMP -q && shift 1 && $PHPFIVE -d auto_prepend_file=php5-emit/__xp__.php $RUN_TEMP \$*" >> xp
echo "rm $RUN_TEMP" >> xp
chmod 700 xp

# Finalize
echo "===> Done"
# }}}
