package test {
  class Exception extends xp~lang~Exception {
    protected $msg;

    public __construct($msg) {
      $this->msg= $msg;
    }

    public string toString() {
      return 'Exception '.$this->msg;
    }
  }

  class IllegalException extends xp~lang~Exception {
    protected $msg;

    public __construct($msg) {
      $this->msg= $msg;
    }

    public string toString() {
      return 'Exception '.$this->msg;
    }
  }
}

try {

  try {
    echo "Before exception.\n";
    throw new test~Exception("Foo");
    echo "May not be reached.\n";
  } catch (test~Exception $e) {
    echo "Caught first Exception.\n";
    throw(new test~IllegalException("Thrown in catch.\n"));
    echo $e->toString(), "\n";
  } catch (test~IllegalException $e) {
    echo "May not be called.\n";
    echo $e->toString(), "\n";
  } finally {
    echo "Finally executed in inner try/catch.\n";
  }
  
} catch(test~IllegalException $e) {
  echo "Ok, caught exception generated in catch.\n";
  echo $e->toString();
} finally {
  echo "Finally executed in outer try/catch\n";
}

echo "\n\n";

try {
  echo "Throwing new exception.\n";
  throw new test~Exception("Exception.");
} catch(test~IllegalException $e) {
  echo "Caught wrong exception!\n";
} catch(test~Exception $e) {
  echo "Caught correct exception.\n";
} finally {
  echo "Finally executed.\n";
}
