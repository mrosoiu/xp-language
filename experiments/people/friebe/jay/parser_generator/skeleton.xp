# XP Parser skeleton
.<?php
./* This file is part of the XP framework
. *
. * $Id$
. */
.  uses('text.parser.generic.AbstractParser');
.
 prolog
 tokens var
.
.  /**
.   * Generated parser class
.   *
.   * @purpose  Parser implementation
.   */
.  class {%NAME%}Parser extends AbstractParser {
 tables
 debug
.
.    protected static $yyTableCount= 0, $yyNameCount= 0;
.
.    static function __static() {
.      self::$yyTableCount= sizeof(self::$yyTable);
.      self::$yyNameCount= sizeof(self::$yyName);
.    }
.
.    /**
.     * Retrieves name of a given token
.     *
.     * @param   int token
.     * @return  string name
.     */
.    protected function yyname($token) {
.      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
.    }
.
.    /**
.     * Helper method for yyexpecting
.     *
.     * @param   int n
.     * @return  string[] list of token names.
.     */
.    protected function yysearchtab($n) {
.      if (0 == $n) return array();
.
.      for (
.        $result= array(), $token= $n < 0 ? -$n : 0; 
.        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
.        $token++
.      ) {
.        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
.          $result[$token]= self::$yyName[$token];
.        }
.      }
.      return array_filter(array_values($result));
.    }
.
.    /**
.     * Computes list of expected tokens on error by tracing the tables.
.     *
.     * @param   int state for which to compute the list.
.     * @return  string[] list of token names.
.     */
.    protected function yyexpecting($state) {
.      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
.    }
.
.    /**
.     * Parser main method. Maintains a state and a value stack, 
.     * currently with fixed maximum size.
.     *
.     * @param   text.parser.generic.AbstractLexer lexer
..    * @return  mixed result of the last reduction, if any.
.     */
.    public function yyparse($yyLex) {
.      $yyVal= NULL;
.      $yyStates= $yyVals= array();
.      $yyToken= -1;
.      $yyState= $yyErrorFlag= 0;
 local
.
.      while (1) {
.        for ($yyTop= 0; ; $yyTop++) {
.          $yyStates[$yyTop]= $yyState;
.          $yyVals[$yyTop]= $yyVal;
.
.          for (;;) {
.            if (($yyN= self::$yyDefRed[$yyState]) == 0) {
.
.              // Check whether it's necessary to fetch the next token
.              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;
.
.              if (
.                ($yyN= self::$yySindex[$yyState]) != 0 && 
.                ($yyN+= $yyToken) >= 0 && 
.                $yyN < self::$yyTableCount && 
.                self::$yyCheck[$yyN] == $yyToken
.              ) {
.                $yyState= self::$yyTable[$yyN];       // shift to yyN
.                $yyVal= $yyLex->value;
.                $yyToken= -1;
.                $yyErrorFlag > 0 && $yyErrorFlag--;
.                continue 2;
.              }
.        
.              if (
.                ($yyN= self::$yyRindex[$yyState]) != 0 && 
.                ($yyN+= $yyToken) >= 0 && 
.                $yyN < self::$yyTableCount && 
.                self::$yyCheck[$yyN] == $yyToken
.              ) {
.                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
.              } else {
.                switch ($yyErrorFlag) {
.                  case 0: return $this->error(
.                    E_PARSE, 
.                    sprintf(
.                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
.                      $yyLex->fileName,
.                      $yyLex->position[0],
.                      $yyLex->position[1],
.                      $this->yyName($yyToken)
.                    ), 
.                    $this->yyExpecting($yyState)
.                  );
.                  
.                  case 1: case 2: {
.                    $yyErrorFlag= 3;
.                    do { 
.                      if (
.                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
.                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
.                        $yyN < self::$yyTableCount && 
.                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
.                      ) {
.                        $yyState= self::$yyTable[$yyN];
.                        $yyVal= $yyLex->value;
.                        break 3;
.                      }
.                    } while ($yyTop-- >= 0);
.
.                    throw new ParseError(E_ERROR, sprintf(
.                      'Irrecoverable syntax error at %s, line %d (offset %d)',
.                      $yyLex->fileName,
.                      $yyLex->position[0],
.                      $yyLex->position[1]
.                    ));
.                  }
.
.                  case 3: {
.                    if (0 == $yyToken) {
.                      throw new ParseError(E_ERROR, sprintf(
.                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
.                        $yyLex->fileName,
.                        $yyLex->position[0],
.                        $yyLex->position[1]
.                      ));
.                    }
.
.                    $yyToken = -1;
.                    break 1;
.                  }
.                }
.              }
.            }
.
.            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
.            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];
.
.            // Actions
.            switch ($yyN) {
 actions
.            }
.                   
.            $yyTop-= self::$yyLen[$yyN];
.            $yyState= $yyStates[$yyTop];
.            $yyM= self::$yyLhs[$yyN];
.
.            if (0 == $yyState && 0 == $yyM) {
.              $yyState= self::$yyFinal;
.
.              // Check whether it's necessary to fetch the next token
.              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;
.
.              // We've reached the final token!
.              if (0 == $yyToken) return $yyVal;
.              continue 2;
.            }
.
.            $yyState= (
.              ($yyN= self::$yyGindex[$yyM]) != 0 && 
.              ($yyN+= $yyState) >= 0 && 
.              $yyN < self::$yyTableCount && 
.              self::$yyCheck[$yyN] == $yyState
.            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
.            continue 2;
.          }
.        }
.      }
.    }
.
.  }
 epilog
.?>
