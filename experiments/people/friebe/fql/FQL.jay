%{
  uses(
    'FilterFactory',
    'io.collections.FileCollection',
    'io.collections.iterate.FilteredIOCollectionIterator',
    'io.collections.iterate.NameEqualsFilter',
    'io.collections.iterate.AllOfFilter',
    'io.collections.iterate.AnyOfFilter',
    'io.collections.iterate.SizeBiggerThanFilter',
    'io.collections.iterate.NameMatchesFilter'
  );
%}

%token T_SELECT 259
%token T_FROM 260
%token T_WHERE 261
%token T_STRING 262
%token T_AND 263
%token T_OR 264
%token T_WORD 266
%token T_LIKE 267
%token T_NUMBER 268
%token T_ILIKE 269
%token T_MATCHES 270
%token T_REGEX 271

%% /* Rules */

start:
		T_SELECT T_FROM collection where { 
          if ($4) {
            $$= &new FilteredIOCollectionIterator($3, $4);
          } else {
            $$= &new IOCollectionIterator($3);
          }
        }
;

collection:
        T_WORD '(' T_STRING ')' {
            $$= &new FileCollection($3);
        }
;

where:
		/* empty */ {
          $$= NULL;
        }
   |    T_WHERE restrictions {
          $$= $2;
        }
;

restrictions:
        restriction {
          $$= $1;
        }
    |   restriction T_AND restrictions {
          $$= &new AllOfFilter(array($1, $3));
        }
    |   restriction T_OR restrictions {
          $$= &new AnyOfFilter(array($1, $3));
        }
;

restriction:
        T_WORD operator criteria {
          try(); {
            $$= &FilterFactory::filterFor($1, $2, $3);
          } if (catch('Exception', $e)) {
            $this->error(E_COMPILE_ERROR, 'In expression "'.$1.' '.$2.'": '.$e->getMessage());
            $$= NULL;
          }
        }
   |    T_WORD matches {
          try(); {
            $$= &FilterFactory::filterFor($1, '~', $2);
          } if (catch('Exception', $e)) {
            $this->error(E_COMPILE_ERROR, 'In expression "'.$1.' '.$2.'": '.$e->getMessage());
            $$= NULL;
          }
        }
;

matches:
        T_LIKE T_STRING { 
          $$= '/^'.str_replace('%', '.*', preg_quote($2)).'$/'; 
        }
    |   T_ILIKE T_STRING { 
          $$= '/^'.str_replace('%', '.*', preg_quote($2)).'$/i'; 
        }
    |   T_MATCHES T_REGEX optional_modifiers { 
          $$= '/'.$2.'/'.$3;
        }
;

optional_modifiers:
		/* empty */ {
          $$= '';
        }
	|	T_WORD
;

operator:
        '='
    |   '>'
    |   '<'
;

criteria:
        T_STRING
    |   T_NUMBER

%%
