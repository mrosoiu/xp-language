%{
?><?php
  uses(
    'CompileError',
    'FilterFactory',
    'io.collections.FileCollection',
    'io.collections.iterate.FilteredIOCollectionIterator',
    'io.collections.iterate.NameEqualsFilter',
    'io.collections.iterate.AllOfFilter',
    'io.collections.iterate.AnyOfFilter',
    'io.collections.iterate.SizeBiggerThanFilter',
    'io.collections.iterate.NameMatchesFilter'
  );
/* This file is part of the XP framework's experiments
 *
 * $Id$ 
 */

  class FQLParser extends Object {
    var
      $cat    = NULL,
      $errors = array();

    /**
     * Adds an error
     *
     * @access  public
     * @param   &net.xp_framework.tools.vm.CompileError error
     */
    function addError(&$error) {
      $this->errors[]= &$error;
    }
    
    /**
     * Returns whether errors have occured
     *
     * @access  public
     * @return  bool
     */
    function hasErrors() {
      return !empty($this->errors);
    }

    /**
     * Returns whether errors have occured
     *
     * @access  public
     * @return  net.xp_framework.tools.vm.CompileError[]
     */
    function getErrors() {
      return $this->errors;
    }

    /**
     * Error handler
     *
     * @access  public
     * @param   int level
     * @param   string message
     */
    function error($level, $message) {
      switch ($level) {
        case E_ERROR:
        case E_CORE_ERROR:
        case E_COMPILE_ERROR:
          $this->addError(new CompileError($level, $message));
          // Fall-through intended
      }
      
      $this->cat && $this->cat->error($message);
    }

    /**
     * Set a logger category for debugging
     *
     * @access  public
     * @param   util.log.LogCategory cat
     */
    function setTrace($cat) {
      $this->cat= $cat;
    }
%}
 
%token T_SELECT 259
%token T_FROM 260
%token T_WHERE 261
%token T_STRING 262
%token T_AND 263
%token T_OR 264
%token T_WORD 266
%token T_LIKE 267
%token T_NUMBER 268
%token T_ILIKE 269
%token T_MATCHES 270
%token T_REGEX 271

%% /* Rules */

start:
		T_SELECT T_FROM collection where { 
          if ($4) {
            $$= &new FilteredIOCollectionIterator($3, $4);
          } else {
            $$= &new IOCollectionIterator($3);
          }
        }
;

collection:
        T_WORD '(' T_STRING ')' {
            $$= &new FileCollection($3);
        }
;

where:
		/* empty */ {
          $$= NULL;
        }
   |    T_WHERE restrictions {
          $$= $2;
        }
;

restrictions:
        restriction {
          $$= $1;
        }
    |   restriction T_AND restrictions {
          $$= &new AllOfFilter(array($1, $3));
        }
    |   restriction T_OR restrictions {
          $$= &new AnyOfFilter(array($1, $3));
        }
;

restriction:
        T_WORD operator criteria {
          try(); {
            $$= &FilterFactory::filterFor($1, $2, $3);
          } if (catch('Exception', $e)) {
            $this->error(E_COMPILE_ERROR, 'In expression "'.$1.' '.$2.'": '.$e->getMessage());
            $$= NULL;
          }
        }
   |    T_WORD matches {
          try(); {
            $$= &FilterFactory::filterFor($1, '~', $2);
          } if (catch('Exception', $e)) {
            $this->error(E_COMPILE_ERROR, 'In expression "'.$1.' '.$2.'": '.$e->getMessage());
            $$= NULL;
          }
        }
;

matches:
        T_LIKE T_STRING { 
          $$= '/^'.str_replace('%', '.*', preg_quote($2)).'$/'; 
        }
    |   T_ILIKE T_STRING { 
          $$= '/^'.str_replace('%', '.*', preg_quote($2)).'$/i'; 
        }
    |   T_MATCHES T_REGEX optional_modifiers { 
          $$= '/'.$2.'/'.$3;
        }
;

optional_modifiers:
		/* empty */ {
          $$= '';
        }
	|	T_WORD
;

operator:
        '='
    |   '>'
    |   '<'
;

criteria:
        T_STRING
    |   T_NUMBER

%%
} implements(__FILE__, 'util.log.Traceable');
 
