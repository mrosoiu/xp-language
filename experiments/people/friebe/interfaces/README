Interfaces
========================================================================
$Id$

*** NOTE: This experiment has been integrated into the language core ***

What's this?
------------
A case study to find out whether interfaces¹ can be implemented in PHP4 
userland.

So, can they?
-------------
Sort of, yes.

How does it work?
-----------------
The basic syntax is:

- The interface itself:
<code>
  class Iterator {
    function &next() { }
    function hasNext() { }
  }
</code>

- A class implementing this interface:
<code>
  class ListIterator extends Object {
    function &next() { 
      // ...
    }

    function hasNext() { 
      // ...
    }
  } implements('Iterator');
</code>

- A class implementing two interfaces:
<code>
  class ComponentObserver extends Object {
    function update() {
      // ...
    }
  } implements('Observer', 'Serializable');
</code>


So, how did you do it?
----------------------
It's actually quite easy: As interfaces are about ensuring that a class
that implements them has all methods an interface has, it was all about
using get_class_methods() on both the "interface" and the class and 
seeing whether the class implements all of the interface's methods, 
throwing an error in case they do not. Then, to finish it off, adding
a new function which would replace is_a() - in the above example, 
ListIterator actually "is an" Iterator. For this, "is" was added².

Examples
--------
The script interface.php in this directory provides the ability to get
a feeling for interfaces. What it does (except for providing the core
functionality which would be moved to lang.base.php in case this makes
it there:)) is to instanciate a class by the name of the command line
argument given to it and checks to see whether it is an Iterator.

1) Object is of course *not* an Iterator:
<pre>
  $ php interface.php Object  
  ---> is("Iterator", new Object()) = 0
</pre>

2) ListIterator implements Iterator:
<pre>
  $ php interface.php ListIterator
  ---> is("Iterator", new ListIterator()) = 1
</pre>

3) SortedListIterator extends ListIterator and therefore 
   implements Iterator:
<pre>
  $ php interface.php SortedListIterator
  ---> is("Iterator", new SortedListIterator()) = 1
</pre>

4) BrokenIterator says it implements Iterator but is actually missing 
   the method hasNext():
<pre>
$ php interface.php BrokenIterator    
Exception lang.Error (Interface method Iterator::hasnext() not implemented by class BrokenIterator)
  at lang.Error::__construct((0x4d)'[...]') [line 87 of StackTraceElement.class.php] 
  at <main>::implements((0x8)'Iterator') [line 22 of BrokenIterator.class.php] 
  at <main>::include_once((0x57)'[...]') [line 116 of lang.base.php] 
  at <main>::uses((0xe)'BrokenIterator') [line 75 of ClassLoader.class.php] 
  at lang.ClassLoader::loadclass((0xe)'BrokenIterator') [line 143 of XPClass.class.php] 
  at lang.XPClass::forname((0xe)'BrokenIterator') [line 47 of interface.php] 
</pre>

To be discussed
---------------
* Bug: Interfaces can be instanciated.

  This could be prevented by requiring an interface to subclass a pre-
  defined class named "Interface" whose constructor would die with a
  fatal error.

  The syntax would then change to "class Iterator extends Interface".
  See interface_subclass.patch for an implementation³.

* Do we need a different error instead of lang.Error? Should it be 
  something like "CompileError" or "CoreError"? Is the stack trace
  needed? Would a PHP fatal error be sufficient?

Benefits
--------
* We will be able to define interfaces and therefore ensure that
  any method accepting a, say, Comparable, will have a method
  compareTo().

* When migrated to PHP5, we will already have interfaces; no redesign 
  will be needed (a migration script will take care of the syntax 
  changes needed to be made).
 
The downside
------------
* All code using is_a() will have to be replaced by is()

* lang.base.php will have two more functions

* Interfaces will, if used (and only then), lead to a small increase in
  memory and a slowdown in declaration.
  
* is() is slightly slower than is_a() as is_a() is native.

Appendix: 1] Interfaces?
------------------------
http://java.sun.com/docs/books/tutorial/java/interpack/interfaces.html

"An interface defines a protocol of behavior that can be implemented 
by any class anywhere in the class hierarchy. An interface defines 
a set of methods but does not implement them. A class that implements 
the interface agrees to implement all the methods defined in the 
interface, thereby agreeing to certain behavior."

They'll be part of the PHP5 core, btw.

Appendix: 2] is
---------------
Definition:
<pre>
  proto bool is(string class, &lang.Object object)
</pre>

Checks whether a given object is of the class, a subclass or implements 
an interface. Replaces is_a() and its stupid argument order.

Examples:
<code>
  is('Object', new Object());                       // TRUE
  is('Exception', new IllegalArgumentException());  // TRUE
  is('Date', new String());                         // FALSE
</code>

Appendix: 3] subclass patch
---------------------------
With this patch, trying to instanciate an interface would result in:
<pre>
$ php interface.php Iterator
Exception lang.Error (Interfaces cannot be instanciated)
  at lang.Error::__construct() [line 87 of StackTraceElement.class.php] 
  at Iterator::interface() [line 1 of XPClass.class.php(81) : eval()'d code] 
  at <main>::eval() [line 81 of XPClass.class.php] 
  at lang.XPClass::newinstance() [line 62 of interface.php]  
</pre>

Additional downsides: One extra class and slower declaration due to
additional checks in implements().

<EOF>
