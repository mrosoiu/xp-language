Index: lang.base.php
===================================================================
--- lang.base.php	(revision 7143)
+++ lang.base.php	(working copy)
@@ -138,6 +138,67 @@
       exit(0x3d);
     }
   }
+  // }}}  
+
+  // {{{ final class uwrp
+  class uwrp {
+    var 
+      $_h, $_r, $_s;
+    
+    // {{{ bool stream_open(string urn, string mode, int options, &string open)
+    //     Open wrapper
+    function stream_open($urn, $mode, $options, &$open) {
+      static $index= array();
+
+      $class= substr($urn, 5);  // strlen('xp://')
+      $filename= DIRECTORY_SEPARATOR.strtr($class, '.', DIRECTORY_SEPARATOR).'.class.php';
+      
+      // Scan classpath
+      $classpath= xp::registry('classpath');
+      foreach ($classpath as $path) {
+        if (is_dir($path)) {
+        
+          // .class.php file
+          $open= $path.$filename;
+          if (!is_file($open) || !($this->_h= fopen($open, $mode))) continue;
+          $this->_s= filesize($open);
+        } else {
+        
+          // .cca archive
+          $this->_h= fopen($path, 'rb');
+          if (!isset($index[$path])) {
+            $header= unpack('a3id/c1version/i1indexsize/a*reserved', fread($this->_h, 0x0100));
+            for ($index[$path]= array(), $i= 0; $i < $header['indexsize']; $i++) {
+              $entry= unpack(
+                'a80id/a80filename/a80path/i1size/i1offset/a*reserved', 
+                fread($this->_h, 0x0100)
+              );
+              $index[$path][$entry['id']]= array($entry['size'], $entry['offset']);
+            }
+          }
+          
+          if (!isset($index[$path][$class])) continue;
+          fseek($this->_h, 0x0100 + sizeof($index[$path]) * 0x0100 + $index[$path][$class][1], SEEK_SET);
+          $this->_s= $index[$path][$class][0];
+        }
+        
+        $this->_r= 0;
+        xp::registry('class.'.xp::reflect($class), $class);
+        return TRUE;
+      }
+
+      return FALSE;
+    }
+    
+    // {{{ string stream_read(int count)
+    //     Read wrapper
+    function stream_read($count) {
+      if ($this->_r >= $this->_s) return FALSE;
+      if (($this->_r+= $count) >= $this->_s) $count= $this->_s;
+      return fread($this->_h, $count);
+    }
+    // }}}
+  }
   // }}}
 
   // {{{ final class null
@@ -188,38 +249,18 @@
     xp::registry('errors', $errors);
   }
   // }}}
-
+    
   // {{{ void uses (string* args)
   //     Uses one or more classes
   function uses() {
     foreach (func_get_args() as $str) {
       if (class_exists($class= xp::reflect($str))) continue;
 
-      if ($p= strpos($str, '+xp://')) {
-        $type= substr($str, 0, $p);
-        
-        // Load stream wrapper implementation and register it if not done so before
-        if (!class_exists('uwrp·'.$type)) {
-          require('sapi'.DIRECTORY_SEPARATOR.$type.'.uwrp.php');
-          stream_wrapper_register($type.'+xp', 'uwrp·'.$type);
-        }
+      if (FALSE === include('xp://'.$str)) {
+        xp::error(xp::stringOf(new Error('Cannot include '.$str)));
+      }
 
-        // Load using wrapper
-        if (FALSE === include($str)) {
-          xp::error(xp::stringOf(new Error('Cannot include '.$str)));
-        }
-        $str= substr($str, strrpos($str, '/')+ 1);
-        $class= xp::reflect($str);
-      } else {
-        if (FALSE === ($r= include_once(strtr($str, '.', DIRECTORY_SEPARATOR).'.class.php'))) {
-          xp::error(xp::stringOf(new Error('Cannot include '.$str)));
-        } else if (TRUE === $r) {
-          continue;
-        }
-      }
-      
-      // Register class name and call static initializer if available
-      xp::registry('class.'.$class, $str);
+      // Call static initializer if available
       is_callable(array($class, '__static')) && call_user_func(array($class, '__static'));
     }
   }
@@ -324,12 +365,14 @@
   // {{{ proto void implements(string file, string interface [, string interface [, ...]]) 
   //     Defines that the class this is called in implements certain interface(s)
   function implements() {
-    $class= strtolower(substr(basename(func_get_arg(0)), 0, -10));
+    $file= func_get_arg(0);
+    $class= 0 === strpos($file, 'xp://') ? xp::reflect($file) : strtolower(substr(basename($file), 0, -10));
     $signature= array_flip(get_class_methods($class));
     $implements= xp::registry('implements');
     
     for ($i= 1, $s= func_num_args(); $i < $s; $i++) {
       $interface= func_get_arg($i);
+      
       uses($interface);
       $name= xp::reflect($interface);
       $methods= array_flip(get_class_methods($name));
@@ -412,23 +455,30 @@
   
   // Constants
   defined('PATH_SEPARATOR') || define('PATH_SEPARATOR',  0 == strncasecmp('WIN', PHP_OS, 3) ? ';' : ':');
-  define('SKELETON_PATH', (getenv('SKELETON_PATH')
+  define('LONG_MAX', is_int(2147483648) ? 9223372036854775807 : 2147483647);
+  define('LONG_MIN', -LONG_MAX - 1);
+
+  // Classpath
+  define('SKELETON_PATH', realpath(getenv('SKELETON_PATH')
     ? getenv('SKELETON_PATH')
     : dirname(__FILE__).DIRECTORY_SEPARATOR
   ));
-  ini_set('include_path', SKELETON_PATH.PATH_SEPARATOR.ini_get('include_path'));
-  define('LONG_MAX', is_int(2147483648) ? 9223372036854775807 : 2147483647);
-  define('LONG_MIN', -LONG_MAX - 1);
+  xp::registry('classpath', array_unique(array_merge(
+    SKELETON_PATH, 
+    array_map('realpath', explode(PATH_SEPARATOR, ini_get('include_path')))
+  )));
 
   // Hooks
   extension_loaded('overload') && overload('null');
   set_error_handler('__error');
+  stream_wrapper_register('xp', 'uwrp');
   
   // Registry initialization
   xp::registry('null', new null());
   xp::registry('errors', array());
   xp::registry('exceptions', array());
   xp::registry('class.xp', '<xp>');
+  xp::registry('class.uwrp', '<uwrp>');
   xp::registry('class.null', '<null>');
 
   // Omnipresent classes
Index: lang/ClassLoader.class.php
===================================================================
--- lang/ClassLoader.class.php	(revision 7143)
+++ lang/ClassLoader.class.php	(working copy)
@@ -75,7 +75,7 @@
 
       if (!class_exists($name)) {
         $qname= $this->classpath.$class;
-        if (FALSE === include(strtr($qname, '.', DIRECTORY_SEPARATOR).'.class.php')) {
+        if (FALSE === include('xp://'.$qname)) {
           return throw(new ClassNotFoundException('Class "'.$qname.'" not found'));
         }
         xp::registry('class.'.$name, $qname);
