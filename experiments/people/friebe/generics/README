Generics support experiment
========================================================================
$Id$


What's this?
------------
This is an experiment to show how rudimentary generics support could be
embedded into the XP framework.


Generics in general
-------------------
Think of generics as specifications of a type's component(s). For example,
a List<string> is a list of strings, and a Map<string, Object> is a map
of strings and Objects.


Further reading
---------------
- http://www.dina.kvl.dk/~sestoft/gcsharp/index.html
  Generic C# Sample Programs

- http://java.sun.com/j2se/1.5.0/docs/guide/language/generics.html
  Generics in Java

- http://www.is.pku.edu.cn/~qzy/cpp/vc-stl/templates.htm
  C++ Templates Tutorial


Declaring generic classes
-------------------------
To declare a generic class, prepend (enclosed by < and >) the generic
tokens. From thereon, these tokens can be used as type hints for a
method's arguments (passing incorrect values to these will result in 
an IllegalArgumentException at runtime).

Examples:
<?php
  class SortedList<E> extends Object {

    function add(E $item) {
      // ... implementation
    }
  }
  
  class IdentityMap<K, V> extends Object {

    function put(K $key, V $value) {
      // ... implementation
    }
  }
?>


Using generic classes
---------------------
In this experiment, generics are imported by using the "generic" scheme:

<?php
  uses('generic+xp://fully.qualified.class.Name');
?>

The modified import functionality is provided by the generic SAPI.


Instantiating generic classes
-----------------------------
Generic classes are not instantiated by new but by a function called
create().

<?php
  $hash= &create('GenericHash<int, Object>');
  $hash= &create('GenericHash<int, Object>', $arg1, $arg2);
?>


<EOF>
