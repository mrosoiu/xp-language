Index: src/java/net/xp_framework/turpitude/PHPScriptEngine.java
===================================================================
--- src/java/net/xp_framework/turpitude/PHPScriptEngine.java	(revision 10126)
+++ src/java/net/xp_framework/turpitude/PHPScriptEngine.java	(working copy)
@@ -168,8 +168,8 @@
     /**
      * Compiles the script (source contained in a Reader) for later execution.
      */
-     public CompiledScript compile(String script) throws ScriptException,
-                                                         NullPointerException {
+     public synchronized CompiledScript compile(String script) throws ScriptException,
+                                                                      NullPointerException {
         script = preparePHPCode(script);
         Object o = compilePHP(script);
         if (!(o instanceof PHPCompiledScript)) {
Index: src/java/net/xp_framework/turpitude/samples/BeanTest.java
===================================================================
--- src/java/net/xp_framework/turpitude/samples/BeanTest.java	(revision 0)
+++ src/java/net/xp_framework/turpitude/samples/BeanTest.java	(revision 0)
@@ -0,0 +1,79 @@
+package net.xp_framework.turpitude.samples;
+
+import javax.script.*;
+import java.io.FileReader;
+import java.io.FileNotFoundException;
+import net.xp_framework.turpitude.PHPObject;
+import net.xp_framework.turpitude.PHPEvalException;
+import net.xp_framework.turpitude.PHPCompileException;
+import net.xp_framework.beans.stateless.*;
+
+public class BeanTest {
+
+   /**
+    * default constructor
+    */
+    public BeanTest() {
+    }
+
+    /**
+     * executes a script from a file
+     */
+    public void exec(String filename, String s) throws FileNotFoundException {
+        System.out.println("reading file: " + filename);
+        FileReader r = new FileReader(filename);
+
+        ScriptEngineManager mgr = new ScriptEngineManager();
+        ScriptEngine eng = mgr.getEngineByName("turpitude");
+        if (null == eng) {
+            System.out.println("unable to find engine, please check classpath");
+            return;
+        }
+        System.out.println("found Engine: " + eng.getFactory().getEngineName());
+        System.out.println("evaluating... ");
+        Object retval = null;
+        try {
+            retval = eng.eval(r);
+        } catch(PHPCompileException e) {
+            System.out.println("Compile Error:");
+            e.printStackTrace();
+            return;
+        } catch(PHPEvalException e) {
+            System.out.println("Eval Error:");
+            e.printStackTrace();
+            return;
+        } catch(ScriptException e) {
+            System.out.println("ScriptException caught:");
+            e.printStackTrace();
+            return;
+        }
+        if (null == retval)
+            System.out.println("done evaluating, return value " + retval);
+        else 
+            System.out.println("done evaluating, return value " + retval.getClass() + " : " + retval);
+        if (retval instanceof PHPObject)
+            ((PHPObject)retval).dump();
+        try {
+            net.xp_framework.beans.stateless.HelloWorld hw = ((Invocable)eng).getInterface(retval, net.xp_framework.beans.stateless.HelloWorld.class);
+            System.out.println(hw.sayHello(s));
+        } catch(Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    /**
+     * entry point
+     */
+    public static void main(String[] argv) {
+        BeanTest se = new BeanTest();
+        try {
+            se.exec("./bin/hw.php", "test1");
+            se.exec("./bin/hw.php", "test2");
+        } catch(FileNotFoundException e) {
+            e.printStackTrace();
+        }
+    }
+ 
+
+}
+
Index: src/java/net/xp_framework/turpitude/PHPCompiledScript.java
===================================================================
--- src/java/net/xp_framework/turpitude/PHPCompiledScript.java	(revision 10126)
+++ src/java/net/xp_framework/turpitude/PHPCompiledScript.java	(working copy)
@@ -8,16 +8,30 @@
    
     private ScriptEngine MyEngine = null;
     private transient java.nio.ByteBuffer ZendOpArrayptr;
+    private transient java.nio.ByteBuffer ZendTSRMctxptr;
 
     /**
      * protected constructor to prevent users from
      * creating instances directly
      */
     protected PHPCompiledScript(ScriptEngine eng) {
-        MyEngine = eng;
+        setEngine(eng);
+        startRequest();
     }
 
     /**
+     * finalize method to shut down request whenever this object
+     * is destroyed
+     */
+    protected void finalize() throws Throwable {
+        try {
+            stopRequest();
+        } finally {
+            super.finalize();
+        }
+    }
+
+    /**
      * return the ScriptEngine that created this object
      */
     public ScriptEngine getEngine() {
@@ -113,4 +127,14 @@
      */
     private native Object createInstance(String classname);
 
+    /**
+     * starts the request
+     */
+    private native void startRequest();
+
+    /**
+     * stop the request
+     */
+    private native void stopRequest();
+
 }
Index: src/native/include/turpitude_sapi.h
===================================================================
--- src/native/include/turpitude_sapi.h	(revision 10130)
+++ src/native/include/turpitude_sapi.h	(working copy)
@@ -37,6 +37,7 @@
 extern bool ErrorCBCalled;
 
 inline void set_zend_globals() {
+    TSRMLS_FETCH();
     zend_error_cb= turpitude_error_cb;
     zend_uv.html_errors= 0;
     CG(in_compilation)= 0;
Index: src/native/include/Turpitude.h
===================================================================
--- src/native/include/Turpitude.h	(revision 10126)
+++ src/native/include/Turpitude.h	(working copy)
@@ -38,6 +38,8 @@
 void jarray_to_zval(JNIEnv* env, jarray arr, turpitude_java_type type, zval* retval);
 jclass get_java_class(JNIEnv* env, jobject obj, char** dest);
 zend_op_array* getOpArrayPtr(JNIEnv* env, jobject self);
+void* getTSRMctxPtr(JNIEnv* env, jobject self);
+void setTSRMctxPtr(JNIEnv* env, jobject self, void* ctx);
 zval* getZvalPtr(JNIEnv* env, jobject self);
 
 
Index: src/native/include/net_xp_framework_turpitude_PHPCompiledScript.h
===================================================================
--- src/native/include/net_xp_framework_turpitude_PHPCompiledScript.h	(revision 10126)
+++ src/native/include/net_xp_framework_turpitude_PHPCompiledScript.h	(working copy)
@@ -39,6 +39,22 @@
 JNIEXPORT jobject JNICALL Java_net_xp_1framework_turpitude_PHPCompiledScript_createInstance
   (JNIEnv *, jobject, jstring);
 
+/*
+ * Class:     net_xp_framework_turpitude_PHPCompiledScript
+ * Method:    startRequest
+ * Signature: ()V
+ */
+JNIEXPORT void JNICALL Java_net_xp_1framework_turpitude_PHPCompiledScript_startRequest
+  (JNIEnv *, jobject);
+
+/*
+ * Class:     net_xp_framework_turpitude_PHPCompiledScript
+ * Method:    stopRequest
+ * Signature: ()V
+ */
+JNIEXPORT void JNICALL Java_net_xp_1framework_turpitude_PHPCompiledScript_stopRequest
+  (JNIEnv *, jobject);
+
 #ifdef __cplusplus
 }
 #endif
Index: src/native/main/scriptengine.h
===================================================================
--- src/native/main/scriptengine.h	(revision 0)
+++ src/native/main/scriptengine.h	(revision 0)
@@ -0,0 +1,15 @@
+#ifndef __MAIN_SCRIPTENGINE_H__
+#define __MAIN_SCRIPTENGINE_H__
+
+#include "Turpitude.h"
+
+void start_sapi();
+void start_request();
+void stop_sapi();
+void stop_request();
+zend_op_array* compile(char* buf);
+zval* exec(zend_op_array* ops);
+void setIniParam(char* key, char* val);
+
+
+#endif
Index: src/native/main/mockup.h
===================================================================
--- src/native/main/mockup.h	(revision 0)
+++ src/native/main/mockup.h	(revision 0)
@@ -0,0 +1,13 @@
+#ifndef __MAIN_MOCKUP_H__
+#define __MAIN_MOCKUP_H__
+
+#include "Turpitude.h"
+
+#define MOCKUP 1
+
+inline void throw_error(const char* msg) {
+    printf("ERROR: %s\n");
+    exit(-1);
+}
+
+#endif
Index: src/native/main/main.cpp
===================================================================
--- src/native/main/main.cpp	(revision 0)
+++ src/native/main/main.cpp	(revision 0)
@@ -0,0 +1,57 @@
+#include "Turpitude.h"
+#include <iostream>
+#include <fstream>
+#include <string>
+#include "scriptengine.h"
+#include "context.h"
+
+using namespace std;
+
+void echoUsage() {
+    printf("usage: standalone <file.php>\n");
+}
+
+int main(int argc, char *argv[]) {
+    if (argc < 2) {
+        echoUsage();
+        return FAILURE;
+    }
+
+    printf("reading file: %s\n", argv[1]);
+
+    ifstream srcfile(argv[1], std::ios_base::in);
+    if (!srcfile.is_open()) {
+        printf("unable to open file %s\n", argv[1]);
+        return FAILURE;
+    }
+    srcfile.seekg(0, std::ios_base::end);
+    unsigned long filesize =  srcfile.tellg();
+    srcfile.seekg(0, std::ios_base::beg);
+
+    char buf[filesize+1];
+    memset(buf, 0, filesize+1);
+    srcfile.get(buf, filesize, NULL);
+
+    start_sapi();
+
+    setIniParam("magic_quotes_gpc", "0");
+    setIniParam("include_path", "/home/nsn/devel/xp.public/trunk/skeleton");
+
+    start_request();
+
+    turpitude_context* ctx = new_turpitude_context(); 
+    turpitude_context* current_ctx = set_turpitude_context(ctx);
+
+    zend_op_array* op_array = compile(buf);
+    zval* hw1 = exec(op_array);
+
+    set_turpitude_context(current_ctx);
+
+    //zval* hw2 = exec(op_array);
+    
+    stop_request();
+    stop_sapi();
+
+    printf("done!\n");
+}
+
Index: src/native/main/context.cpp
===================================================================
--- src/native/main/context.cpp	(revision 0)
+++ src/native/main/context.cpp	(revision 0)
@@ -0,0 +1,18 @@
+#include "context.h"
+
+turpitude_context* new_turpitude_context() {
+    printf("new ctx\n");
+
+    return NULL;
+}
+
+turpitude_context* set_turpitude_context(turpitude_context* ctx) {
+    printf("set ctx\n");
+
+    return NULL;
+}
+
+void destroy_turpitude_context() {
+    printf("destroy ctx\n");
+}
+
Index: src/native/main/context.h
===================================================================
--- src/native/main/context.h	(revision 0)
+++ src/native/main/context.h	(revision 0)
@@ -0,0 +1,13 @@
+#ifndef __MAIN_CONTEXT_H__
+#define __MAIN_CONTEXT_H__
+
+#include "Turpitude.h"
+
+struct turpitude_context {
+};
+
+turpitude_context* new_turpitude_context();
+turpitude_context* set_turpitude_context(turpitude_context* ctx);
+void destroy_turpitude_context();
+
+#endif
Index: src/native/main/scriptengine.cpp
===================================================================
--- src/native/main/scriptengine.cpp	(revision 0)
+++ src/native/main/scriptengine.cpp	(revision 0)
@@ -0,0 +1,116 @@
+#include "scriptengine.h"
+#include "mockup.h"
+
+void start_sapi() {
+    TSRMLS_FETCH();
+    turpitude_sapi_module.phpinfo_as_text= 1;
+    sapi_startup(&turpitude_sapi_module);
+    if (SUCCESS != php_module_startup(&turpitude_sapi_module, NULL, 0))
+        throw_error("Cannot startup SAPI module");
+}
+
+void start_request() {
+    TSRMLS_FETCH();
+    if (SUCCESS != php_request_startup(TSRMLS_C))
+        throw_error("unable to start up request - php_request_startup()");
+}
+
+void stop_sapi() {
+    TSRMLS_FETCH();
+    php_module_shutdown(TSRMLS_C);
+    sapi_shutdown();
+}
+void stop_request() {
+    TSRMLS_FETCH();
+    php_request_shutdown((void *) 0);
+}
+
+zend_op_array* compile(char* str) {
+    TSRMLS_FETCH();
+    zend_op_array* compiled_op_array= NULL;
+
+    zend_first_try {
+        zend_llist global_vars;
+        zend_llist_init(&global_vars, sizeof(char *), NULL, 0);
+
+        set_zend_globals();
+
+        LastError = "";
+        {
+            zval eval;
+            char* eval_desc = zend_make_compiled_string_description("jni compile()'d code" TSRMLS_CC);
+
+            eval.value.str.val= (char*) emalloc(strlen(str)+ 1);
+            eval.value.str.len= strlen(str);
+            strncpy(eval.value.str.val, str, eval.value.str.len);
+            eval.value.str.val[eval.value.str.len]= '\0';
+            eval.type= IS_STRING;
+
+            //printf("Code --> |%s| <--\n", eval.value.str.val);
+            compiled_op_array= compile_string(&eval, eval_desc TSRMLS_CC);
+
+            efree(eval_desc);
+            zval_dtor(&eval);
+        }
+
+        zend_llist_destroy(&global_vars);
+    } zend_catch {
+        throw_error(LastError.data());
+    } zend_end_try();
+
+    /* Check if compilation worked */
+    if (!compiled_op_array) {
+        throw_error(LastError.data());
+    }
+
+    return compiled_op_array;
+}
+
+zval* exec(zend_op_array* ops) {
+    TSRMLS_FETCH();
+
+    zval* retval_ptr = NULL;
+    zend_first_try {
+        set_zend_globals();
+
+        zend_llist global_vars;
+        zend_llist_init(&global_vars, sizeof(char *), NULL, 0);
+
+        zend_fcall_info_cache fci_cache;
+        zend_fcall_info fci;
+
+        memset(&fci, 0, sizeof(fci));
+        memset(&fci_cache, 0, sizeof(fci_cache));
+
+        fci.size = sizeof(fci);
+        fci.function_table = CG(function_table);
+
+        fci.retval_ptr_ptr = &retval_ptr;
+        fci.no_separation = 1;
+        fci.param_count = 0;
+
+        fci_cache.initialized = 1;
+        fci_cache.function_handler = (zend_function*)ops;
+        ops->type = ZEND_USER_FUNCTION; 
+
+
+        // We could inject parameters to be retrieved by func_getargs() here...
+        //zval** param = ;
+        //fci.param_count = ;
+        //fci.params = &param;
+
+        // use zend_call_function to execute the script
+        zend_call_function(&fci, &fci_cache TSRMLS_CC);
+
+        zend_llist_destroy(&global_vars);
+    } zend_catch {
+        if (ErrorCBCalled)
+            throw_error(LastError.data());
+    } zend_end_try();
+
+    return retval_ptr;
+}
+
+void setIniParam(char* key, char* val) {
+    zend_alter_ini_entry(key, strlen(key)+1, val, strlen(val), PHP_INI_ALL, PHP_INI_STAGE_ACTIVATE);
+}
Index: src/native/src/net_xp_framework_turpitude_PHPScriptEngine.cpp
===================================================================
--- src/native/src/net_xp_framework_turpitude_PHPScriptEngine.cpp	(revision 10131)
+++ src/native/src/net_xp_framework_turpitude_PHPScriptEngine.cpp	(working copy)
@@ -10,6 +10,7 @@
 JNIEXPORT void JNICALL Java_net_xp_1framework_turpitude_PHPScriptEngine_startUp(JNIEnv* env, jobject jc) {
     TSRMLS_FETCH();
 
+    //tsrm_startup(1, 1, 0, NULL);
     //make sure php info outputs plain text
     turpitude_sapi_module.phpinfo_as_text= 1;
 
@@ -25,8 +26,8 @@
     env->CallObjectMethod(jc, mid);
 
     // Initialize request 
-    if (SUCCESS != php_request_startup(TSRMLS_C)) 
-        java_throw(env, "javax/script/ScriptException", "unable to start up request - php_request_startup()");
+    //if (SUCCESS != php_request_startup(TSRMLS_C)) 
+    //    java_throw(env, "javax/script/ScriptException", "unable to start up request - php_request_startup()");
 
     // initialize Turpitude classes
     zend_first_try {
@@ -45,37 +46,38 @@
     TSRMLS_FETCH();
 
     // Shutdown PHP module 
-    php_request_shutdown((void *) 0);
+    //php_request_shutdown((void *) 0);
     php_module_shutdown(TSRMLS_C);
     sapi_shutdown();
 }
 
 JNIEXPORT jobject JNICALL Java_net_xp_1framework_turpitude_PHPScriptEngine_compilePHP(JNIEnv* env, jobject obj, jstring src) {
+    //void *prior_context = tsrm_set_interpreter_context(tsrm_new_interpreter_context());
     TSRMLS_FETCH();
 
     // return value
     zend_op_array* compiled_op_array= NULL;
 
+    // Create PHPCompiledScript object and return it 
+    jclass cls = env->FindClass("net/xp_framework/turpitude/PHPCompiledScript");
+    if (NULL == cls) 
+        java_throw(env, "javax/script/ScriptException", "unable to find class net/xp_framework/turpitude/PHPCompiledScript");
+
+    jobject compiledscript = env->AllocObject(cls);
+    if (NULL == compiledscript) 
+        java_throw(env, "javax/script/ScriptException", "unable to allocate object (net/xp_framework/turpitude/PHPCompiledScript)");
+
+    jmethodID constr = env->GetMethodID(cls, "<init>", "(Ljavax/script/ScriptEngine;)V");
+    env->CallObjectMethod(compiledscript, constr, obj);
+
+
     zend_first_try {
         zend_llist global_vars;
         zend_llist_init(&global_vars, sizeof(char *), NULL, 0);
 
 
         set_zend_globals();
-/*
-        zend_error_cb= turpitude_error_cb;
-        zend_uv.html_errors= 0;
-        CG(in_compilation)= 0;
-        CG(interactive)= 0;
-        EG(uninitialized_zval_ptr)= NULL;
-        EG(error_reporting)= E_ALL;
 
-        INIT_ZVAL(EG(uninitialized_zval));
-        EG(uninitialized_zval).refcount++;
-        INIT_ZVAL(EG(error_zval));
-        EG(uninitialized_zval_ptr)=&EG(uninitialized_zval);
-        EG(error_zval_ptr)=&EG(error_zval);
-*/
         LastError = "";
         const char* str= env->GetStringUTFChars(src, 0); 
         {
@@ -108,26 +110,19 @@
         java_throw(env, "net/xp_framework/turpitude/PHPCompileException", LastError.data());
     }
 
-    // Create PHPCompiledScript object and return it 
-    jclass cls = env->FindClass("net/xp_framework/turpitude/PHPCompiledScript");
-    if (NULL == cls) 
-        java_throw(env, "javax/script/ScriptException", "unable to find class net/xp_framework/turpitude/PHPCompiledScript");
-
-    jobject compiledscript = env->AllocObject(cls);
-    if (NULL == compiledscript) 
-        java_throw(env, "javax/script/ScriptException", "unable to allocate object (net/xp_framework/turpitude/PHPCompiledScript)");
-
     jfieldID oparrayField = env->GetFieldID(cls, "ZendOpArrayptr", "Ljava/nio/ByteBuffer;");
     if (NULL == oparrayField) 
         java_throw(env, "javax/script/ScriptException", "unable find fieldID (ZendOpArrayptr)");
 
-
     env->SetObjectField(
         compiledscript, 
         oparrayField,
         env->NewDirectByteBuffer(compiled_op_array, sizeof(compiled_op_array))
     );
 
+    // restore context, set ctx ptr
+    //setTSRMctxPtr(env, compiledscript, tsrm_set_interpreter_context(prior_context));
+
     return compiledscript;
 }
 
Index: src/native/src/turpitude_sapi.cpp
===================================================================
--- src/native/src/turpitude_sapi.cpp	(revision 10133)
+++ src/native/src/turpitude_sapi.cpp	(working copy)
@@ -1,5 +1,14 @@
 #include <turpitude_sapi.h>
 
+PHPAPI int core_globals_id;
+ZEND_API int compiler_globals_id;
+ZEND_API int executor_globals_id;
+static HashTable *global_function_table = NULL;
+static HashTable *global_class_table = NULL;
+static HashTable *global_constants_table = NULL;
+static HashTable *global_auto_globals_table = NULL;
+static HashTable *global_persistent_list = NULL;
+
 int turpitude_startup(sapi_module_struct* sapi_module) {
     return php_module_startup(sapi_module, NULL, 0);
 }
@@ -56,7 +65,7 @@
         error_filename ? error_filename : "(Unknown)",
         buffer
     );
-    //fprintf(stderr, "*** Error #%d on line %d of %s\n    %s\n", type, error_lineno, error_filename ? error_filename : "(Unknown)", buffer);
+    fprintf(stderr, "*** Error #%d on line %d of %s\n    %s\n", type, error_lineno, error_filename ? error_filename : "(Unknown)", buffer);
 
     if (PG(last_error_message)) {
         free(PG(last_error_message));
Index: src/native/src/turpitude_jclass.cpp
===================================================================
--- src/native/src/turpitude_jclass.cpp	(revision 10126)
+++ src/native/src/turpitude_jclass.cpp	(working copy)
@@ -300,6 +300,7 @@
 }
 
 void turpitude_jclass_method_iscastable(turpitude_javaclass_object* cls, int xargc, zval*** xargv, zval* return_value) {
+    TSRMLS_FETCH();
     if (xargc < 1) 
         php_error(E_ERROR, "invalid number of arguments to method isCastable: %d.", xargc);
 
@@ -618,6 +619,7 @@
 }
 
 void make_turpitude_jclass_instance(jclass cls, char* classname, zval* dest) {
+    TSRMLS_FETCH();
     if (!dest)
         ALLOC_ZVAL(dest);
     // instantiate JavaClass object
Index: src/native/src/Turpitude.cpp
===================================================================
--- src/native/src/Turpitude.cpp	(revision 10126)
+++ src/native/src/Turpitude.cpp	(working copy)
@@ -384,6 +384,42 @@
     return retval;
 }
 
+void* getTSRMctxPtr(JNIEnv* env, jobject self) {
+    // find class
+    jclass myclass = env->GetObjectClass(self);
+    if (NULL == myclass)
+        java_throw(env, "javax/script/ScriptException", "unable to find class via GetObjectClass");
+    // find ZendOpArrayptr field if
+    jfieldID ctxField = env->GetFieldID(myclass, "ZendTSRMctxptr", "Ljava/nio/ByteBuffer;");
+    if (NULL == ctxField) 
+        java_throw(env, "javax/script/ScriptException", "unable find fieldID (ZendTSRMctxptr)");
+    // retrieve pointer to op_array
+    void* ctx = NULL;
+    ctx = env->GetDirectBufferAddress(env->GetObjectField(self, ctxField));
+
+    if (NULL == ctx)
+        java_throw(env, "javax/script/ScriptException", "ZendTSRMctxptr empty");
+
+    return ctx;
+}
+
+void setTSRMctxPtr(JNIEnv* env, jobject self, void* ctx) {
+    // find class
+    jclass myclass = env->GetObjectClass(self);
+    if (NULL == myclass)
+        java_throw(env, "javax/script/ScriptException", "unable to find class via GetObjectClass");
+
+    jfieldID ctxField = env->GetFieldID(myclass, "ZendTSRMctxptr", "Ljava/nio/ByteBuffer;");
+    if (NULL == ctxField) 
+        java_throw(env, "javax/script/ScriptException", "unable find fieldID (ZendOpArrayptr)");
+
+    env->SetObjectField(
+        self, 
+        ctxField,
+        env->NewDirectByteBuffer(ctx, sizeof(ctx)) //TODO: fix size
+    );
+}
+
 #if ZEND_DEBUG
 ZEND_API void _zval_ptr_dtor_wrapper(zval **zval_ptr) {
     zval_ptr_dtor(zval_ptr);
Index: src/native/src/net_xp_framework_turpitude_PHPCompiledScript.cpp
===================================================================
--- src/native/src/net_xp_framework_turpitude_PHPCompiledScript.cpp	(revision 10131)
+++ src/native/src/net_xp_framework_turpitude_PHPCompiledScript.cpp	(working copy)
@@ -203,3 +203,13 @@
     return zval_to_jobject(env, retval);
 }
 
+JNIEXPORT void JNICALL Java_net_xp_1framework_turpitude_PHPCompiledScript_startRequest(JNIEnv *env, jobject) {
+    TSRMLS_FETCH();
+    // Initialize request 
+    if (SUCCESS != php_request_startup(TSRMLS_C)) 
+        java_throw(env, "javax/script/ScriptException", "unable to start up request - php_request_startup()");
+}
+
+JNIEXPORT void JNICALL Java_net_xp_1framework_turpitude_PHPCompiledScript_stopRequest(JNIEnv *, jobject) {
+    php_request_shutdown((void *) 0);
+}
Index: bin/hw.php
===================================================================
--- bin/hw.php	(revision 10134)
+++ bin/hw.php	(working copy)
@@ -1,4 +1,3 @@
-<?php
 require('/home/nsn/devel/xp.public/trunk/skeleton/lang.base.php');
 
 /* This class is part of the XP framework
@@ -26,5 +25,4 @@
     }
   }
   return new HelloWorldBean();
-?>
 
Index: Makefile
===================================================================
--- Makefile	(revision 10134)
+++ Makefile	(working copy)
@@ -4,7 +4,7 @@
 #JAVA_HOME = /home/nsn/jdk1.6.0
 JAVA_HOME = /usr/lib/jvm/sun-jdk-1.6
 #PHP_HOME = /home/nsn/devel/php/php-5.2.0
-PHP_HOME = /home/nsn/devel/php/php-hax
+PHP_HOME = /home/nsn/devel/php/php-5.2.0
 ############################################
 PROPS = -Dnet.xp_framework.turpitude.ini.include_path=.:/path/to/xp
 JCC = $(JAVA_HOME)/bin/javac
@@ -12,12 +12,14 @@
 JARBIN = $(JAVA_HOME)/bin/jar
 JAVAH = $(JAVA_HOME)/bin/javah
 JSRC = $(shell find ./src/java -type f -name \*.java)
-SRC = $(shell find ./src/native -type f -name \*.cpp)
-CPATH = ./classes:./turpitude.jar
+SRC = $(shell find ./src/native/src -type f -name \*.cpp)
+MAINSRC = $(shell find ./src/native/main -type f -name \*.cpp)
+CPATH = ./classes:./turpitude.jar:./lib/peanuts2.jar
 INCLUDES = -I./src/native/include -I$(JAVA_HOME)/include/ -I$(JAVA_HOME)/include/linux
 PHP_INCLUDES = -I$(PHP_HOME) -I$(PHP_HOME)/main -I$(PHP_HOME)/TSRM -I$(PHP_HOME)/Zend -I$(PHP_HOME)/ext
 CC= gcc
-CCFLAGS = -fpic -lstdc++
+#CCFLAGS = -fpic -lstdc++ -DZTS -DPTHREADS
+CCFLAGS = -fpic -lstdc++ 
 LIBPATH = LD_LIBRARY_PATH=.:$(PHP_HOME)/libs
 
 all: jar lib
@@ -25,6 +27,12 @@
 version:
 	$(JBIN) -version
 
+standalone: $(SRC) $(MAINSRC)
+	$(CC) $(CCFLAGS) $(INCLUDES) $(PHP_INCLUDES) -o standalone  $(PHP_HOME)/libs/libphp5.so $(SRC) $(MAINSRC)
+
+satest: standalone
+	LD_LIBRARY_PATH=.:$(PHP_HOME)/libs ./standalone ./bin/hw.php
+
 list: turpitude.jar lib
 	$(JBIN) -cp $(CPATH) net.xp_framework.turpitude.samples.EngineList
 
@@ -58,6 +66,10 @@
 fatal: jar lib
 	$(LIBPATH) $(JBIN) -Dnet.xp_framework.turpitude.ini.magic_quotes_gpc=0 -Dnet.xp_framework.turpitude.ini.include_path=/home/nsn/devel/xp.public/trunk/skeleton -Djava.library.path=. -cp $(CPATH) net.xp_framework.turpitude.samples.ScriptExec ./bin/hw.php
 	
+beantest: turpitude.jar lib
+	$(LIBPATH) $(JBIN) -Dnet.xp_framework.turpitude.ini.magic_quotes_gpc=0 -Dnet.xp_framework.turpitude.ini.include_path=/home/nsn/devel/xp.public/trunk/skeleton -Djava.library.path=. -cp $(CPATH) net.xp_framework.turpitude.samples.BeanTest
+
+.PHONY: classes
 classes: $(JSRC)
 	$(JCC) -Xlint:unchecked  -d classes -cp $(CPATH) $(JSRC)
 
Index: README
===================================================================
--- README	(revision 10126)
+++ README	(working copy)
@@ -1,6 +1,6 @@
 
 php-config:
---enable-embed=shared
+--enable-embed=shared --with-tsrm-pthreads
 
 
 helpful links:
