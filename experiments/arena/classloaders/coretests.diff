Index: core/IsTest.class.php
===================================================================
--- core/IsTest.class.php	(revision 10223)
+++ core/IsTest.class.php	(working copy)
@@ -61,8 +61,7 @@
      */
     #[@test]
     public function interfaces() {
-      $cl= ClassLoader::getDefault();
-      $cl->defineClass(
+      ClassLoader::defineClass(
         'DestructionCallbackImpl', 
         'lang.Object',
         array('net.xp_framework.unittest.core.DestructionCallback'),
@@ -72,9 +71,11 @@
           }
         }'
       );
-      $cl->defineClass(
+      ClassLoader::defineClass(
         'DestructionCallbackImplEx', 
-        'class DestructionCallbackImplEx extends DestructionCallbackImpl { }'
+        'DestructionCallbackImpl',
+        NULL,
+        '{}'
       );
       
       $this->assertTrue(is('DestructionCallback', new DestructionCallbackImpl()));
Index: core/ReferencesTest.class.php
===================================================================
--- core/ReferencesTest.class.php	(revision 10223)
+++ core/ReferencesTest.class.php	(working copy)
@@ -13,51 +13,34 @@
    */
   class ReferencesTest extends TestCase {
 
-    /**
-     * Setup method
-     *
-     */
-    public function setUp() {
-      $cl= ClassLoader::getDefault();
+    static function __static() {
       
       // For singletonInstance test
-      $cl->defineClass(
-        'net.xp_framework.unittest.core.AnonymousSingleton', 
-        'class AnonymousSingleton extends Object {
-           protected static $instance= NULL;
-           
-           static function getInstance() {
-             if (!isset(self::$instance)) self::$instance= new AnonymousSingleton();
-             return self::$instance;
-           }
-        }'
-      );
+      ClassLoader::defineClass('net.xp_framework.unittest.core.AnonymousSingleton', 'lang.Object', array(), '{
+        protected static $instance= NULL;
 
+        static function getInstance() {
+          if (!isset(self::$instance)) self::$instance= new AnonymousSingleton();
+          return self::$instance;
+        }
+      }');
+
       // For returnNewObject and returnNewObjectViaReflection tests
-      $cl->defineClass(
-        'net.xp_framework.unittest.core.AnonymousList', 
-        'class AnonymousList extends Object {
-           function __construct() {
-             ReferencesTest::registry("list", $this);
-           }
-        }'
-      );
-      $cl->defineClass(
-        'net.xp_framework.unittest.core.AnonymousFactory', 
-        'class AnonymousFactory extends Object {
-          static function factory() {
-            return new AnonymousList();
-          }
-        }'
-      );
-      $cl->defineClass(
-        'net.xp_framework.unittest.core.AnonymousNewInstanceFactory', 
-        'class AnonymousNewInstanceFactory extends Object {
-          static function factory() {
-            return XPClass::forName("net.xp_framework.unittest.core.AnonymousList")->newInstance();
-          }
-        }'
-      );
+      ClassLoader::defineClass('net.xp_framework.unittest.core.AnonymousList', 'lang.Object', array(), '{
+        function __construct() {
+          ReferencesTest::registry("list", $this);
+        }
+      }');
+      ClassLoader::defineClass('net.xp_framework.unittest.core.AnonymousFactory', 'lang.Object', array(), '{
+        static function factory() {
+          return new AnonymousList();
+        }
+      }');
+      ClassLoader::defineClass('net.xp_framework.unittest.core.AnonymousNewInstanceFactory', 'lang.Object', array(), '{
+        static function factory() {
+          return XPClass::forName("net.xp_framework.unittest.core.AnonymousList")->newInstance();
+        }
+      }');
     }
 
     /**
Index: reflection/ClassLoaderTest.class.php
===================================================================
--- reflection/ClassLoaderTest.class.php	(revision 10223)
+++ reflection/ClassLoaderTest.class.php	(working copy)
@@ -56,7 +56,10 @@
      */
     #[@test]
     public function findThisClass() {
-      $this->assertEquals(realpath(__FILE__), $this->classLoader->findClass($this->getClassName()));
+      $this->assertEquals(
+        $this->getClass()->getClassLoader(), 
+        $this->classLoader->findClass($this->getClassName())
+      );
     }
 
     /**
@@ -65,7 +68,7 @@
      */
     #[@test]
     public function findNullClass() {
-      $this->assertFalse($this->classLoader->findClass(NULL));
+      $this->assertEquals(xp::null(), $this->classLoader->findClass(NULL));
     }
 
     /**
@@ -106,7 +109,7 @@
         return $this->fail('Class "'.$name.'" may not exist!');
       }
       
-      $class= $this->classLoader->defineClass($name, 'class RuntimeDefinedClass extends Object {
+      $class= ClassLoader::defineClass($name, 'Object', array(), '{
         public static $initializerCalled= FALSE;
         
         static function __static() { 
@@ -116,80 +119,8 @@
       $this->assertXPClass($name, $class);
       $this->assertTrue(RuntimeDefinedClass::$initializerCalled);
     }
-    
-    /**
-     * Tests the defineClass() method with a package-scope
-     * ClassLoader (the defined class must be in the package
-     * provided by the ClassLoader).
-     *
-     */
-    #[@test]
-    public function defineClassWithPrefix() {
-      $cl= new ClassLoader('net.xp_framework.unittest.reflection.subpackage');
-      $name= 'RuntimeDefinedClass2';
-      if (class_exists(xp::reflect($name))) {
-        return $this->fail('Class "'.$name.'" may not exist!');
-      }
 
-      $class= $cl->defineClass($name, 'class RuntimeDefinedClass2 extends Object {
-        public static $initializerCalled= FALSE;
-        
-        static function __static() { 
-          self::$initializerCalled= TRUE; 
-        }
-      }');
-      $this->assertXPClass($cl->classpath.$name, $class);
-      $this->assertTrue(RuntimeDefinedClass2::$initializerCalled);
-    }
-    
     /**
-     * Test defineClass() method with the new signature
-     *
-     */
-    #[@test]
-    public function defineClassNG() {
-      $name= 'net.xp_framework.unittest.reflection.RuntimeDefinedClass3';
-      if (class_exists(xp::reflect($name))) {
-        return $this->fail('Class "'.$name.'" may not exist!');
-      }
-      
-      $class= $this->classLoader->defineClass($name, 'lang.Object', NULL, '{
-        public static $initializerCalled= FALSE;
-        
-        static function __static() { 
-          self::$initializerCalled= TRUE; 
-        }
-      }');
-      $this->assertXPClass($name, $class);
-      $this->assertTrue(RuntimeDefinedClass3::$initializerCalled);
-    }
-    
-    /**
-     * Test defineClass() method with the new signature and a package-
-     * scope ClassLoader (the defined class must be in the package
-     * provided by the ClassLoader).
-     *
-     */
-    #[@test]
-    public function defineClassNGWithPrefix() {
-      $cl= new ClassLoader('net.xp_framework.unittest.reflection.subpackage');
-      $name= 'RuntimeDefinedClass4';
-      if (class_exists(xp::reflect($name))) {
-        return $this->fail('Class "'.$name.'" may not exist!');
-      }
-      
-      $class= $cl->defineClass($name, 'lang.Object', NULL, '{
-        public static $initializerCalled= FALSE;
-        
-        static function __static() { 
-          self::$initializerCalled= TRUE; 
-        }
-      }');
-      $this->assertXPClass($cl->classpath.$name, $class);
-      $this->assertTrue(RuntimeDefinedClass4::$initializerCalled);
-    }
-    
-    /**
      * Tests defineClass() with a given interface
      *
      */
@@ -209,17 +140,17 @@
      
     
     /**
-     * Tests the defineClass() method for the situtation where the bytes 
-     * argument failed to actually declare the class.
+     * Tests the defineClass() method for the situtation when the
+     * parent class does not exist.
      *
      */
-    #[@test, @expect('lang.FormatException')]
-    public function defineIllegalClass() {
+    #[@test, @expect('lang.ClassNotFoundException')]
+    public function defineClassWithNonExistantParent() {
       $name= 'net.xp_framework.unittest.reflection.IllegalClass';
       if (class_exists(xp::reflect($name))) {
         return $this->fail('Class "'.$name.'" may not exist!');
       }
-      $this->classLoader->defineClass($name, '1;');
+      $this->classLoader->defineClass($name, 'NON_EXISTANT_PARENT', NULL, '{}');
     }
   }
 ?>
Index: reflection/ProxyTest.class.php
===================================================================
--- reflection/ProxyTest.class.php	(revision 10223)
+++ reflection/ProxyTest.class.php	(working copy)
@@ -7,6 +7,7 @@
   uses(
     'unittest.TestCase',
     'lang.reflect.Proxy',
+    'util.XPIterator',
     'lang.reflect.InvocationHandler'
   );
 
@@ -172,8 +173,7 @@
      */
     #[@test]
     public function allowDoubledInterfaceMethod() {
-      $cl= ClassLoader::getDefault();
-      $newIteratorClass= $cl->defineClass('util.NewIterator', 'interface NewIterator extends XPIterator {}');
+      $newIteratorClass= ClassLoader::defineInterface('util.NewIterator', 'XPIterator');
       
       $this->proxyInstanceFor(array(
         XPClass::forName('util.XPIterator'),
