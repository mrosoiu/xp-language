%{
  uses('xml.Tree', 'xml.Node', 'xml.Comment');
  
  function merge($imported, &$root) {
    foreach ($imported as $id => $child) {
      if (!is_string($id)) continue;                 // Not an ID

      if (!isset($root[$id])) {

        // Not overwritten, copy completely
        $root[$id]= $child;
      } else {

        // Merge
        foreach ($child->attribute as $k => $v) {
          if (isset($root[$id]->attribute[$k])) continue;  // Overridden
          $root[$id]->attribute[$k]= $v;
        }
        if ($child->content && !$root[$id]->content) {
          $root[$id]->content= $child->content;
        }
      }
      merge($child->children, $root[$id]->children);
    }
  }
%}

%token T_WORD 259
%token T_STRING 260
%token T_NUMBER 261
%token T_TEXT 262
%token T_COMMENT 263
%token T_IMPORT 264

%% /* Rules */

start:
		declarations node {
          $$= new Tree(); 
          $$->root= $2;
          
          // Apply imports
          foreach ($1 as $imported) {
            foreach ($imported->root->attribute as $k => $v) {
              if (isset($$->root->attribute[$k])) continue;  // Overridden
              $$->root->attribute[$k]= $v;
            }
            if ($imported->root->content && !$$->root->content) {
              $$->root->content= $imported->root->content;
            }
            
            merge($imported->root->children, $$->root->children);
          }
        } 
	|	node {
          $$= new Tree(); 
          $$->root= $1;
        }
;

declarations:
		declarations declaration {
          $$[]= $2;
        }
	|	declaration { 
          $$= array($1);
        }
;

declaration:
		T_IMPORT T_STRING ';' {
          $self= new self();
          $f= new File(dirname($yyLex->fileName).DIRECTORY_SEPARATOR.$2);
          $$= $self->parse(new CompactXmlLexer(FileUtil::getContents($f), $f->getURI()));
        }
;

node:
		name '(' attributes ')' content body {
          $$= new Node($1[0], $5, $3); 
          $$->children= $6;
          $$->id= $1[1];
        }
	|	name content body { 
          $$= new Node($1[0], $2);
          $$->children= $3;
          $$->id= $1[1];
        }
    |   T_COMMENT {
          $$= new Comment($1);
        }
;

name:
		T_WORD { 
          $$= array($1, NULL);
        }
	|	T_WORD '[' T_WORD ']' {
		  $$= array($1, $3);
        }
;

attributes:
		attributes ',' attribute { 
          $$= array_merge($1, $3); 
        }
	|	attribute { 
          /* $$= $1; */
        }
;

attribute:
		T_WORD '=' T_STRING { 
          $$= array($1 => $3); 
        }
;

content:
		T_TEXT { 
          /* $$= $1; */
        }
	|	/* empty */ { 
          $$= NULL;
        }
;

body:
		'{' children '}' { 
          $$= $2;
        }
	|   ';' { 
          $$= array(); 
        }
;

children:
		children node { 
          $2->id ? $$[$2->id]= $2 : $$[]= $2;
        }
	|   node { 
          $$= $1->id ? array($1->id => $1) : array($1);
        } 
	|   /* empty */ { 
          $$= array(); 
        }
        
%%
