Serialize experiment: README
========================================================================
$Id$

What's this?
------------
This is an implementation of RFC 0006. It provides an API for serializing
and deserializing objects.

So how does it differ from PHP's serialize/unserialize?
-------------------------------------------------------
First of all, only objects implementing the serializable interface may 
be serialized. An exception will be thrown in case one tries to 
serialize any other object. Second, XP's fully qualified class names 
will be preserved. Third, classes are loaded using XPClass::forName()
when deserializing. This prevents instances of type __PHP_Incomplete_Class
from appearing and guarantees the correct class to be loaded. Last but
not least, errors during (de-)serialization will be reported as 
exception, not as warning (and a return type of FALSE).

How can you accomplish serialization of private and protected members?
----------------------------------------------------------------------
Through an evil hack, using the reflection API and knowledge of the 
Zend Engine 2's internals.

Let's have a look at the Serializer class, in specific lines 54 to 59:

  switch ($props[$i]->getModifiers() & (P_PUBLIC | P_PROTECTED | P_PRIVATE)) {
    case P_PUBLIC:    $ref= $props[$i]->name; break;
    case P_PROTECTED: $ref= "\0*\0{$props[$i]->name}"; break;
    case P_PRIVATE:   $ref= "\0{$props[$i]->class}\0{$props[$i]->name}"; break;
  }
  $s.= $this->representationOf($ref).$this->representationOf($var->{$ref});

Private and protected member variables are "mangled" in the Zend Engine 
in the following way:

* Private:   \0<CLASS>\0<NAME>
* Protected: \0*\0<NAME>
  
This prevents them from being directly accessible via $object->member,
but not indirectly, via $object->{$member_name} (as seen above). 
Furthermore, it provides an easy and efficient way to retrieve the 
properties from within the C sourcecode.

DO NOT EVER TRY THIS AT HOME!

What about performance?
-----------------------
This userland implementation is about twice as slow for serialization
(userland: 0.00433 seconds / native: 0.00230 seconds for the example 
script) and about one and a half times slower for deserialization (
userland: 0.00998 seconds / native: 0.00614 seconds). You can try 
for yourself after applying the patch from appendix A.

Note that the benefits of exceptions and the rule that all objects 
must implement the Serializable interface are non-existant.

Further ideas
-------------
* The class should be able to define transient members. Transient member 
  variables should not be saved during object serialization.

* One should be able to optionally pass a classloader to the 
  deserializer.

Appendix A: Using native methods for serialization/deserialization
------------------------------------------------------------------

Index: FileDeserializer.class.php
===================================================================
RCS file: /home/cvs/repositories/xp/experiments/arena/serialize/FileDeserializer.class.php,v
retrieving revision 1.1
diff -u -r1.1 FileDeserializer.class.php
--- FileDeserializer.class.php  28 Mar 2004 15:17:03 -0000      1.1
+++ FileDeserializer.class.php  28 Mar 2004 15:59:19 -0000
@@ -24,6 +24,10 @@
     public function __construct(File $file) {
       $this->file= $file;
     }
+
+    protected function valueOf($string, &$length= 0) {
+      return unserialize($string);
+    }
   
     /**
      * Serialize an object
@@ -38,4 +42,9 @@
        return $this->valueOf($data);
      }
   }
+
+  function loadclass($class) {
+    if (!uses($class)) throw new ClassNotFoundException('Class '.$class.' not found');
+  }
+  ini_set('unserialize_callback_func', 'loadclass');
 ?>
Index: FileSerializer.class.php
===================================================================
RCS file: /home/cvs/repositories/xp/experiments/arena/serialize/FileSerializer.class.php,v
retrieving revision 1.1
diff -u -r1.1 FileSerializer.class.php
--- FileSerializer.class.php    28 Mar 2004 15:17:03 -0000      1.1
+++ FileSerializer.class.php    28 Mar 2004 15:59:19 -0000
@@ -24,6 +24,10 @@
     public function __construct(File $file) {
       $this->file= $file;
     }
+    
+    protected function representationOf($object) {
+      return serialize($object);
+    }
   
     /**
      * Serialize an object

<EOF>
