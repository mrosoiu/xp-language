Index: Zend/zend.h
===================================================================
RCS file: /repository/ZendEngine2/zend.h,v
retrieving revision 1.261
diff -u -r1.261 zend.h
--- Zend/zend.h	5 Sep 2004 22:39:58 -0000	1.261
+++ Zend/zend.h	22 Sep 2004 11:40:00 -0000
@@ -254,6 +254,7 @@
  */
 typedef struct _zval_struct zval;
 typedef struct _zend_class_entry zend_class_entry;
+typedef struct _zend_package_entry zend_package_entry;
 
 typedef struct _zend_object {
 	zend_class_entry *ce;
@@ -343,6 +344,11 @@
 	struct _zend_module_entry *module;
 };
 
+struct _zend_package_entry {
+	char *name;
+	zend_uint name_length;
+};
+
 #include "zend_stream.h"
 typedef struct _zend_utility_functions {
 	void (*error_function)(int type, const char *error_filename, const uint error_lineno, const char *format, va_list args) ZEND_ATTRIBUTE_PTR_FORMAT(printf, 4, 0);
Index: Zend/zend_API.c
===================================================================
RCS file: /repository/ZendEngine2/zend_API.c,v
retrieving revision 1.262
diff -u -r1.262 zend_API.c
--- Zend/zend_API.c	9 Sep 2004 16:51:45 -0000	1.262
+++ Zend/zend_API.c	22 Sep 2004 11:40:00 -0000
@@ -1290,6 +1290,8 @@
 			internal_function->return_reference = ptr->arg_info[0].return_reference;
 		} else {
 			internal_function->arg_info = NULL;
+			internal_function->throws = NULL;
+			internal_function->num_throws = 0;
 			internal_function->num_args = 0;
 			internal_function->required_num_args = 0;
 			internal_function->pass_rest_by_reference = 0;
Index: Zend/zend_compile.c
===================================================================
RCS file: /repository/ZendEngine2/zend_compile.c,v
retrieving revision 1.591
diff -u -r1.591 zend_compile.c
--- Zend/zend_compile.c	16 Sep 2004 00:40:38 -0000	1.591
+++ Zend/zend_compile.c	22 Sep 2004 11:40:02 -0000
@@ -126,6 +126,7 @@
 	zend_stack_init(&CG(object_stack));
 	zend_stack_init(&CG(declare_stack));
 	CG(active_class_entry) = NULL;
+	CG(active_package_entry) = NULL;
 	zend_llist_init(&CG(list_llist), sizeof(list_llist_element), NULL, 0);
 	zend_llist_init(&CG(dimension_llist), sizeof(int), NULL, 0);
 	zend_stack_init(&CG(list_stack));
@@ -435,6 +436,24 @@
 	}
 }
 
+void zend_do_throws(znode *throws_znode TSRMLS_DC)
+{
+	zend_function *fptr = (zend_function *)CG(active_op_array);
+	zend_class_entry **pce;
+
+	MANGLE_CLASS_NAME(throws_znode);
+	if (zend_lookup_class(throws_znode->u.constant.value.str.val, throws_znode->u.constant.value.str.len, &pce TSRMLS_CC) == FAILURE) {
+		zend_error(E_COMPILE_ERROR, "Undefined class '%s' in throws list of %s::%s()", throws_znode->u.constant.value.str.val, CG(active_class_entry)->name, fptr->common.function_name);
+		/* Bails out */
+	}
+
+	fptr->common.throws = (zend_class_entry **) erealloc(fptr->common.throws, sizeof(zend_class_entry *) * (fptr->common.num_throws + 1));
+	fptr->common.throws[fptr->common.num_throws] = *pce;
+	fptr->common.num_throws++;
+	
+	FREE_PNODE(throws_znode);
+} 
+
 static zend_bool opline_is_fetch_this(zend_op *opline TSRMLS_DC)
 {
 	if ((opline->opcode == ZEND_FETCH_W) && (opline->op1.op_type == IS_CONST)
@@ -1149,6 +1168,7 @@
 	cur_arg_info->pass_by_reference = pass_by_reference;
 
 	if (class_type->op_type != IS_UNUSED) {
+		MANGLE_CLASS_NAME(class_type);
 		cur_arg_info->class_name = class_type->u.constant.value.str.val;
 		cur_arg_info->class_name_len = class_type->u.constant.value.str.len;
 		cur_arg_info->allow_null = 0;
@@ -1281,6 +1301,7 @@
 				zval_dtor(&class_name->u.constant);
 				break;
 			default:
+				MANGLE_CLASS_NAME(class_name);
 				opline->op2 = *class_name;
 				break;
 		}
@@ -2442,13 +2463,16 @@
 	zend_op *opline;
 	int doing_inheritance = 0;
 	zend_class_entry *new_class_entry = emalloc(sizeof(zend_class_entry));
-	char *lcname = zend_str_tolower_dup(class_name->u.constant.value.str.val, class_name->u.constant.value.str.len);
+	char *lcname;
 
 	if (CG(active_class_entry)) {
 		zend_error(E_COMPILE_ERROR, "Class declarations may not be nested");
 		return;
 	}
 
+	MANGLE_CLASS_NAME(class_name);
+	lcname = zend_str_tolower_dup(class_name->u.constant.value.str.val, class_name->u.constant.value.str.len);
+ 
 	if (!(strcmp(lcname, "self") && strcmp(lcname, "parent"))) {
 		efree(lcname);
 		zend_error(E_COMPILE_ERROR, "Cannot use '%s' as class name as it is reserved", class_name->u.constant.value.str.val);
@@ -2551,6 +2575,27 @@
 	CG(active_class_entry) = NULL;
 }
 
+void zend_do_begin_package_declaration(znode *package_name TSRMLS_DC)
+{
+   if (strcmp(package_name->u.constant.value.str.val, "main") == 0) {
+	   zend_error(E_COMPILE_ERROR, "Cannot use 'main' as package name as it is reserved");
+   } else {
+	   zend_package_entry *new_package_entry = emalloc(sizeof(zend_package_entry));
+
+	   new_package_entry->name = package_name->u.constant.value.str.val;
+	   new_package_entry->name_length = package_name->u.constant.value.str.len;
+	   zend_str_tolower(new_package_entry->name, new_package_entry->name_length);
+	   CG(active_package_entry) = new_package_entry;
+   }
+}
+
+void zend_do_end_package_declaration(znode *package_name TSRMLS_DC)
+{
+   FREE_PNODE(package_name);
+   efree(CG(active_package_entry));
+   CG(active_package_entry) = NULL;
+}
+ 
 
 void zend_do_implements_interface(znode *interface_znode TSRMLS_DC)
 {
Index: Zend/zend_compile.h
===================================================================
RCS file: /repository/ZendEngine2/zend_compile.h,v
retrieving revision 1.292
diff -u -r1.292 zend_compile.h
--- Zend/zend_compile.h	16 Sep 2004 00:40:38 -0000	1.292
+++ Zend/zend_compile.h	22 Sep 2004 11:40:02 -0000
@@ -45,6 +45,24 @@
         CG(doc_comment) = NULL;  \
         CG(doc_comment_len) = 0; \
     }
+#define MANGLE_MAIN_LEN sizeof("main~") - 1
+#define MANGLE_CLASS_NAME(class_name) \
+   if (strncmp(class_name->u.constant.value.str.val, "main~", MANGLE_MAIN_LEN) == 0) { \
+	   class_name->u.constant.value.str.len -= MANGLE_MAIN_LEN; \
+	   strncpy(class_name->u.constant.value.str.val, class_name->u.constant.value.str.val + MANGLE_MAIN_LEN, class_name->u.constant.value.str.len); \
+	   class_name->u.constant.value.str.val[class_name->u.constant.value.str.len]= 0; \
+   } else { \
+	   if (CG(active_package_entry) && !strchr(class_name->u.constant.value.str.val, '~')) { \
+		   int len= CG(active_package_entry)->name_length + 1 + class_name->u.constant.value.str.len; \
+		   char *tmp= estrndup(class_name->u.constant.value.str.val, class_name->u.constant.value.str.len); \
+		   class_name->u.constant.value.str.val= (char*) erealloc(class_name->u.constant.value.str.val, len + 1); \
+		   strncpy(class_name->u.constant.value.str.val, CG(active_package_entry)->name, CG(active_package_entry)->name_length + 1); \
+		   strncat(class_name->u.constant.value.str.val, "~", sizeof("~")); \
+		   strncat(class_name->u.constant.value.str.val, tmp, class_name->u.constant.value.str.len); \
+		   class_name->u.constant.value.str.len= len; \
+		   efree(tmp); \
+	   } \
+   }
 
 typedef struct _zend_op_array zend_op_array;
 typedef struct _zend_op zend_op;
@@ -164,6 +182,8 @@
 	zend_arg_info *arg_info;
 	zend_bool pass_rest_by_reference;
 	unsigned char return_reference;
+	zend_class_entry **throws;
+	zend_uint num_throws;
 	/* END of common elements */
 
 	zend_uint *refcount;
@@ -215,6 +235,8 @@
 	zend_arg_info *arg_info;
 	zend_bool pass_rest_by_reference;
 	unsigned char return_reference;
+	zend_class_entry **throws;
+	zend_uint num_throws;
 	/* END of common elements */
 
 	void (*handler)(INTERNAL_FUNCTION_PARAMETERS);
@@ -236,6 +258,8 @@
 		zend_arg_info *arg_info;
 		zend_bool pass_rest_by_reference;
 		unsigned char return_reference;
+		zend_class_entry **throws;
+		zend_uint num_throws;
 	} common;
 	
 	zend_op_array op_array;
@@ -412,6 +436,8 @@
 
 void zend_do_begin_class_declaration(znode *class_token, znode *class_name, znode *parent_class_name TSRMLS_DC);
 void zend_do_end_class_declaration(znode *class_token, znode *parent_token TSRMLS_DC);
+void zend_do_begin_package_declaration(znode *package_name TSRMLS_DC);
+void zend_do_end_package_declaration(znode *package_name TSRMLS_DC);
 void zend_do_declare_property(znode *var_name, znode *value, zend_uint access_type TSRMLS_DC);
 void zend_do_declare_implicit_property(TSRMLS_D);
 void zend_do_declare_class_constant(znode *var_name, znode *value TSRMLS_DC);
Index: Zend/zend_globals.h
===================================================================
RCS file: /repository/ZendEngine2/zend_globals.h,v
retrieving revision 1.137
diff -u -r1.137 zend_globals.h
--- Zend/zend_globals.h	23 Aug 2004 20:57:40 -0000	1.137
+++ Zend/zend_globals.h	22 Sep 2004 11:40:04 -0000
@@ -75,6 +75,7 @@
 	zend_stack declare_stack;
 
 	zend_class_entry *active_class_entry;
+	zend_package_entry *active_package_entry;
 
 	/* variables for list() compilation */
 	zend_llist list_llist;
Index: Zend/zend_language_parser.y
===================================================================
RCS file: /repository/ZendEngine2/zend_language_parser.y,v
retrieving revision 1.150
diff -u -r1.150 zend_language_parser.y
--- Zend/zend_language_parser.y	16 Sep 2004 05:43:29 -0000	1.150
+++ Zend/zend_language_parser.y	22 Sep 2004 11:40:04 -0000
@@ -111,6 +111,7 @@
 %token T_TRY
 %token T_CATCH
 %token T_THROW
+%token T_THROWS
 %token T_USE
 %token T_GLOBAL
 %right T_STATIC T_ABSTRACT T_FINAL T_PRIVATE T_PROTECTED T_PUBLIC
@@ -119,9 +120,13 @@
 %token T_ISSET
 %token T_EMPTY
 %token T_CLASS
+%token T_PACKAGE
+%token T_CLASSNAME
 %token T_INTERFACE
 %token T_EXTENDS
 %token T_IMPLEMENTS
+%token T_OPERATOR
+%token T_COMPARE
 %token T_OBJECT_OPERATOR
 %token T_DOUBLE_ARROW
 %token T_LIST
@@ -159,6 +164,7 @@
 		statement
 	|	function_declaration_statement	{ zend_do_early_binding(TSRMLS_C); }
 	|	class_declaration_statement		{ zend_do_early_binding(TSRMLS_C); }
+	|	package_declaration_statement
 ;
 
 
@@ -172,6 +178,7 @@
 		statement
 	|	function_declaration_statement
 	|	class_declaration_statement
+	|	package_declaration_statement
 ;
 
 
@@ -262,6 +269,14 @@
 		unticked_class_declaration_statement	{ zend_do_ticks(TSRMLS_C); }
 ;
 
+class_declaration_statements:
+		class_declaration_statement class_declaration_statements
+	|   /* empty */
+;
+
+package_declaration_statement:
+		unticked_package_declaration_statement  { zend_do_ticks(TSRMLS_C); }
+;
 
 is_reference:
 		/* empty */	{ $$.op_type = ZEND_RETURN_VAL; }
@@ -289,6 +304,16 @@
 			'}' { zend_do_end_class_declaration(&$1, &$2 TSRMLS_CC); }
 ;
 
+unticked_package_declaration_statement:
+		T_PACKAGE T_STRING { zend_do_begin_package_declaration(&$2 TSRMLS_CC); }
+		   '{'
+		   class_declaration_statements
+		   '}' { zend_do_end_package_declaration(&$2 TSRMLS_CC); }
+	|	T_PACKAGE T_CLASSNAME { zend_do_begin_package_declaration(&$2 TSRMLS_CC); }
+		   '{'
+		   class_declaration_statements
+		   '}' { zend_do_end_package_declaration(&$2 TSRMLS_CC); }
+;
 
 class_entry_type:
 		T_CLASS			{  $$.u.constant.value.lval = 0; }
@@ -428,6 +453,7 @@
 optional_class_type:
 		/* empty */		{ $$.op_type = IS_UNUSED; }
 	|	T_STRING		{ $$ = $1; }
+	|	T_CLASSNAME		{ $$ = $1; }
 ;
 
 
@@ -478,9 +504,37 @@
 		variable_modifiers { CG(access_type) = $1.u.constant.value.lval; } class_variable_declaration ';'
 	|	class_constant_declaration ';'
 	|	method_modifiers T_FUNCTION { $2.u.opline_num = CG(zend_lineno); } is_reference T_STRING { zend_do_begin_function_declaration(&$2, &$5, 1, $4.op_type, &$1 TSRMLS_CC); } '(' 
-			parameter_list ')' method_body { zend_do_abstract_method(&$5, &$1, &$10 TSRMLS_CC); zend_do_end_function_declaration(&$2 TSRMLS_CC); }
+			parameter_list ')' throws method_body { zend_do_abstract_method(&$5, &$1, &$11 TSRMLS_CC); zend_do_end_function_declaration(&$2 TSRMLS_CC); }
+	|	method_modifiers T_OPERATOR { $2.u.opline_num = CG(zend_lineno); } is_reference operator_token { zend_do_begin_function_declaration(&$2, &$5, 1, $4.op_type, &$1 TSRMLS_CC); } '(' 
+			parameter_list ')' throws method_body { zend_do_abstract_method(&$5, &$1, &$11 TSRMLS_CC); zend_do_end_function_declaration(&$2 TSRMLS_CC); }
+;
+
+throws:
+		/* empty */
+	|	T_THROWS throws_list
+;
+
+throws_list:
+		throws_class_name 					{ zend_do_throws(&$1 TSRMLS_CC); }
+	|	throws_list ',' throws_class_name	{ zend_do_throws(&$3 TSRMLS_CC); }
+;	
+
+throws_class_name:
+		T_STRING { $$ = $1; }
+	|	T_CLASSNAME { $$ = $1; }
 ;
 
+operator_token:
+		'+'								{ $$.u.constant.value.str.val = estrndup("+", sizeof("+")- 1); $$.u.constant.value.str.len = sizeof("+")- 1; }
+	|	'-'								{ $$.u.constant.value.str.val = estrndup("-", sizeof("-")- 1); $$.u.constant.value.str.len = sizeof("-")- 1; }
+	|	'*'								{ $$.u.constant.value.str.val = estrndup("*", sizeof("*")- 1); $$.u.constant.value.str.len = sizeof("*")- 1; }
+	|	'/'								{ $$.u.constant.value.str.val = estrndup("/", sizeof("/")- 1); $$.u.constant.value.str.len = sizeof("/")- 1; }
+	|	'%'								{ $$.u.constant.value.str.val = estrndup("%", sizeof("%")- 1); $$.u.constant.value.str.len = sizeof("%")- 1; }
+	|	'!'								{ $$.u.constant.value.str.val = estrndup("!", sizeof("!")- 1); $$.u.constant.value.str.len = sizeof("%")- 1; }
+	|	T_INC							{ $$.u.constant.value.str.val = estrndup("++", sizeof("++")- 1); $$.u.constant.value.str.len = sizeof("++")- 1; }
+	|	T_DEC							{ $$.u.constant.value.str.val = estrndup("--", sizeof("--")- 1); $$.u.constant.value.str.len = sizeof("--")- 1; }
+	|	T_COMPARE						{ $$.u.constant.value.str.val = estrndup("compare", sizeof("compare")- 1); $$.u.constant.value.str.len = sizeof("compare")- 1; }
+;
 
 method_body:
 		';' /* abstract method */		{ $$.u.constant.value.lval = ZEND_ACC_ABSTRACT; }
@@ -606,6 +660,7 @@
 	|	'@' { zend_do_begin_silence(&$1 TSRMLS_CC); } expr { zend_do_end_silence(&$1 TSRMLS_CC); $$ = $3; }
 	|	scalar				{ $$ = $1; }
 	|	T_ARRAY '(' array_pair_list ')' { $$ = $3; }
+	|	'[' array_pair_list ']' { $$ = $2; }
 	|	'`' encaps_list '`'		{ zend_do_shell_exec(&$$, &$2 TSRMLS_CC); }
 	|	T_PRINT expr  { zend_do_print(&$$, &$2 TSRMLS_CC); }
 ;
@@ -627,10 +682,12 @@
 
 fully_qualified_class_name:
 		T_STRING { zend_do_fetch_class(&$$, &$1 TSRMLS_CC); }
+	|	T_CLASSNAME { zend_do_fetch_class(&$$, &$1 TSRMLS_CC); }
 ;
 
 class_name_reference:
 		T_STRING				{ zend_do_fetch_class(&$$, &$1 TSRMLS_CC); }
+	|	T_CLASSNAME				{ zend_do_fetch_class(&$$, &$1 TSRMLS_CC); }
 	|	dynamic_class_name_reference	{ zend_do_end_variable_parse(BP_VAR_R, 0 TSRMLS_CC); zend_do_fetch_class(&$$, &$1 TSRMLS_CC); }
 ;
 
@@ -684,6 +741,7 @@
 	|	'+' static_scalar	{ $$ = $2; }
 	|	'-' static_scalar	{ zval minus_one;  minus_one.type = IS_LONG; minus_one.value.lval = -1;  mul_function(&$2.u.constant, &$2.u.constant, &minus_one TSRMLS_CC);  $$ = $2; } 
 	|	T_ARRAY '(' static_array_pair_list ')' { $$ = $3; $$.u.constant.type = IS_CONSTANT_ARRAY; }
+	|	'[' static_array_pair_list ']' { $$ = $2; $$.u.constant.type = IS_CONSTANT_ARRAY; }
 	|	static_class_constant { $$ = $1; }
 ;
 
Index: Zend/zend_language_scanner.l
===================================================================
RCS file: /repository/ZendEngine2/zend_language_scanner.l,v
retrieving revision 1.115
diff -u -r1.115 zend_language_scanner.l
--- Zend/zend_language_scanner.l	2 Aug 2004 16:38:09 -0000	1.115
+++ Zend/zend_language_scanner.l	22 Sep 2004 11:40:05 -0000
@@ -794,6 +794,10 @@
 	return T_THROW;
 }
 
+<ST_IN_SCRIPTING>"throws" {
+	return T_THROWS;
+}
+
 <ST_IN_SCRIPTING>"if" {
 	return T_IF;
 }
@@ -890,6 +894,10 @@
 	return T_CLASS;
 }
 
+<ST_IN_SCRIPTING>"package" {
+	return T_PACKAGE;
+}
+
 <ST_IN_SCRIPTING>"interface" {
 	return T_INTERFACE;
 }
@@ -902,6 +910,14 @@
 	return T_IMPLEMENTS;
 }
 
+<ST_IN_SCRIPTING>"operator" {
+	return T_OPERATOR;
+}
+
+<ST_IN_SCRIPTING>"compare" {
+	return T_COMPARE;
+}
+
 <ST_IN_SCRIPTING,ST_DOUBLE_QUOTES,ST_BACKQUOTE,ST_HEREDOC>"->" {
 	yy_push_state(ST_LOOKING_FOR_PROPERTY TSRMLS_CC);
 	return T_OBJECT_OPERATOR;
@@ -1395,6 +1411,12 @@
 	return T_STRING;
 }
 
+<ST_IN_SCRIPTING>({LABEL}"~")+{LABEL} {
+	zend_copy_value(zendlval, yytext, yyleng);
+	zendlval->type = IS_STRING;
+	return T_CLASSNAME;
+}
+
 <ST_DOUBLE_QUOTES,ST_BACKQUOTE,ST_HEREDOC>{LABEL} {
 	zend_copy_value(zendlval, yytext, yyleng);
 	zendlval->type = IS_STRING;
Index: Zend/zend_object_handlers.c
===================================================================
RCS file: /repository/ZendEngine2/zend_object_handlers.c,v
retrieving revision 1.104
diff -u -r1.104 zend_object_handlers.c
--- Zend/zend_object_handlers.c	22 Jul 2004 11:54:27 -0000	1.104
+++ Zend/zend_object_handlers.c	22 Sep 2004 11:40:06 -0000
@@ -684,6 +684,8 @@
 			call_user_call->handler = zend_std_call_user_call;
 			call_user_call->arg_info = NULL;
 			call_user_call->num_args = 0;
+			call_user_call->throws = NULL;
+			call_user_call->num_throws = 0;
 			call_user_call->scope = zobj->ce;
 			call_user_call->fn_flags = 0;
 			call_user_call->function_name = estrndup(method_name, method_len);
Index: Zend/zend_opcode.c
===================================================================
RCS file: /repository/ZendEngine2/zend_opcode.c,v
retrieving revision 1.107
diff -u -r1.107 zend_opcode.c
--- Zend/zend_opcode.c	9 Sep 2004 16:47:22 -0000	1.107
+++ Zend/zend_opcode.c	22 Sep 2004 11:40:06 -0000
@@ -72,6 +72,9 @@
 	op_array->doc_comment = NULL;
 	op_array->doc_comment_len = 0;
 
+	op_array->num_throws = 0;
+	op_array->throws = NULL;
+
 	op_array->arg_info = NULL;
 	op_array->num_args = 0;
 	op_array->required_num_args = 0;
@@ -248,6 +251,9 @@
 		}
 		efree(op_array->arg_info);
 	}
+	if (op_array->num_throws > 0 && op_array->throws) {
+        efree(op_array->throws);
+	}
 }
 
 void init_op(zend_op *op TSRMLS_DC)
Index: Zend/zend_operators.c
===================================================================
RCS file: /repository/ZendEngine2/zend_operators.c,v
retrieving revision 1.196
diff -u -r1.196 zend_operators.c
--- Zend/zend_operators.c	11 Sep 2004 14:22:35 -0000	1.196
+++ Zend/zend_operators.c	22 Sep 2004 11:40:06 -0000
@@ -101,6 +101,55 @@
 	return result;
 }
 
+static inline int call_operator_overloading(char *operator, int operator_len, zval *result, zval *op1, zval *op2, int bail TSRMLS_DC)
+{
+	zend_function *mptr;
+	zval *rval, **params[2];
+	zend_fcall_info fci;
+	zend_fcall_info_cache fcc;
+
+	if (zend_hash_find(&Z_OBJCE_P(op1)->function_table, operator, operator_len, (void **) &mptr) == FAILURE) {
+		if (bail) {
+			zend_error(E_ERROR, "Class %s does not support overloading of the %s operator", Z_OBJCE_P(op1)->name, operator);
+			/* Never returns */
+		}
+		return FAILURE;
+	}
+
+	params[0] = &op1;
+	params[1] = &op2;
+
+	/* Call operator method statically with operands and take its return value
+	 * as return value for the operation.
+	 */
+	fci.size = sizeof(fci);
+	fci.function_table = NULL;
+	fci.function_name = NULL;
+	fci.symbol_table = NULL;
+	fci.object_pp = NULL;
+	fci.retval_ptr_ptr = &rval;
+	fci.param_count = op2 ? 2 : 1;
+	fci.params = params;
+	fci.no_separation = 1;
+
+	fcc.initialized = 1;
+	fcc.function_handler = mptr;
+	fcc.calling_scope = NULL;
+	fcc.object_pp = NULL;
+
+	if (zend_call_function(&fci, &fcc TSRMLS_CC) == FAILURE) {
+		zend_error(E_ERROR, "Could not call operator method %s::%s", Z_OBJCE_P(op1)->name, operator);
+		return FAILURE;
+	}
+
+	if (rval) {
+		*result = *rval;
+    	zval_copy_ctor(result);
+		zval_ptr_dtor(&rval);
+	}
+	return SUCCESS;
+}
+
 
 ZEND_API void convert_scalar_to_number(zval *op TSRMLS_DC)
 {
@@ -781,6 +830,9 @@
 		result->value.dval = op1->value.dval + op2->value.dval;
 		return SUCCESS;
 	}
+	if (op1->type == IS_OBJECT) {
+		return call_operator_overloading("+", sizeof("+"), result, op1, op2, 1 TSRMLS_CC);
+	}
 	zend_error(E_ERROR, "Unsupported operand types");
 	return FAILURE;				/* unknown datatype */
 }
@@ -821,6 +873,9 @@
 		result->value.dval = op1->value.dval - op2->value.dval;
 		return SUCCESS;
 	}
+	if (op1->type == IS_OBJECT) {
+		return call_operator_overloading("-", sizeof("-"), result, op1, op2, 1 TSRMLS_CC);
+	}
 	zend_error(E_ERROR, "Unsupported operand types");
 	return FAILURE;				/* unknown datatype */
 }
@@ -853,6 +908,9 @@
 		result->value.dval = op1->value.dval * op2->value.dval;
 		return SUCCESS;
 	}
+	if (op1->type == IS_OBJECT) {
+		return call_operator_overloading("*", sizeof("*"), result, op1, op2, 1 TSRMLS_CC);
+	}
 	zend_error(E_ERROR, "Unsupported operand types");
 	return FAILURE;				/* unknown datatype */
 }
@@ -892,6 +950,9 @@
 		result->value.dval = op1->value.dval / op2->value.dval;
 		return SUCCESS;
 	}
+	if (op1->type == IS_OBJECT) {
+		return call_operator_overloading("/", sizeof("/"), result, op1, op2, 1 TSRMLS_CC);
+	}
 	zend_error(E_ERROR, "Unsupported operand types");
 	return FAILURE;				/* unknown datatype */
 }
@@ -900,6 +961,10 @@
 ZEND_API int mod_function(zval *result, zval *op1, zval *op2 TSRMLS_DC)
 {
 	zval op1_copy, op2_copy;
+
+	if (op1->type == IS_OBJECT) {
+		return call_operator_overloading("%", sizeof("%"), result, op1, op2, 1 TSRMLS_CC);
+	}
 	
 	zendi_convert_to_long(op1, op1_copy, result);
 	zendi_convert_to_long(op2, op2_copy, result);
@@ -937,7 +1002,10 @@
 ZEND_API int boolean_not_function(zval *result, zval *op1 TSRMLS_DC)
 {
 	zval op1_copy;
-	
+
+	if (Z_TYPE_P(op1) == IS_OBJECT) {
+		return call_operator_overloading("!", sizeof("!"), result, op1, NULL, 1 TSRMLS_CC);	
+	}
 	zendi_convert_to_boolean(op1, op1_copy, result);
 
 	result->type = IS_BOOL;
@@ -1331,6 +1399,10 @@
 	}
 
 	if (op1->type==IS_OBJECT && op2->type==IS_OBJECT) {
+		if (SUCCESS == call_operator_overloading("compare", sizeof("compare"), result, op1, op2, 0 TSRMLS_CC)) {
+			convert_to_long(result);
+			COMPARE_RETURN_AND_FREE(SUCCESS);
+        }
 		/* If the handlers array is not identical, fall through
 		 * and perform get() or cast() if implemented
 		 */
@@ -1371,13 +1443,19 @@
 		COMPARE_RETURN_AND_FREE(SUCCESS);
 	}
 	if (op1->type==IS_OBJECT) {
-		result->value.lval = 1;
-		result->type = IS_LONG;
+		/* $object == NULL*/
+		if (FAILURE == call_operator_overloading("compare", sizeof("compare"), result, op1, op2, 0 TSRMLS_CC)) {
+			result->value.lval = 1;
+			result->type = IS_LONG;
+		}
 		COMPARE_RETURN_AND_FREE(SUCCESS);
 	}
 	if (op2->type==IS_OBJECT) {
-		result->value.lval = -1;
-		result->type = IS_LONG;
+		/* NULL == $object */
+		if (FAILURE == call_operator_overloading("compare", sizeof("compare"), result, op2, op1, 0 TSRMLS_CC)) {
+			result->value.lval = -1;
+			result->type = IS_LONG;
+		}
 		COMPARE_RETURN_AND_FREE(SUCCESS);
 	}
 
@@ -1713,6 +1791,12 @@
 				}
 			}
 			break;
+		case IS_OBJECT: {
+				TSRMLS_FETCH();
+			
+				return call_operator_overloading("++", sizeof("++"), op1, op1, NULL, 1 TSRMLS_CC);
+			}
+			break;
 		default:
 			return FAILURE;
 	}
@@ -1762,6 +1846,12 @@
 					break;
 			}
 			break;
+		case IS_OBJECT: {
+				TSRMLS_FETCH();
+			
+				return call_operator_overloading("--", sizeof("--"), op1, op1, NULL, 1 TSRMLS_CC);
+			}
+			break;
 		default:
 			return FAILURE;
 	}
Index: Zend/zend_reflection_api.c
===================================================================
RCS file: /repository/ZendEngine2/zend_reflection_api.c,v
retrieving revision 1.125
diff -u -r1.125 zend_reflection_api.c
--- Zend/zend_reflection_api.c	19 Sep 2004 11:54:08 -0000	1.125
+++ Zend/zend_reflection_api.c	22 Sep 2004 11:40:06 -0000
@@ -630,7 +630,18 @@
 	if (fptr->type == ZEND_USER_FUNCTION && fptr->op_array.return_reference) {
 		string_printf(str, "&");
 	}
-	string_printf(str, "%s ] {\n", fptr->common.function_name);
+	string_printf(str, "%s ]", fptr->common.function_name);
+ 
+ 	if (fptr->common.num_throws) {
+		zend_uint i;
+
+		string_printf(str, " throws %s", fptr->common.throws[0]->name);
+		for (i = 1; i < fptr->common.num_throws; ++i) {
+			string_printf(str, ", %s", fptr->common.throws[i]->name);
+		}
+	}
+	string_write(str, " {\n", sizeof(" {\n") - 1);
+    
 	/* The information where a function is declared is only available for user classes */
 	if (fptr->type == ZEND_USER_FUNCTION) {
 		string_printf(str, "%s  @@ %s %d - %d\n", indent, 
@@ -1431,7 +1442,7 @@
 }
 /* }}} */
 
-/* {{{ proto public ReflectionParameter[] Reflection_Function::getParameters()
+/* {{{ proto public ReflectionParameter[] ReflectionFunction::getParameters()
    Returns an array of parameter objects for this function */
 ZEND_METHOD(reflection_function, getParameters)
 {
@@ -1458,6 +1469,32 @@
 }
 /* }}} */
 
+/* {{{ proto public ReflectionClass[] ReflectionFunction::getExceptionTypes()
+   Returns an array of interfaces this class implements */
+ZEND_METHOD(reflection_function, getExceptionTypes)
+{
+	reflection_object *intern;
+	zend_function *fptr;
+
+	METHOD_NOTSTATIC_NUMPARAMS(0);
+	GET_REFLECTION_OBJECT_PTR(fptr);
+
+	/* Return an empty array if this class implements no interfaces */
+	array_init(return_value);
+
+	if (fptr->common.num_throws) {
+		zend_uint i;
+
+	   	for (i=0; i < fptr->common.num_throws; i++) {
+			zval *throws;
+			ALLOC_ZVAL(throws);
+			reflection_class_factory(fptr->common.throws[i], throws TSRMLS_CC);
+			add_next_index_zval(return_value, throws);
+		}
+	}
+}
+/* }}} */
+
 /* {{{ proto public static mixed ReflectionParameter::export(mixed function, mixed parameter, [, bool return]) throws ReflectionException
    Exports a reflection object. Returns the output if TRUE is specified for return, printing it otherwise. */
 ZEND_METHOD(reflection_parameter, export)
@@ -3408,6 +3445,7 @@
 	ZEND_ME(reflection_function, invoke, NULL, 0)
 	ZEND_ME(reflection_function, returnsReference, NULL, 0)
 	ZEND_ME(reflection_function, getParameters, NULL, 0)
+	ZEND_ME(reflection_function, getExceptionTypes, NULL, 0)
 	ZEND_ME(reflection_function, getNumberOfParameters, NULL, 0)
 	ZEND_ME(reflection_function, getNumberOfRequiredParameters, NULL, 0)
 	{NULL, NULL, NULL}
