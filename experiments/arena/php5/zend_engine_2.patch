Index: Zend/Makefile.am
===================================================================
RCS file: /repository/ZendEngine2/Makefile.am,v
retrieving revision 1.57
diff -u -r1.57 Makefile.am
--- Zend/Makefile.am	21 Feb 2005 15:10:19 -0000	1.57
+++ Zend/Makefile.am	11 Jun 2005 23:01:46 -0000
@@ -17,7 +17,7 @@
 	zend_objects_API.c zend_ts_hash.c zend_stream.c zend_mm.c \
 	zend_default_classes.c zend_reflection_api.c \
 	zend_iterators.c zend_interfaces.c zend_exceptions.c \
-	zend_strtod.c zend_multibyte.c
+	zend_strtod.c zend_multibyte.c zend_enumerations.c
 
 libZend_la_LDFLAGS =
 libZend_la_LIBADD = @ZEND_EXTRA_LIBS@
Index: Zend/zend.h
===================================================================
RCS file: /repository/ZendEngine2/zend.h,v
retrieving revision 1.274
diff -u -r1.274 zend.h
--- Zend/zend.h	7 Mar 2005 22:23:13 -0000	1.274
+++ Zend/zend.h	11 Jun 2005 23:01:48 -0000
@@ -256,6 +256,8 @@
  */
 typedef struct _zval_struct zval;
 typedef struct _zend_class_entry zend_class_entry;
+typedef struct _zend_package_entry zend_package_entry;
+typedef struct _zend_annotation zend_annotation;
 
 typedef struct _zend_object {
 	zend_class_entry *ce;
@@ -322,6 +324,7 @@
 	HashTable default_properties;
 	HashTable properties_info;
 	HashTable *static_members;
+	HashTable *annotations;
 	HashTable constants_table;
 	struct _zend_function_entry *builtin_functions;
 
@@ -357,6 +360,17 @@
 	struct _zend_module_entry *module;
 };
 
+struct _zend_package_entry {
+	char *name;
+	zend_uint name_length;
+};
+
+struct _zend_annotation {
+	char *name;
+	zend_uint name_length;
+	zval *value;
+};
+
 #include "zend_stream.h"
 typedef struct _zend_utility_functions {
 	void (*error_function)(int type, const char *error_filename, const uint error_lineno, const char *format, va_list args) ZEND_ATTRIBUTE_PTR_FORMAT(printf, 4, 0);
Index: Zend/zend_API.c
===================================================================
RCS file: /repository/ZendEngine2/zend_API.c,v
retrieving revision 1.280
diff -u -r1.280 zend_API.c
--- Zend/zend_API.c	16 Mar 2005 04:18:42 -0000	1.280
+++ Zend/zend_API.c	11 Jun 2005 23:01:48 -0000
@@ -1319,6 +1319,9 @@
 			internal_function->return_reference = ptr->arg_info[0].return_reference;
 		} else {
 			internal_function->arg_info = NULL;
+			internal_function->throws = NULL;
+			internal_function->num_throws = 0;
+			internal_function->annotations = NULL;
 			internal_function->num_args = 0;
 			internal_function->required_num_args = 0;
 			internal_function->pass_rest_by_reference = 0;
Index: Zend/zend_builtin_functions.c
===================================================================
RCS file: /repository/ZendEngine2/zend_builtin_functions.c,v
retrieving revision 1.261
diff -u -r1.261 zend_builtin_functions.c
--- Zend/zend_builtin_functions.c	14 Mar 2005 09:21:04 -0000	1.261
+++ Zend/zend_builtin_functions.c	11 Jun 2005 23:01:49 -0000
@@ -672,7 +672,6 @@
    Returns true if the object is of this class or has this class as one of its parents */
 ZEND_FUNCTION(is_a)
 {
-	zend_error(E_STRICT, "is_a(): Deprecated. Please use the instanceof operator");
 	is_a_impl(INTERNAL_FUNCTION_PARAM_PASSTHRU, 0);
 }
 /* }}} */
@@ -1213,45 +1212,80 @@
 	zend_uint mask = va_arg(args, zend_uint);
 	zend_uint comply = va_arg(args, zend_uint);
 	zend_uint comply_mask = (comply)? mask:0;
+	char *package = va_arg(args, char *);
+	int package_len = va_arg(args, int);
 	zend_class_entry *ce  = *pce;
 
 	if ((hash_key->nKeyLength==0 || hash_key->arKey[0]!=0)
-		&& (comply_mask == (ce->ce_flags & mask))) {
+		&& (comply_mask == (ce->ce_flags & mask))
+		&& (package ? 0 == memcmp(package, hash_key->arKey, MIN(hash_key->nKeyLength, package_len)) : 1)) {
 		add_next_index_stringl(array, ce->name, ce->name_length, 1);
 	}
 	return ZEND_HASH_APPLY_KEEP;
 }
 
 
-/* {{{ proto array get_declared_classes()
+/* {{{ proto array get_declared_classes([string package])
    Returns an array of all declared classes. */
 ZEND_FUNCTION(get_declared_classes)
 {
 	zend_uint mask = ZEND_ACC_INTERFACE;
 	zend_uint comply = 0;
+	char *package = NULL;
+	char *lc_name = NULL;
+	int package_len;
 
-	if (ZEND_NUM_ARGS() != 0) {
-		ZEND_WRONG_PARAM_COUNT();
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "|s", &package, &package_len) == FAILURE) {
+		return;
+	}
+
+	/* Create lowercase package name and concatenate a "~" */
+	if (package) {
+		package_len++;
+		lc_name = do_alloca(package_len + 1);
+		zend_str_tolower_copy(lc_name, package, package_len);
+		lc_name[package_len - 1]= '~';
+		lc_name[package_len]= 0;
 	}
 
 	array_init(return_value);
-	zend_hash_apply_with_arguments(EG(class_table), (apply_func_args_t) copy_class_or_interface_name, 3, return_value, mask, comply);
+	zend_hash_apply_with_arguments(EG(class_table), (apply_func_args_t) copy_class_or_interface_name, 5, return_value, mask, comply, lc_name, package_len);
+
+	if (lc_name) {
+		free_alloca(lc_name);
+	}
 }
 /* }}} */
 
-/* {{{ proto array get_declared_interfaces()
+/* {{{ proto array get_declared_interfaces([string package])
    Returns an array of all declared interfaces. */
 ZEND_FUNCTION(get_declared_interfaces)
 {
 	zend_uint mask = ZEND_ACC_INTERFACE;
 	zend_uint comply = 1;
-	
-	if (ZEND_NUM_ARGS() != 0) {
-		ZEND_WRONG_PARAM_COUNT();
+	char *package = NULL;
+	char *lc_name = NULL;
+	int package_len;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "|s", &package, &package_len) == FAILURE) {
+		return;
+	}
+
+	/* Create lowercase package name and concatenate a "~" */
+	if (package) {
+		package_len++;
+		lc_name = do_alloca(package_len + 1);
+		zend_str_tolower_copy(lc_name, package, package_len);
+		lc_name[package_len - 1]= '~';
+		lc_name[package_len]= 0;
 	}
 
 	array_init(return_value);
-	zend_hash_apply_with_arguments(EG(class_table), (apply_func_args_t) copy_class_or_interface_name, 3, return_value, mask, comply);
+	zend_hash_apply_with_arguments(EG(class_table), (apply_func_args_t) copy_class_or_interface_name, 5, return_value, mask, comply, lc_name, package_len);
+
+	if (lc_name) {
+		free_alloca(lc_name);
+	}
 }
 /* }}} */
 
Index: Zend/zend_compile.c
===================================================================
RCS file: /repository/ZendEngine2/zend_compile.c,v
retrieving revision 1.616
diff -u -r1.616 zend_compile.c
--- Zend/zend_compile.c	10 Mar 2005 13:20:25 -0000	1.616
+++ Zend/zend_compile.c	11 Jun 2005 23:01:51 -0000
@@ -26,6 +26,7 @@
 #include "zend_llist.h"
 #include "zend_API.h"
 #include "zend_fast_cache.h"
+#include "zend_enumerations.h"
 
 #ifdef ZEND_MULTIBYTE
 #include "zend_multibyte.h"
@@ -116,6 +117,22 @@
 	CG(declarables).ticks.value.lval = 0;
 }
 
+static inline void copy_annotation_stack(HashTable **ht, int alloc TSRMLS_DC) 
+{
+	if (!zend_stack_is_empty(&CG(annotation_stack))) {
+		zend_annotation *annotation;
+
+		if (alloc) {
+			ALLOC_HASHTABLE(*ht);
+			zend_hash_init(*ht, zend_stack_count(&CG(annotation_stack)), NULL, ZVAL_PTR_DTOR, 0);
+		}
+		while (zend_stack_top(&CG(annotation_stack), (void **) &annotation) == SUCCESS) {
+			zend_hash_update(*ht, annotation->name, annotation->name_length + 1, &annotation->value, sizeof(zval *), NULL);
+			efree(annotation->name);
+			zend_stack_del_top(&CG(annotation_stack));
+		}
+	}
+}
 
 void zend_init_compiler_data_structures(TSRMLS_D)
 {
@@ -125,7 +142,10 @@
 	zend_stack_init(&CG(foreach_copy_stack));
 	zend_stack_init(&CG(object_stack));
 	zend_stack_init(&CG(declare_stack));
+	zend_stack_init(&CG(annotation_stack));
+	zend_stack_init(&CG(class_stack));
 	CG(active_class_entry) = NULL;
+	CG(active_package_entry) = NULL;
 	zend_llist_init(&CG(list_llist), sizeof(list_llist_element), NULL, 0);
 	zend_llist_init(&CG(dimension_llist), sizeof(int), NULL, 0);
 	zend_stack_init(&CG(list_stack));
@@ -164,6 +184,8 @@
 	zend_stack_destroy(&CG(foreach_copy_stack));
 	zend_stack_destroy(&CG(object_stack));
 	zend_stack_destroy(&CG(declare_stack));
+	zend_stack_destroy(&CG(annotation_stack));
+	zend_stack_destroy(&CG(class_stack));
 	zend_stack_destroy(&CG(list_stack));
 	zend_hash_destroy(&CG(filenames_table));
 	zend_llist_destroy(&CG(open_files));
@@ -508,6 +530,122 @@
 	}
 }
 
+void zend_do_throws(znode *throws_znode TSRMLS_DC)
+{
+	zend_function *fptr = (zend_function *)CG(active_op_array);
+
+	MANGLE_CLASS_NAME(throws_znode);
+
+	fptr->common.throws = (char **) erealloc(fptr->common.throws, sizeof(char *) * (fptr->common.num_throws + 1));
+	fptr->common.throws[fptr->common.num_throws] = estrndup(throws_znode->u.constant.value.str.val, throws_znode->u.constant.value.str.len);
+	fptr->common.num_throws++;
+	
+	FREE_PNODE(throws_znode);
+} 
+
+void zend_do_annotation(znode *name, znode *value, int type TSRMLS_DC)
+{
+	zend_annotation annotation;
+
+	annotation.name = estrndup(name->u.constant.value.str.val, name->u.constant.value.str.len);
+	annotation.name_length = name->u.constant.value.str.len;
+	FREE_PNODE(name);
+	ALLOC_ZVAL(annotation.value);
+	if (value) {
+		*annotation.value = value->u.constant;
+	} else {
+		INIT_PZVAL(annotation.value);
+		if (type == IS_ARRAY) {
+			array_init(annotation.value);
+		} else {
+			annotation.value->type = type;
+		}
+	}
+	zend_stack_push(&CG(annotation_stack), (void *) &annotation, sizeof(annotation));
+}
+
+void zend_do_annotation_define(znode *define, znode *value TSRMLS_DC)
+{
+	zend_annotation *annotation;
+	zval *element;
+
+	ALLOC_ZVAL(element);
+	if (value) {
+		*element = value->u.constant;
+	} else {
+		INIT_PZVAL(element);
+		Z_TYPE_P(element)= IS_NULL;
+	}
+
+	zend_stack_top(&CG(annotation_stack), (void **) &annotation);
+	zend_hash_update(Z_ARRVAL_P(annotation->value), define->u.constant.value.str.val, define->u.constant.value.str.len+1, &element, sizeof(zval *), NULL);
+	FREE_PNODE(define);
+}
+
+void zend_do_import(znode *classname, znode *alias TSRMLS_DC)
+{
+	zend_op *opline = get_next_op(CG(active_op_array) TSRMLS_CC);
+
+	opline->opcode = ZEND_IMPORT;
+	opline->op1 = *classname;
+	if (!alias) {
+		SET_UNUSED(opline->op2);
+	    if (CG(active_package_entry)) {
+			opline->op2.u.constant.type = IS_STRING;
+			opline->op2.u.constant.value.str.val = estrndup(CG(active_package_entry)->name, CG(active_package_entry)->name_length);
+			opline->op2.u.constant.value.str.len = CG(active_package_entry)->name_length;
+			opline->op2.u.constant.refcount = 1;
+		} else {
+			opline->op2.u.constant.type = IS_NULL;
+		}
+	} else {
+		if (alias->op_type == IS_CONST) {
+			MANGLE_CLASS_NAME(alias);
+		}
+		opline->op2 = *alias;
+	}
+	opline->result.u.EA.type |= EXT_TYPE_UNUSED;
+} 
+
+void zend_import_class(zend_class_entry *ce, char *alias_name, int alias_len TSRMLS_DC)
+{
+	zend_class_entry **pce = NULL;
+
+	/* FIXME: Forbid importing internal classes until we know what causes the 
+	 * segfault in shutdown.
+	 */
+	if (ce->type == ZEND_INTERNAL_CLASS) {
+		efree(alias_name);
+		zend_error(E_COMPILE_ERROR, "Cannot import internal class %s", ce->name);
+	}
+    
+	/* Check if we previously imported this class. If so, ignore */
+	if (zend_hash_find(CG(class_table), alias_name, alias_len+ 1, (void **) &pce) == SUCCESS) {
+		if (*pce == ce) {
+			efree(alias_name);
+			return;
+		}
+		if ((*pce)->type == ZEND_USER_CLASS) {
+			efree(alias_name);
+			zend_error(E_COMPILE_ERROR, "Cannot import class %s as class %s (declared in %s on line %d)", ce->name, (*pce)->name, (*pce)->filename, (*pce)->line_start);
+		} else {
+			efree(alias_name);
+			zend_error(E_COMPILE_ERROR, "Cannot import class %s as class %s (internally declared)", ce->name, (*pce)->name);
+		}
+		/* Bails out */
+	}
+
+	ce->refcount++;
+	if (zend_hash_add(CG(class_table), alias_name, alias_len+ 1, &ce, sizeof(zend_class_entry *), NULL) == FAILURE) {
+		ce->refcount--;
+		efree(alias_name);
+		zend_error(E_CORE_ERROR, "Cannot add class %s to the class table\n", ce->name);
+		/* Bails out */
+	}
+
+	efree(alias_name);
+}
+
 static zend_bool opline_is_fetch_this(zend_op *opline TSRMLS_DC)
 {
 	if ((opline->opcode == ZEND_FETCH_W) && (opline->op1.op_type == IS_CONST)
@@ -1038,6 +1176,9 @@
 
 	op_array.line_start = zend_get_compiled_lineno(TSRMLS_C);
 
+	/* Copy annotations stack to annotation list */
+	copy_annotation_stack(&op_array.annotations, 1 TSRMLS_CC);
+
 	if (is_method) {
 		char *short_class_name = CG(active_class_entry)->name;
 		int short_class_name_length = CG(active_class_entry)->name_length;
@@ -1185,7 +1326,6 @@
 	CG(active_op_array)->line_end = zend_get_compiled_lineno(TSRMLS_C);
 	CG(active_op_array) = function_token->u.op_array;
 
-
 	/* Pop the switch and foreach seperators */
 	zend_stack_del_top(&CG(switch_cond_stack));
 	zend_stack_del_top(&CG(foreach_copy_stack));
@@ -1215,9 +1355,10 @@
 	cur_arg_info->pass_by_reference = pass_by_reference;
 
 	if (class_type->op_type != IS_UNUSED) {
+		MANGLE_CLASS_NAME(class_type);
 		cur_arg_info->class_name = class_type->u.constant.value.str.val;
 		cur_arg_info->class_name_len = class_type->u.constant.value.str.len;
-		cur_arg_info->allow_null = 0;
+		cur_arg_info->allow_null = (initialization != NULL);
 	} else {
 		cur_arg_info->class_name = NULL;
 		cur_arg_info->class_name_len = 0;
@@ -1337,7 +1478,7 @@
 	CG(catch_begin) = fetch_class_op_number;
 	if (class_name->op_type == IS_CONST) {
 		int fetch_type;
-
+		
 		fetch_type = zend_get_class_fetch_type(class_name->u.constant.value.str.val, class_name->u.constant.value.str.len);
 		switch (fetch_type) {
 			case ZEND_FETCH_CLASS_SELF:
@@ -1347,6 +1488,7 @@
 				zval_dtor(&class_name->u.constant);
 				break;
 			default:
+				MANGLE_CLASS_NAME(class_name);
 				opline->op2 = *class_name;
 				break;
 		}
@@ -1355,6 +1497,7 @@
 	}
 	opline->result.u.var = get_temporary_variable(CG(active_op_array));
 	opline->result.op_type = IS_CONST; /* FIXME: Hack so that INIT_FCALL_BY_NAME still knows this is a class */
+
 	*result = opline->result;
 }
 
@@ -1385,7 +1528,7 @@
 	opline->opcode = ZEND_INIT_STATIC_METHOD_CALL;
 	opline->op1 = *class_name;
 	opline->op2 = *method_name;
-
+	
 	if (opline->op2.op_type == IS_CONST) {
 		if ((sizeof(ZEND_CONSTRUCTOR_FUNC_NAME)-1) == Z_STRLEN(opline->op2.u.constant) &&
 		    memcmp(Z_STRVAL(opline->op2.u.constant), ZEND_CONSTRUCTOR_FUNC_NAME, sizeof(ZEND_CONSTRUCTOR_FUNC_NAME)-1) == 0) {
@@ -1861,7 +2004,8 @@
 		return 1; /* method doesn't exist in child, copy from parent */
 	}
 
-	if (parent->common.fn_flags & ZEND_ACC_ABSTRACT
+	if (!(parent->common.scope->ce_flags & ZEND_ACC_INTERFACE)
+		&& parent->common.fn_flags & ZEND_ACC_ABSTRACT
 		&& parent->common.scope != (child->common.prototype ? child->common.prototype->common.scope : child->common.scope)
 		&& child->common.fn_flags & (ZEND_ACC_ABSTRACT|ZEND_ACC_IMPLEMENTED_ABSTRACT)) {
 		zend_error(E_COMPILE_ERROR, "Can't inherit abstract function %s::%s() (previously declared abstract in %s)", 
@@ -2262,7 +2406,7 @@
 			/* We currently don't early-bind classes that implement interfaces */
 			return;
 		default:
-			zend_error(E_COMPILE_ERROR, "Invalid binding type");
+			zend_error(E_COMPILE_ERROR, "Invalid binding type %d", opline->opcode);
 			return;
 	}
 
@@ -2533,13 +2677,16 @@
 	zend_op *opline;
 	int doing_inheritance = 0;
 	zend_class_entry *new_class_entry = emalloc(sizeof(zend_class_entry));
-	char *lcname = zend_str_tolower_dup(class_name->u.constant.value.str.val, class_name->u.constant.value.str.len);
+	char *lcname;
 
 	if (CG(active_class_entry)) {
 		zend_error(E_COMPILE_ERROR, "Class declarations may not be nested");
 		return;
 	}
 
+	MANGLE_CLASS_NAME(class_name);
+	lcname = zend_str_tolower_dup(class_name->u.constant.value.str.val, class_name->u.constant.value.str.len);
+ 
 	if (!(strcmp(lcname, "self") && strcmp(lcname, "parent"))) {
 		efree(lcname);
 		zend_error(E_COMPILE_ERROR, "Cannot use '%s' as class name as it is reserved", class_name->u.constant.value.str.val);
@@ -2588,6 +2735,9 @@
 		CG(active_class_entry)->doc_comment_len = CG(doc_comment_len);
 		RESET_DOC_COMMENT();
 	}
+
+	/* Copy annotations stack to annotation list */
+	copy_annotation_stack(&CG(active_class_entry)->annotations, 0 TSRMLS_CC);
 }
 
 
@@ -2639,9 +2789,91 @@
 			do_verify_abstract_class(TSRMLS_C);
 		}
 	}
+
 	CG(active_class_entry) = NULL;
 }
 
+void zend_do_begin_instance_creation(TSRMLS_D)
+{
+	zend_op *opline;
+	zval lambda;
+	zend_class_entry *new_class_entry = emalloc(sizeof(zend_class_entry));
+
+	/* Find class declaring opcode */
+	opline = &CG(active_op_array)->opcodes[CG(active_op_array)->last];
+	while (ZEND_FETCH_CLASS != opline->opcode) {
+		opline--;
+	}
+
+	if (opline->op2.op_type != IS_CONST) {
+		zend_error(E_COMPILE_ERROR, "Cannot use instance creation expression with variables");
+		/* Bails out */
+	}
+
+	/* Create lambda name */
+	build_runtime_defined_function_key(&lambda, opline->op2.u.constant.value.str.val, opline->op2.u.constant.value.str.len TSRMLS_CC);
+	new_class_entry->name= Z_STRVAL(lambda);
+	new_class_entry->name[0]= '$';
+	new_class_entry->name_length= Z_STRLEN(lambda);
+
+	/* Declare class */
+	new_class_entry->type = ZEND_USER_CLASS;
+	zend_initialize_class_data(new_class_entry, 1 TSRMLS_CC);
+	new_class_entry->filename = zend_get_compiled_filename(TSRMLS_C);
+	new_class_entry->line_start = zend_get_compiled_lineno(TSRMLS_C);
+	new_class_entry->ce_flags |= ZEND_ACC_FINAL;
+
+	/* Modify original opcode */
+	opline->opcode = ZEND_INSTANCE_CREATION;
+	opline->op1.u.constant = lambda;
+
+	/* Add to class table */
+	{
+		char *lcname = zend_str_tolower_dup(new_class_entry->name, new_class_entry->name_length);
+
+		zend_hash_add(CG(class_table), lcname, new_class_entry->name_length + 1, &new_class_entry, sizeof(zend_class_entry *), NULL);
+		efree(lcname);
+	}
+
+	if (CG(active_class_entry)) {
+		zend_stack_push(&CG(class_stack), (void *) &CG(active_class_entry), sizeof(zend_class_entry *));
+	}
+	CG(active_class_entry) = new_class_entry;
+}
+
+void zend_do_end_instance_creation(TSRMLS_D)
+{
+	zend_class_entry **pce = NULL;
+
+	if (zend_stack_top(&CG(class_stack), (void **) &pce) == SUCCESS) {
+		CG(active_class_entry) = *pce;
+		zend_stack_del_top(&CG(class_stack));
+	} else {
+		CG(active_class_entry) = NULL;
+	}
+}
+
+void zend_do_begin_package_declaration(znode *package_name TSRMLS_DC)
+{
+   if (strcmp(package_name->u.constant.value.str.val, "main") == 0) {
+	   zend_error(E_COMPILE_ERROR, "Cannot use 'main' as package name as it is reserved");
+   } else {
+	   zend_package_entry *new_package_entry = emalloc(sizeof(zend_package_entry));
+
+	   new_package_entry->name = package_name->u.constant.value.str.val;
+	   new_package_entry->name_length = package_name->u.constant.value.str.len;
+	   zend_str_tolower(new_package_entry->name, new_package_entry->name_length);
+	   CG(active_package_entry) = new_package_entry;
+   }
+}
+
+void zend_do_end_package_declaration(znode *package_name TSRMLS_DC)
+{
+   FREE_PNODE(package_name);
+   efree(CG(active_package_entry));
+   CG(active_package_entry) = NULL;
+}
+ 
 
 void zend_do_implements_interface(znode *interface_znode TSRMLS_DC)
 {
@@ -3825,6 +4057,14 @@
 	zend_hash_init_ex(&ce->constants_table, 0, NULL, zval_ptr_dtor_func, persistent_hashes, 0);
 	zend_hash_init_ex(&ce->function_table, 0, NULL, ZEND_FUNCTION_DTOR, persistent_hashes, 0);
 
+	if (persistent_hashes) {
+		ce->annotations = (HashTable *) malloc(sizeof(HashTable));
+	} else {
+		ALLOC_HASHTABLE(ce->annotations);
+	}
+
+	zend_hash_init_ex(ce->annotations, 0, NULL, zval_ptr_dtor_func, persistent_hashes, 0);
+
 	if (nullify_handlers) {
 		ce->constructor = NULL;
 		ce->destructor = NULL;
@@ -3861,6 +4101,151 @@
 	}
 }
 
+void zend_do_begin_enum_declaration(znode *enum_name TSRMLS_DC)
+{
+	zend_op *opline;
+	zend_class_entry *new_class_entry = emalloc(sizeof(zend_class_entry));
+	char *lcname;
+
+	if (CG(active_class_entry)) {
+		zend_error(E_COMPILE_ERROR, "Class declarations may not be nested");
+		return;
+	}
+
+	MANGLE_CLASS_NAME(enum_name);
+	lcname = zend_str_tolower_dup(enum_name->u.constant.value.str.val, enum_name->u.constant.value.str.len);
+
+	if (!(strcmp(lcname, "self") && strcmp(lcname, "parent"))) {
+		efree(lcname);
+		zend_error(E_COMPILE_ERROR, "Cannot use '%s' as enum name as it is reserved", enum_name->u.constant.value.str.val);
+	}
+
+	new_class_entry->type = ZEND_USER_CLASS;
+	new_class_entry->name = enum_name->u.constant.value.str.val;
+	new_class_entry->name_length = enum_name->u.constant.value.str.len;
+
+	zend_initialize_class_data(new_class_entry, 1 TSRMLS_CC);
+	new_class_entry->filename = zend_get_compiled_filename(TSRMLS_C);
+	new_class_entry->line_start = zend_get_compiled_lineno(TSRMLS_C);
+	new_class_entry->ce_flags |= 0;
+
+	opline = get_next_op(CG(active_op_array) TSRMLS_CC);
+	opline->op1.op_type = IS_CONST;
+	build_runtime_defined_function_key(&opline->op1.u.constant, lcname, new_class_entry->name_length TSRMLS_CC);
+	
+	opline->op2.op_type = IS_CONST;
+	opline->op2.u.constant.type = IS_STRING;
+	opline->op2.u.constant.refcount = 1;
+	
+	opline->opcode = ZEND_DECLARE_CLASS;
+	opline->op2.u.constant.value.str.val = lcname;
+	opline->op2.u.constant.value.str.len = new_class_entry->name_length;
+	
+	zend_hash_update(CG(class_table), opline->op1.u.constant.value.str.val, opline->op1.u.constant.value.str.len, &new_class_entry, sizeof(zend_class_entry *), NULL);
+	CG(active_class_entry) = new_class_entry;
+
+	opline->result.u.var = get_temporary_variable(CG(active_op_array));
+	opline->result.op_type = IS_CONST;
+	CG(implementing_class) = opline->result;
+
+	if (CG(doc_comment)) {
+		CG(active_class_entry)->doc_comment = estrndup(CG(doc_comment), CG(doc_comment_len));
+		CG(active_class_entry)->doc_comment_len = CG(doc_comment_len);
+		RESET_DOC_COMMENT();
+	}
+	
+	/* Initialize member default value counter */
+	CG(max_enum)= 0;
+}
+
+void zend_do_end_enum_declaration(TSRMLS_D)
+{
+    do_inherit_parent_constructor(base_enumeration_ce);
+    CG(active_class_entry)->line_end = zend_get_compiled_lineno(TSRMLS_C);
+	
+	zend_do_inheritance(CG(active_class_entry), base_enumeration_ce TSRMLS_CC);
+	CG(active_class_entry)= NULL;
+}
+
+void zend_do_add_enum_member(znode *name, znode *value TSRMLS_DC)
+{
+	zval *property, **lastdata;
+	HashPosition pos;
+	
+	ALLOC_ZVAL(property);
+	
+	if (value) {
+		*property = value->u.constant;
+		
+		/* Only long and string may be added, so cast if necessary */
+		if (property->type != IS_LONG && property->type != IS_STRING) {
+			convert_to_long(property);
+		}
+		
+		/* Check for duplicates */
+        if (!(property->type == IS_LONG && CG(max_enum) < Z_LVAL_P(property))) {
+		    zend_hash_internal_pointer_reset_ex(&CG(active_class_entry)->constants_table, &pos);
+		    while (zend_hash_get_current_data_ex(&CG(active_class_entry)->constants_table, (void **)&lastdata, &pos) == SUCCESS) {
+			    if (
+				    ((*lastdata)->type == IS_LONG && property->type == IS_LONG && Z_LVAL_PP(lastdata) == Z_LVAL_P(property)) ||
+				    ((*lastdata)->type == IS_STRING && property->type == IS_STRING && 0 == zend_binary_zval_strcmp(property, *lastdata))
+			    ) {
+				    zend_error(E_COMPILE_ERROR, "Reusing already defined value for enumeration member %s::%s", CG(active_class_entry)->name, name->u.constant.value.str.val);
+			    }
+
+			    zend_hash_move_forward_ex(&CG(active_class_entry)->constants_table, &pos);
+		    }
+        }
+	} else {
+	
+		/* Retrieve the value of the last numeric element */
+		INIT_PZVAL(property);
+		ZVAL_LONG(property, CG(max_enum) + 1);
+	}
+	
+	/* Register the constant in the class */
+	if (zend_hash_add(&CG(active_class_entry)->constants_table, name->u.constant.value.str.val, name->u.constant.value.str.len+1, &property, sizeof(zval *), NULL)==FAILURE) {
+		FREE_ZVAL(property);
+		zend_error(E_COMPILE_ERROR, "Cannot redefine enum constant %s::%s", CG(active_class_entry)->name, name->u.constant.value.str.val);
+	}
+	
+	/* Increment max_enum if it was exceeded */
+	if (property->type == IS_LONG && CG(max_enum) < Z_LVAL_P(property)) { CG(max_enum)= Z_LVAL_P(property); }
+	
+	FREE_PNODE(name);
+}
+
+void zend_do_begin_enum_function_declaration(znode *enum_token, znode *function_token, znode *function_name, int is_method, int return_reference, znode *fn_flags_znode TSRMLS_DC)
+{
+#define _SIZEOF_MAGIC sizeof("__") - 1
+	char *tmp = estrdup(function_name->u.constant.value.str.val);
+	int length = function_name->u.constant.value.str.len + enum_token->u.constant.value.str.len + _SIZEOF_MAGIC;
+
+	/* Change method name from $name to "__$name$enum". E.g.
+	 * 
+	 * enum Op {
+	 *    plus { function evaluate($x, $y) { return $x + $y; } }
+	 * }
+	 * 
+	 * will result in a class Op with a method __evaluateplus()
+	 */
+	function_name->u.constant.value.str.val= (char*) erealloc(function_name->u.constant.value.str.val, length + 1);
+	memcpy(function_name->u.constant.value.str.val, "__", _SIZEOF_MAGIC);
+	memcpy(function_name->u.constant.value.str.val+ _SIZEOF_MAGIC, tmp, function_name->u.constant.value.str.len);
+	memcpy(function_name->u.constant.value.str.val+ _SIZEOF_MAGIC+ function_name->u.constant.value.str.len, enum_token->u.constant.value.str.val, enum_token->u.constant.value.str.len);
+	function_name->u.constant.value.str.val[length]= '\0';
+	function_name->u.constant.value.str.len= length;
+
+	efree(tmp);
+
+	/* Add member */
+	zend_do_add_enum_member(enum_token, NULL TSRMLS_CC);
+
+	/* Add private method */
+	fn_flags_znode->u.constant.value.lval= (fn_flags_znode->u.constant.value.lval | ZEND_ACC_PROTECTED) & ~ZEND_ACC_PUBLIC;
+	zend_do_begin_function_declaration(function_token, function_name, is_method, return_reference, fn_flags_znode TSRMLS_CC);
+}
+
 ZEND_API char* zend_get_compiled_variable_name(zend_op_array *op_array, zend_uint var, int* name_len)
 {
 	if (name_len) {
Index: Zend/zend_compile.h
===================================================================
RCS file: /repository/ZendEngine2/zend_compile.h,v
retrieving revision 1.302
diff -u -r1.302 zend_compile.h
--- Zend/zend_compile.h	11 Feb 2005 22:26:45 -0000	1.302
+++ Zend/zend_compile.h	11 Jun 2005 23:01:51 -0000
@@ -45,6 +45,23 @@
         CG(doc_comment) = NULL;  \
         CG(doc_comment_len) = 0; \
     }
+#define MANGLE_MAIN_LEN sizeof("main~") - 1
+#define MANGLE_CLASS_NAME(class_name) \
+	if (memcmp(class_name->u.constant.value.str.val, "main~", MANGLE_MAIN_LEN) == 0) { \
+		class_name->u.constant.value.str.len -= MANGLE_MAIN_LEN; \
+		memcpy(class_name->u.constant.value.str.val, class_name->u.constant.value.str.val + MANGLE_MAIN_LEN, class_name->u.constant.value.str.len); \
+		class_name->u.constant.value.str.val[class_name->u.constant.value.str.len] = 0; \
+	} else if (CG(active_package_entry) && !memchr(class_name->u.constant.value.str.val, '~', class_name->u.constant.value.str.len)) { \
+		int len= CG(active_package_entry)->name_length + 1 + class_name->u.constant.value.str.len; \
+		char *tmp= estrndup(class_name->u.constant.value.str.val, class_name->u.constant.value.str.len); \
+		class_name->u.constant.value.str.val= (char*) erealloc(class_name->u.constant.value.str.val, len + 1); \
+		memcpy(class_name->u.constant.value.str.val, CG(active_package_entry)->name, CG(active_package_entry)->name_length); \
+		memcpy(class_name->u.constant.value.str.val+ CG(active_package_entry)->name_length, "~", sizeof("~")); \
+		memcpy(class_name->u.constant.value.str.val+ CG(active_package_entry)->name_length+ 1, tmp, class_name->u.constant.value.str.len); \
+		class_name->u.constant.value.str.val[len]= 0; \
+		class_name->u.constant.value.str.len= len; \
+		efree(tmp); \
+	}
 
 typedef struct _zend_op_array zend_op_array;
 typedef struct _zend_op zend_op;
@@ -170,6 +187,9 @@
 	zend_arg_info *arg_info;
 	zend_bool pass_rest_by_reference;
 	unsigned char return_reference;
+	char **throws;
+	zend_uint num_throws;
+	HashTable *annotations;
 	/* END of common elements */
 
 	zend_uint *refcount;
@@ -224,6 +244,9 @@
 	zend_arg_info *arg_info;
 	zend_bool pass_rest_by_reference;
 	unsigned char return_reference;
+	char **throws;
+	zend_uint num_throws;
+	HashTable *annotations;
 	/* END of common elements */
 
 	void (*handler)(INTERNAL_FUNCTION_PARAMETERS);
@@ -245,6 +268,9 @@
 		zend_arg_info *arg_info;
 		zend_bool pass_rest_by_reference;
 		unsigned char return_reference;
+		char **throws;
+		zend_uint num_throws;
+		HashTable *annotations;
 	} common;
 	
 	zend_op_array op_array;
@@ -426,10 +452,17 @@
 
 void zend_do_begin_class_declaration(znode *class_token, znode *class_name, znode *parent_class_name TSRMLS_DC);
 void zend_do_end_class_declaration(znode *class_token, znode *parent_token TSRMLS_DC);
+void zend_do_begin_package_declaration(znode *package_name TSRMLS_DC);
+void zend_do_end_package_declaration(znode *package_name TSRMLS_DC);
 void zend_do_declare_property(znode *var_name, znode *value, zend_uint access_type TSRMLS_DC);
 void zend_do_declare_implicit_property(TSRMLS_D);
 void zend_do_declare_class_constant(znode *var_name, znode *value TSRMLS_DC);
 
+void zend_do_begin_enum_declaration(znode *enum_name TSRMLS_DC);
+void zend_do_end_enum_declaration(TSRMLS_D);
+void zend_do_add_enum_member(znode *name, znode *value TSRMLS_DC);
+
+
 void zend_do_fetch_property(znode *result, znode *object, znode *property TSRMLS_DC);
 
 
@@ -489,6 +522,17 @@
 
 void zend_do_abstract_method(znode *function_name, znode *modifiers, znode *body TSRMLS_DC);
 
+void zend_do_throws(znode *throws_znode TSRMLS_DC);
+
+void zend_do_annotation(znode *name, znode *value, int type TSRMLS_DC);
+void zend_do_annotation_define(znode *define, znode *value TSRMLS_DC);
+
+void zend_do_import(znode *classname, znode *alias TSRMLS_DC);
+void zend_import_class(zend_class_entry *ce, char *alias_name, int alias_len TSRMLS_DC);
+
+void zend_do_begin_instance_creation(TSRMLS_D);
+void zend_do_end_instance_creation(TSRMLS_D);
+
 ZEND_API void function_add_ref(zend_function *function);
 
 #define INITIAL_OP_ARRAY_SIZE 64
Index: Zend/zend_default_classes.c
===================================================================
RCS file: /repository/ZendEngine2/zend_default_classes.c,v
retrieving revision 1.58
diff -u -r1.58 zend_default_classes.c
--- Zend/zend_default_classes.c	12 Feb 2004 10:38:14 -0000	1.58
+++ Zend/zend_default_classes.c	11 Jun 2005 23:01:51 -0000
@@ -25,6 +25,7 @@
 #include "zend_builtin_functions.h"
 #include "zend_interfaces.h"
 #include "zend_exceptions.h"
+#include "zend_enumerations.h"
 
 
 ZEND_API void zend_register_default_classes(TSRMLS_D)
@@ -33,6 +34,7 @@
 	zend_register_default_exception(TSRMLS_C);
 	zend_register_reflection_api(TSRMLS_C);
 	zend_register_iterator_wrapper(TSRMLS_C);
+	zend_register_default_enumeration(TSRMLS_C);
 }
 
 /*
Index: Zend/zend_enumerations.c
===================================================================
RCS file: Zend/zend_enumerations.c
diff -N Zend/zend_enumerations.c
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ Zend/zend_enumerations.c	11 Jun 2005 23:01:51 -0000
@@ -0,0 +1,262 @@
+/*
+   +----------------------------------------------------------------------+
+   | Zend Engine                                                          |
+   +----------------------------------------------------------------------+
+   | Copyright (c) 1998-2004 Zend Technologies Ltd. (http://www.zend.com) |
+   +----------------------------------------------------------------------+
+   | This source file is subject to version 2.00 of the Zend license,     |
+   | that is bundled with this package in the file LICENSE, and is        | 
+   | available through the world-wide-web at the following url:           |
+   | http://www.zend.com/license/2_00.txt.                                |
+   | If you did not receive a copy of the Zend license and are unable to  |
+   | obtain it through the world-wide-web, please send a note to          |
+   | license@zend.com so we can mail you a copy immediately.              |
+   +----------------------------------------------------------------------+
+   | Authors: Alex Kiesel <alex@kiesel.name>                              |
+   +----------------------------------------------------------------------+
+*/
+
+/* $Id$ */
+
+#include "zend.h"
+#include "zend_API.h"
+#include "zend_reflection_api.h"
+#include "zend_builtin_functions.h"
+#include "zend_interfaces.h"
+#include "zend_exceptions.h"
+#include "zend_enumerations.h"
+
+ZEND_API zend_class_entry *base_enumeration_ce;
+
+ZEND_METHOD(enumeration, __clone)
+{
+
+	/* Should never be executable */
+	zend_throw_exception(NULL, "Cannot clone object using __clone()", 0 TSRMLS_CC);
+}
+
+ZEND_METHOD(enumeration, __construct)
+{
+
+	/* Should never be executable */
+	zend_throw_exception(NULL, "Cannot construct object", 0 TSRMLS_CC);
+}
+
+ZEND_METHOD(enumeration, size)
+{
+	RETURN_LONG(zend_hash_num_elements(&EG(scope)->constants_table));
+}
+
+ZEND_METHOD(enumeration, values)
+{
+	HashPosition pos;
+	zval **ordinal, *container;
+	char *name;
+	uint length;
+	ulong dummy;
+	long enum_pos;
+	
+	array_init(return_value);
+	
+	/* Go through class constants and add values to the return array */
+	zend_hash_internal_pointer_reset_ex(&EG(scope)->constants_table, &pos);
+	enum_pos= 0;
+	while (zend_hash_get_current_data_ex(&EG(scope)->constants_table, (void **)&ordinal, &pos) == SUCCESS) {
+		zend_hash_get_current_key_ex(&EG(scope)->constants_table, &name, &length, &dummy, 0, &pos);
+
+		/* Create object for this enumeration memeber */
+		MAKE_STD_ZVAL(container);
+		if (object_init_ex(container, EG(scope)) != SUCCESS) {
+			zend_error(E_CORE_ERROR, "Cannot create object in Enumeration::values()");
+		}
+		add_property_stringl(container, "name", name, length - 1, 1);
+		add_property_long(container, "ordinal", enum_pos);
+		add_property_zval(container, "value", *ordinal);
+
+		/* Add to result array and proceed to next element */
+		zend_hash_next_index_insert(Z_ARRVAL_P(return_value), &container, sizeof(zval *), NULL);
+		zend_hash_move_forward_ex(&EG(scope)->constants_table, &pos);
+		enum_pos++;
+	}
+}
+
+ZEND_METHOD(enumeration, valueOf) {
+	long needle, needle_len;
+	char *name, *needle_str;
+	zend_uchar searchtype;
+	uint length;
+	ulong dummy;
+	HashPosition pos;
+	zval **data;
+	long enum_pos;
+	
+	if (ZEND_NUM_ARGS() != 1)
+		WRONG_PARAM_COUNT;
+	
+	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l", &needle) == SUCCESS) {
+		searchtype= IS_LONG;
+	} else if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s", &needle_str, &needle_len) == SUCCESS) {
+		searchtype= IS_STRING;
+	} else {
+		zend_error(E_WARNING, "valueOf() expects either an integer or a string");
+		RETURN_FALSE;
+	}
+	
+	/* Iterate over constants until the searched needle is found */
+	zend_hash_internal_pointer_reset_ex(&EG(scope)->constants_table, &pos);
+	enum_pos= 0;
+	while (zend_hash_get_current_data_ex(&EG(scope)->constants_table, (void **)&data, &pos) == SUCCESS) {
+	
+		/* Compare current value with searched one. If they equal, it's the right one, because enums are unique */
+		if (
+			(searchtype == IS_LONG && Z_TYPE_PP(data) == IS_LONG && Z_LVAL_PP(data) == needle) ||
+			(searchtype == IS_STRING && Z_TYPE_PP(data) == IS_STRING && memcmp(needle_str, Z_STRVAL_PP(data), needle_len) == 0)
+		) {
+			zend_hash_get_current_key_ex(&EG(scope)->constants_table, &name, &length, &dummy, 0, &pos);
+			
+			object_init_ex(return_value, EG(scope));
+			add_property_stringl(return_value, "name", name, length - 1, 1);
+			add_property_long(return_value, "ordinal", enum_pos);
+			add_property_zval(return_value, "value", *data);
+			return;
+		}
+		
+		zend_hash_move_forward_ex(&EG(scope)->constants_table, &pos);
+		enum_pos++;
+	}
+	
+	zend_error(E_WARNING, "Value %s::%ld not bound", EG(scope)->name, needle);
+	RETURN_FALSE;
+}
+
+ZEND_METHOD(enumeration, valueAt) {
+	HashPosition pos;
+	long rpos, cpos, dummy;
+	uint length;
+	zval **data;
+	char *name;
+	
+	if (ZEND_NUM_ARGS() != 1)
+		WRONG_PARAM_COUNT;
+	
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &rpos) == FAILURE) {
+		zend_error(E_WARNING, "valueAt() expects integer");
+		return;
+	}
+	
+	zend_hash_internal_pointer_reset_ex(&EG(scope)->constants_table, &pos);
+	cpos= 0;
+	while (zend_hash_get_current_data_ex(&EG(scope)->constants_table, (void **)&data, &pos) == SUCCESS) {
+	  if (cpos == rpos) {
+	  	zend_hash_get_current_key_ex(&EG(scope)->constants_table, &name, &length, &dummy, 0, &pos);
+		
+	  	object_init_ex(return_value, EG(scope));
+		add_property_stringl(return_value, "name", name, length - 1, 1);
+		add_property_long(return_value, "ordinal", cpos);
+		add_property_zval(return_value, "value", *data);
+
+		return;
+	  }
+	  
+	  zend_hash_move_forward_ex(&EG(scope)->constants_table, &pos);
+	  cpos++;
+	}
+	
+	zend_error(E_WARNING, "No %ldth element in enumeration %s", rpos, EG(scope)->name);
+	RETURN_FALSE;
+}
+
+ZEND_METHOD(enumeration, __call) {
+#define _SIZEOF_MAGIC sizeof("__") - 1
+	char *fname, *fcallname;
+	long fname_len, fcallname_len;
+	zval *arguments;
+	zval **property, ***func_params, *retval_ptr;
+	zval *fbc;
+	zend_class_entry *ce;
+	long count, current= 0;
+	HashTable *arg_ht;
+	
+	if (ZEND_NUM_ARGS() != 2) 
+		WRONG_PARAM_COUNT;
+	
+	if (!this_ptr) {
+		zend_error(E_ERROR, "__call() cannot be called statically");
+		return;
+	}
+	
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "sa", &fname, &fname_len, &arguments) == FAILURE) {
+		zend_error(E_WARNING, "__call() needs two parameters");
+		return;
+	}
+	
+	/* Determine function to be called */
+	if (zend_hash_find(Z_OBJPROP_P(getThis()), "name", sizeof("name"), (void **)&property) == FAILURE) {
+		zend_error(E_CORE_ERROR, "Could not get name property of enumeration");
+	}
+	
+	/* Fetch object's class */
+	ce= zend_get_class_entry(getThis() TSRMLS_CC);
+	
+	/* Build masked function name, see zend_compile.c: zend_do_begin_enum_function_declaration() */
+	fcallname_len= Z_STRLEN_PP(property) + strlen(fname) + _SIZEOF_MAGIC + 1;
+	fcallname= safe_emalloc(sizeof (char *), fcallname_len, 0);
+	memcpy(fcallname, "__", sizeof("__"));
+	memcpy(fcallname + _SIZEOF_MAGIC, fname, strlen(fname));
+	memcpy(fcallname + _SIZEOF_MAGIC + strlen(fname), Z_STRVAL_PP(property), Z_STRLEN_PP(property));
+	(*(fcallname + _SIZEOF_MAGIC + strlen(fname) + Z_STRLEN_PP(property)))= '\0';
+
+	/* Build function argument list */
+	arg_ht= Z_ARRVAL_P(arguments);
+	count= zend_hash_num_elements(arg_ht);
+	
+	if (count) {
+		func_params= safe_emalloc(sizeof(zval **), count, 0);
+		
+		for (
+			zend_hash_internal_pointer_reset(arg_ht); 
+			zend_hash_get_current_data(arg_ht, (void **)&func_params[current]) == SUCCESS;
+			zend_hash_move_forward(arg_ht)
+		) {
+			current++;
+		}
+	} else {
+		func_params= NULL;
+	}
+	
+	MAKE_STD_ZVAL(fbc);
+	ZVAL_STRINGL(fbc, fcallname, fcallname_len - 1, 0);
+	
+	if (call_user_function_ex(&ce->function_table, &getThis(), fbc, &retval_ptr, count, func_params, 0, NULL TSRMLS_CC) == SUCCESS) {
+		if (retval_ptr) {
+			COPY_PZVAL_TO_ZVAL(*return_value, retval_ptr);
+		}
+	}
+	
+	/* Cleanup */
+	if (func_params) { efree(func_params); }
+	efree(fcallname);
+	efree(fbc);
+}
+
+static ZEND_BEGIN_ARG_INFO_EX(arginfo_enumeration__call, 0, 0, 2)
+	ZEND_ARG_INFO(0, fname)
+	ZEND_ARG_INFO(0, arguments)
+ZEND_END_ARG_INFO();
+
+static zend_function_entry default_enumeration_functions[]= {
+	ZEND_ME(enumeration, __clone, NULL, ZEND_ACC_PRIVATE|ZEND_ACC_FINAL)
+	ZEND_ME(enumeration, __construct, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_FINAL)
+	ZEND_ME(enumeration, __call, arginfo_enumeration__call, ZEND_ACC_PUBLIC|ZEND_ACC_FINAL) 
+	ZEND_ME(enumeration, size, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_STATIC|ZEND_ACC_FINAL)
+	ZEND_ME(enumeration, values, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_STATIC|ZEND_ACC_FINAL)
+	ZEND_ME(enumeration, valueOf, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_STATIC|ZEND_ACC_FINAL)
+	ZEND_ME(enumeration, valueAt, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_STATIC|ZEND_ACC_FINAL)
+};
+
+void zend_register_default_enumeration(TSRMLS_D)
+{
+	zend_class_entry ce;
+	INIT_CLASS_ENTRY(ce, "Enumeration", default_enumeration_functions);
+	base_enumeration_ce = zend_register_internal_class(&ce TSRMLS_CC);
+}
Index: Zend/zend_enumerations.h
===================================================================
RCS file: Zend/zend_enumerations.h
diff -N Zend/zend_enumerations.h
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ Zend/zend_enumerations.h	11 Jun 2005 23:01:51 -0000
@@ -0,0 +1,39 @@
+/*
+   +----------------------------------------------------------------------+
+   | Zend Engine                                                          |
+   +----------------------------------------------------------------------+
+   | Copyright (c) 1998-2004 Zend Technologies Ltd. (http://www.zend.com) |
+   +----------------------------------------------------------------------+
+   | This source file is subject to version 2.00 of the Zend license,     |
+   | that is bundled with this package in the file LICENSE, and is        | 
+   | available through the world-wide-web at the following url:           |
+   | http://www.zend.com/license/2_00.txt.                                |
+   | If you did not receive a copy of the Zend license and are unable to  |
+   | obtain it through the world-wide-web, please send a note to          |
+   | license@zend.com so we can mail you a copy immediately.              |
+   +----------------------------------------------------------------------+
+   | Authors: Alex Kiesel <alex@kiesel.name>                              |
+   +----------------------------------------------------------------------+
+*/
+
+/* $Id$ */
+
+#ifndef ZEND_ENUMERATIONS_H
+#define ZEND_ENUMERATIONS_H
+
+BEGIN_EXTERN_C()
+
+extern ZEND_API zend_class_entry *base_enumeration_ce;
+void zend_register_default_enumeration(TSRMLS_D);
+
+END_EXTERN_C()
+
+#endif
+
+/*
+ * Local variables:
+ * tab-width: 4
+ * c-basic-offset: 4
+ * indent-tabs-mode: t
+ * End:
+ */
Index: Zend/zend_exceptions.c
===================================================================
RCS file: /repository/ZendEngine2/zend_exceptions.c,v
retrieving revision 1.75
diff -u -r1.75 zend_exceptions.c
--- Zend/zend_exceptions.c	7 Dec 2004 07:46:12 -0000	1.75
+++ Zend/zend_exceptions.c	11 Jun 2005 23:01:51 -0000
@@ -28,6 +28,7 @@
 #include "zend_interfaces.h"
 #include "zend_exceptions.h"
 
+zend_class_entry *default_iexception_ce;
 zend_class_entry *default_exception_ce;
 zend_class_entry *error_exception_ce;
 static zend_object_handlers default_exception_handlers;
@@ -555,16 +556,35 @@
 	{NULL, NULL, NULL}
 };
 
+static zend_function_entry default_iexception_functions[] = {
+	ZEND_ABSTRACT_ME(exception, getMessage, NULL)
+	ZEND_ABSTRACT_ME(exception, getFile, NULL)
+	ZEND_ABSTRACT_ME(exception, getLine, NULL)
+	ZEND_ABSTRACT_ME(exception, __toString, NULL)
+	{NULL, NULL, NULL}
+};
+
 void zend_register_default_exception(TSRMLS_D)
 {
 	zend_class_entry ce;
 
+	INIT_CLASS_ENTRY(ce, "IException", default_iexception_functions);
+	default_iexception_ce = zend_register_internal_class(&ce TSRMLS_CC);
+	default_iexception_ce->ce_flags = ZEND_ACC_ABSTRACT | ZEND_ACC_INTERFACE;
+
 	INIT_CLASS_ENTRY(ce, "Exception", default_exception_functions);
 	default_exception_ce = zend_register_internal_class(&ce TSRMLS_CC);
 	default_exception_ce->create_object = zend_default_exception_new; 
 	memcpy(&default_exception_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
 	default_exception_handlers.clone_obj = NULL;
 
+	/* Implement the IException interface */
+	{
+		zend_uint num_interfaces = ++default_exception_ce->num_interfaces;
+		default_exception_ce->interfaces = (zend_class_entry **) realloc(default_exception_ce->interfaces, sizeof(zend_class_entry *) * num_interfaces);
+		default_exception_ce->interfaces[num_interfaces - 1] = default_iexception_ce;
+	}
+
 	zend_declare_property_string(default_exception_ce, "message", sizeof("message")-1, "", ZEND_ACC_PROTECTED TSRMLS_CC);
 	zend_declare_property_string(default_exception_ce, "string", sizeof("string")-1, "", ZEND_ACC_PRIVATE TSRMLS_CC);
 	zend_declare_property_long(default_exception_ce, "code", sizeof("code")-1, 0, ZEND_ACC_PROTECTED TSRMLS_CC);
@@ -700,8 +720,8 @@
 
 	exception_ce = Z_OBJCE_P(exception);
 
-	if (!exception_ce || !instanceof_function(exception_ce, default_exception_ce TSRMLS_CC)) {
-		zend_error(E_ERROR, "Exceptions must be valid objects derived from the Exception base class");
+	if (!exception_ce || !instanceof_function(exception_ce, default_iexception_ce TSRMLS_CC)) {
+		zend_error(E_ERROR, "Exceptions must be valid objects that implement the IException interface");
 	}
 	zend_throw_exception_internal(exception TSRMLS_CC);
 }
Index: Zend/zend_globals.h
===================================================================
RCS file: /repository/ZendEngine2/zend_globals.h,v
retrieving revision 1.140
diff -u -r1.140 zend_globals.h
--- Zend/zend_globals.h	3 Nov 2004 23:13:32 -0000	1.140
+++ Zend/zend_globals.h	11 Jun 2005 23:01:52 -0000
@@ -73,8 +73,11 @@
 	zend_stack foreach_copy_stack;
 	zend_stack object_stack;
 	zend_stack declare_stack;
+	zend_stack annotation_stack;
+	zend_stack class_stack;
 
 	zend_class_entry *active_class_entry;
+	zend_package_entry *active_package_entry;
 
 	/* variables for list() compilation */
 	zend_llist list_llist;
@@ -131,6 +134,8 @@
 
 	char *doc_comment;
 	zend_uint doc_comment_len;
+    
+	zend_uint max_enum;
 
 #ifdef ZEND_MULTIBYTE
 	zend_encoding **script_encoding_list;
Index: Zend/zend_language_parser.y
===================================================================
RCS file: /repository/ZendEngine2/zend_language_parser.y,v
retrieving revision 1.155
diff -u -r1.155 zend_language_parser.y
--- Zend/zend_language_parser.y	11 Feb 2005 22:26:45 -0000	1.155
+++ Zend/zend_language_parser.y	11 Jun 2005 23:01:54 -0000
@@ -63,7 +63,7 @@
 %left '^'
 %left '&'
 %nonassoc T_IS_EQUAL T_IS_NOT_EQUAL T_IS_IDENTICAL T_IS_NOT_IDENTICAL
-%nonassoc '<' T_IS_SMALLER_OR_EQUAL '>' T_IS_GREATER_OR_EQUAL
+%nonassoc '<' T_IS_SMALLER_OR_EQUAL '>' T_IS_GREATER_OR_EQUAL T_COMPARE_ARROW
 %left T_SL T_SR
 %left '+' '-' '.'
 %left '*' '/' '%'
@@ -111,6 +111,7 @@
 %token T_TRY
 %token T_CATCH
 %token T_THROW
+%token T_THROWS
 %token T_USE
 %token T_GLOBAL
 %right T_STATIC T_ABSTRACT T_FINAL T_PRIVATE T_PROTECTED T_PUBLIC
@@ -119,9 +120,13 @@
 %token T_ISSET
 %token T_EMPTY
 %token T_CLASS
+%token T_PACKAGE
+%token T_CLASSNAME
 %token T_INTERFACE
 %token T_EXTENDS
 %token T_IMPLEMENTS
+%token T_OPERATOR
+%token T_COMPARE
 %token T_OBJECT_OPERATOR
 %token T_DOUBLE_ARROW
 %token T_LIST
@@ -142,6 +147,8 @@
 %token T_DOLLAR_OPEN_CURLY_BRACES
 %token T_CURLY_OPEN
 %token T_PAAMAYIM_NEKUDOTAYIM
+%token T_IMPORT
+%token T_ENUM
 
 %% /* Rules */
 
@@ -159,6 +166,8 @@
 		statement
 	|	function_declaration_statement	{ zend_do_early_binding(TSRMLS_C); }
 	|	class_declaration_statement		{ zend_do_early_binding(TSRMLS_C); }
+	|	package_declaration_statement
+	|	enum_declaration_statement
 ;
 
 
@@ -172,6 +181,7 @@
 		statement
 	|	function_declaration_statement
 	|	class_declaration_statement
+	|	package_declaration_statement
 ;
 
 
@@ -226,8 +236,19 @@
 		'{' inner_statement_list '}' { zend_do_end_catch(&$1 TSRMLS_CC); }
 		additional_catches { zend_do_mark_last_catch(&$7, &$18 TSRMLS_CC); }
 	|	T_THROW expr ';' { zend_do_throw(&$2 TSRMLS_CC); }
+	|	T_IMPORT import_list ';'
 ;
 
+import_list:
+		import_list ',' import
+	|	import
+;
+
+import:
+		class_name_reference                 { zend_do_import(&$1, NULL TSRMLS_CC); }
+	|	class_name_reference T_AS T_STRING   { zend_do_import(&$1, &$3 TSRMLS_CC); }
+	|	class_name_reference T_AS r_variable { zend_do_import(&$1, &$3 TSRMLS_CC); }
+;
 
 additional_catches:
 		non_empty_additional_catches { $$ = $1; }
@@ -244,6 +265,9 @@
 	T_CATCH '(' fully_qualified_class_name { $$.u.opline_num = get_next_op_number(CG(active_op_array)); } T_VARIABLE ')' { zend_do_begin_catch(&$1, &$3, &$5, 0 TSRMLS_CC); } '{' inner_statement_list '}' { zend_do_end_catch(&$1 TSRMLS_CC); }
 ;
 
+enum_declaration_statement:
+		unticked_enum_declaration_statement		{ zend_do_ticks(TSRMLS_C); }
+;
 
 unset_variables:
 		unset_variable
@@ -268,6 +292,30 @@
 		unticked_class_declaration_statement	{ zend_do_ticks(TSRMLS_C); }
 ;
 
+package_inner_statement_list:
+		package_inner_statement package_inner_statement_list
+	|   /* empty */
+;
+
+package_inner_statement:
+		class_declaration_statement { zend_do_early_binding(TSRMLS_C); }
+	|	enum_declaration_statement
+	|	T_IMPORT package_import_list ';'
+;
+
+package_import_list:
+		package_import_list ',' package_import
+	|	package_import
+;
+
+package_import:
+		T_CLASSNAME                 { zend_do_fetch_class(&$$, &$1 TSRMLS_CC); zend_do_import(&$$, NULL TSRMLS_CC); }
+	|	T_CLASSNAME T_AS T_STRING   { zend_do_fetch_class(&$$, &$1 TSRMLS_CC); zend_do_import(&$$, &$3 TSRMLS_CC); }
+;
+
+package_declaration_statement:
+		unticked_package_declaration_statement  { zend_do_ticks(TSRMLS_C); }
+;
 
 is_reference:
 		/* empty */	{ $$.op_type = ZEND_RETURN_VAL; }
@@ -280,21 +328,36 @@
 			'(' parameter_list ')' '{' inner_statement_list '}' { zend_do_end_function_declaration(&$1 TSRMLS_CC); }
 ;
 
+optional_annotation_list:
+		/* empty */
+	|	annotation_list
+;
+
 unticked_class_declaration_statement:
-		class_entry_type T_STRING extends_from
-			{ zend_do_begin_class_declaration(&$1, &$2, &$3 TSRMLS_CC); } 
+		optional_annotation_list class_entry_type T_STRING extends_from
+			{ zend_do_begin_class_declaration(&$2, &$3, &$4 TSRMLS_CC); } 
 			implements_list
 			'{'
 				class_statement_list
-			'}' { zend_do_end_class_declaration(&$1, &$2 TSRMLS_CC); }
-	|	interface_entry T_STRING
-			{ zend_do_begin_class_declaration(&$1, &$2, NULL TSRMLS_CC); } 
+			'}' { zend_do_end_class_declaration(&$2, &$3 TSRMLS_CC); }
+	|	optional_annotation_list interface_entry T_STRING
+			{ zend_do_begin_class_declaration(&$2, &$3, NULL TSRMLS_CC); } 
 			interface_extends_list
 			'{'
 				class_statement_list
-			'}' { zend_do_end_class_declaration(&$1, &$2 TSRMLS_CC); }
+			'}' { zend_do_end_class_declaration(&$2, &$3 TSRMLS_CC); }
 ;
 
+unticked_package_declaration_statement:
+		T_PACKAGE T_STRING { zend_do_begin_package_declaration(&$2 TSRMLS_CC); }
+			'{'
+				package_inner_statement_list
+			'}' { zend_do_end_package_declaration(&$2 TSRMLS_CC); }
+	|	T_PACKAGE T_CLASSNAME { zend_do_begin_package_declaration(&$2 TSRMLS_CC); }
+			'{'
+				package_inner_statement_list
+			'}' { zend_do_end_package_declaration(&$2 TSRMLS_CC); }
+;
 
 class_entry_type:
 		T_CLASS			{  $$.u.constant.value.lval = 0; }
@@ -326,6 +389,31 @@
 	|	interface_list ',' fully_qualified_class_name { zend_do_implements_interface(&$3 TSRMLS_CC); }
 ;
 
+unticked_enum_declaration_statement:
+		T_ENUM T_STRING '{' { zend_do_begin_enum_declaration(&$2 TSRMLS_CC); }
+			enum_inner_statement_list 
+		'}' { zend_do_end_enum_declaration(TSRMLS_C); }
+;
+
+enum_inner_statement_list:
+		enum_declaration_list
+	| 	enum_declaration_list ';' class_statement_list
+;
+
+enum_declaration_list:
+		enum_declaration_list ',' enum_declaration_list_member
+	|	enum_declaration_list_member
+;
+
+enum_declaration_list_member:
+		T_STRING						{ zend_do_add_enum_member(&$1, NULL TSRMLS_CC); }
+	|	T_STRING '(' static_scalar ')'	{ zend_do_add_enum_member(&$1, &$3 TSRMLS_CC);  }
+	|	T_STRING '{' 
+			method_modifiers T_FUNCTION { $4.u.opline_num = CG(zend_lineno); } is_reference T_STRING { zend_do_begin_enum_function_declaration(&$1, &$4, &$7, 1, $6.op_type, &$3 TSRMLS_CC); } '(' 
+			parameter_list ')' throws method_body { zend_do_abstract_method(&$7, &$3, &$13 TSRMLS_CC); zend_do_end_function_declaration(&$4 TSRMLS_CC); }
+		'}'
+;
+
 foreach_optional_arg:
 		/* empty */						{ $$.op_type = IS_UNUSED; }
 	|	T_DOUBLE_ARROW foreach_variable	{ $$ = $2; }
@@ -434,6 +522,7 @@
 optional_class_type:
 		/* empty */		{ $$.op_type = IS_UNUSED; }
 	|	T_STRING		{ $$ = $1; }
+	|	T_CLASSNAME		{ $$ = $1; }
 ;
 
 
@@ -484,9 +573,64 @@
 		variable_modifiers { CG(access_type) = $1.u.constant.value.lval; } class_variable_declaration ';'
 	|	class_constant_declaration ';'
 	|	method_modifiers T_FUNCTION { $2.u.opline_num = CG(zend_lineno); } is_reference T_STRING { zend_do_begin_function_declaration(&$2, &$5, 1, $4.op_type, &$1 TSRMLS_CC); } '(' 
-			parameter_list ')' method_body { zend_do_abstract_method(&$5, &$1, &$10 TSRMLS_CC); zend_do_end_function_declaration(&$2 TSRMLS_CC); }
+			parameter_list ')' throws method_body { zend_do_abstract_method(&$5, &$1, &$11 TSRMLS_CC); zend_do_end_function_declaration(&$2 TSRMLS_CC); }
+	|	annotation_list method_modifiers T_FUNCTION { $3.u.opline_num = CG(zend_lineno); } is_reference T_STRING { zend_do_begin_function_declaration(&$3, &$6, 1, $5.op_type, &$2 TSRMLS_CC); } '(' 
+			parameter_list ')' throws method_body { zend_do_abstract_method(&$6, &$2, &$12 TSRMLS_CC); zend_do_end_function_declaration(&$3 TSRMLS_CC); }
+	|	method_modifiers T_OPERATOR { $2.u.opline_num = CG(zend_lineno); } is_reference operator_token { zend_do_begin_function_declaration(&$2, &$5, 1, $4.op_type, &$1 TSRMLS_CC); } '(' 
+			parameter_list ')' throws method_body { zend_do_abstract_method(&$5, &$1, &$11 TSRMLS_CC); zend_do_end_function_declaration(&$2 TSRMLS_CC); }
+;
+
+throws:
+		/* empty */
+	|	T_THROWS throws_list
+;
+
+throws_list:
+		throws_class_name 					{ zend_do_throws(&$1 TSRMLS_CC); }
+	|	throws_list ',' throws_class_name	{ zend_do_throws(&$3 TSRMLS_CC); }
+;	
+
+throws_class_name:
+		T_STRING { $$ = $1; }
+	|	T_CLASSNAME { $$ = $1; }
 ;
 
+annotation_list:
+		'[' annotation_elements ']'
+;
+
+annotation_elements:
+		annotation
+	|	annotation_elements ',' annotation
+;
+
+annotation:
+		'@' T_STRING { zend_do_annotation(&$2, NULL, IS_NULL TSRMLS_CC); }
+	|	'@' T_STRING '(' common_scalar ')' { zend_do_annotation(&$2, &$4, IS_CONSTANT TSRMLS_CC); }
+	|	'@' T_STRING '(' { zend_do_annotation(&$2, NULL, IS_ARRAY TSRMLS_CC); } annotation_defines ')'
+;
+
+annotation_defines:
+		annotation_define
+	|	annotation_defines ',' annotation_define
+;
+
+annotation_define:
+		T_STRING { zend_do_annotation_define(&$1, NULL TSRMLS_CC); }
+	|	T_STRING '=' static_scalar  { zend_do_annotation_define(&$1, &$3 TSRMLS_CC); }
+;
+
+operator_token:
+		'+'								{ $$.u.constant.value.str.val = estrndup("+", sizeof("+")- 1); $$.u.constant.value.str.len = sizeof("+")- 1; }
+	|	'-'								{ $$.u.constant.value.str.val = estrndup("-", sizeof("-")- 1); $$.u.constant.value.str.len = sizeof("-")- 1; }
+	|	'*'								{ $$.u.constant.value.str.val = estrndup("*", sizeof("*")- 1); $$.u.constant.value.str.len = sizeof("*")- 1; }
+	|	'/'								{ $$.u.constant.value.str.val = estrndup("/", sizeof("/")- 1); $$.u.constant.value.str.len = sizeof("/")- 1; }
+	|	'%'								{ $$.u.constant.value.str.val = estrndup("%", sizeof("%")- 1); $$.u.constant.value.str.len = sizeof("%")- 1; }
+	|	'!'								{ $$.u.constant.value.str.val = estrndup("!", sizeof("!")- 1); $$.u.constant.value.str.len = sizeof("%")- 1; }
+	|	T_INC							{ $$.u.constant.value.str.val = estrndup("++", sizeof("++")- 1); $$.u.constant.value.str.len = sizeof("++")- 1; }
+	|	T_DEC							{ $$.u.constant.value.str.val = estrndup("--", sizeof("--")- 1); $$.u.constant.value.str.len = sizeof("--")- 1; }
+	|	T_COMPARE						{ $$.u.constant.value.str.val = estrndup("__compare", sizeof("__compare")- 1); $$.u.constant.value.str.len = sizeof("__compare")- 1; }
+;
 
 method_body:
 		';' /* abstract method */		{ $$.u.constant.value.lval = ZEND_ACC_ABSTRACT; }
@@ -595,6 +739,7 @@
 	|	expr T_IS_SMALLER_OR_EQUAL expr { zend_do_binary_op(ZEND_IS_SMALLER_OR_EQUAL, &$$, &$1, &$3 TSRMLS_CC); }
 	|	expr '>' expr 					{ zend_do_binary_op(ZEND_IS_SMALLER, &$$, &$3, &$1 TSRMLS_CC); }
 	|	expr T_IS_GREATER_OR_EQUAL expr { zend_do_binary_op(ZEND_IS_SMALLER_OR_EQUAL, &$$, &$3, &$1 TSRMLS_CC); }
+	|	expr T_COMPARE_ARROW expr { zend_do_binary_op(ZEND_COMPARE, &$$, &$3, &$1 TSRMLS_CC); }
 	|	expr T_INSTANCEOF class_name_reference { zend_do_instanceof(&$$, &$1, &$3, 0 TSRMLS_CC); }
 	|	'(' expr ')' 	{ $$ = $2; }
 	|	expr '?' { zend_do_begin_qm_op(&$1, &$2 TSRMLS_CC); }
@@ -633,10 +778,12 @@
 
 fully_qualified_class_name:
 		T_STRING { zend_do_fetch_class(&$$, &$1 TSRMLS_CC); }
+	|	T_CLASSNAME { zend_do_fetch_class(&$$, &$1 TSRMLS_CC); }
 ;
 
 class_name_reference:
 		T_STRING				{ zend_do_fetch_class(&$$, &$1 TSRMLS_CC); }
+	|	T_CLASSNAME				{ zend_do_fetch_class(&$$, &$1 TSRMLS_CC); }
 	|	dynamic_class_name_reference	{ zend_do_end_variable_parse(BP_VAR_R, 0 TSRMLS_CC); zend_do_fetch_class(&$$, &$1 TSRMLS_CC); }
 ;
 
@@ -667,8 +814,9 @@
 
 
 ctor_arguments:
-		/* empty */	{ $$.u.constant.value.lval=0; }
-	|	'(' function_call_parameter_list ')'	{ $$ = $2; }
+		/* empty */
+	|	'(' function_call_parameter_list ')' { $$ = $2; }
+	|	'(' function_call_parameter_list ')' '{' { zend_do_begin_instance_creation(TSRMLS_C); } class_statement_list { zend_do_end_instance_creation(TSRMLS_C); } '}' { $$ = $2; }
 ;
 
 
Index: Zend/zend_language_scanner.l
===================================================================
RCS file: /repository/ZendEngine2/zend_language_scanner.l,v
retrieving revision 1.124
diff -u -r1.124 zend_language_scanner.l
--- Zend/zend_language_scanner.l	7 Mar 2005 16:48:49 -0000	1.124
+++ Zend/zend_language_scanner.l	11 Jun 2005 23:01:54 -0000
@@ -810,6 +810,10 @@
 	return T_THROW;
 }
 
+<ST_IN_SCRIPTING>"throws" {
+	return T_THROWS;
+}
+
 <ST_IN_SCRIPTING>"if" {
 	return T_IF;
 }
@@ -906,6 +910,10 @@
 	return T_CLASS;
 }
 
+<ST_IN_SCRIPTING>"package" {
+	return T_PACKAGE;
+}
+
 <ST_IN_SCRIPTING>"interface" {
 	return T_INTERFACE;
 }
@@ -918,6 +926,18 @@
 	return T_IMPLEMENTS;
 }
 
+<ST_IN_SCRIPTING>"import" {
+	return T_IMPORT;
+}
+
+<ST_IN_SCRIPTING>"operator" {
+	return T_OPERATOR;
+}
+
+<ST_IN_SCRIPTING>"__compare" {
+	return T_COMPARE;
+}
+
 <ST_IN_SCRIPTING,ST_DOUBLE_QUOTES,ST_BACKQUOTE,ST_HEREDOC>"->" {
 	yy_push_state(ST_LOOKING_FOR_PROPERTY TSRMLS_CC);
 	return T_OBJECT_OPERATOR;
@@ -1087,6 +1107,10 @@
 	return T_IS_GREATER_OR_EQUAL;
 }
 
+<ST_IN_SCRIPTING>"<=>" {
+	return T_COMPARE_ARROW;
+}
+
 <ST_IN_SCRIPTING>"+=" {
 	return T_PLUS_EQUAL;
 }
@@ -1159,6 +1183,10 @@
 	return T_SR;
 }
 
+<ST_IN_SCRIPTING>"enum" {
+	return T_ENUM;
+}
+
 <ST_IN_SCRIPTING>{TOKENS} {
 	return yytext[0];
 }
@@ -1412,6 +1440,12 @@
 	return T_STRING;
 }
 
+<ST_IN_SCRIPTING>({LABEL}"~")+{LABEL} {
+	zend_copy_value(zendlval, yytext, yyleng);
+	zendlval->type = IS_STRING;
+	return T_CLASSNAME;
+}
+
 <ST_DOUBLE_QUOTES,ST_BACKQUOTE,ST_HEREDOC>{LABEL} {
 	zend_copy_value(zendlval, yytext, yyleng);
 	zendlval->type = IS_STRING;
Index: Zend/zend_object_handlers.c
===================================================================
RCS file: /repository/ZendEngine2/zend_object_handlers.c,v
retrieving revision 1.113
diff -u -r1.113 zend_object_handlers.c
--- Zend/zend_object_handlers.c	19 Mar 2005 15:32:18 -0000	1.113
+++ Zend/zend_object_handlers.c	11 Jun 2005 23:01:55 -0000
@@ -492,7 +492,7 @@
 	zend_internal_function *func = (zend_internal_function *)EG(function_state_ptr)->function;
 	zval *method_name_ptr, *method_args_ptr;
 	zval *method_result_ptr = NULL;
-	zend_class_entry *ce = Z_OBJCE_P(this_ptr);
+	zend_class_entry *ce = this_ptr ? Z_OBJCE_P(this_ptr) : func->scope;
 	
 	ALLOC_ZVAL(method_args_ptr);
 	INIT_PZVAL(method_args_ptr);
@@ -511,9 +511,8 @@
 	/* __call handler is called with two arguments:
 	   method name
 	   array of method parameters
-
 	*/
-	zend_call_method_with_2_params(&this_ptr, ce, &ce->__call, ZEND_CALL_FUNC_NAME, &method_result_ptr, method_name_ptr, method_args_ptr);
+	zend_call_method_with_2_params(this_ptr ? &this_ptr : NULL, ce, &ce->__call, ZEND_CALL_FUNC_NAME, &method_result_ptr, method_name_ptr, method_args_ptr);
 
 	if (method_result_ptr) {
 		RETVAL_ZVAL(method_result_ptr, 0, 1);
@@ -615,6 +614,8 @@
 			call_user_call->handler = zend_std_call_user_call;
 			call_user_call->arg_info = NULL;
 			call_user_call->num_args = 0;
+			call_user_call->throws = NULL;
+			call_user_call->num_throws = 0;
 			call_user_call->scope = zobj->ce;
 			call_user_call->fn_flags = 0;
 			call_user_call->function_name = estrndup(method_name, method_len);
@@ -667,12 +668,22 @@
 	zend_function *fbc;
 
 	if (zend_hash_find(&ce->function_table, function_name_strval, function_name_strlen+1, (void **) &fbc)==FAILURE) {
-		char *class_name = ce->name;
+		if (ce->__call) {
+			zend_internal_function *call_user_call = emalloc(sizeof(zend_internal_function));
+			call_user_call->type = ZEND_INTERNAL_FUNCTION;
+			call_user_call->handler = zend_std_call_user_call;
+			call_user_call->arg_info = NULL;
+			call_user_call->num_args = 0;
+			call_user_call->throws = NULL;
+			call_user_call->num_throws = 0;
+			call_user_call->scope = ce;
+			call_user_call->fn_flags = ZEND_ACC_STATIC;
+			call_user_call->function_name = estrndup(function_name_strval, function_name_strlen);
 
-		if (!class_name) {
-			class_name = "";
+			return (union _zend_function *)call_user_call;
+		} else {
+			zend_error(E_ERROR, "Call to undefined method %s::%s()", ce->name ? ce->name : "", function_name_strval);
 		}
-		zend_error(E_ERROR, "Call to undefined method %s::%s()", class_name, function_name_strval);
 	}
 	if (fbc->op_array.fn_flags & ZEND_ACC_PUBLIC) {
 		/* No further checks necessary, most common case */
Index: Zend/zend_opcode.c
===================================================================
RCS file: /repository/ZendEngine2/zend_opcode.c,v
retrieving revision 1.109
diff -u -r1.109 zend_opcode.c
--- Zend/zend_opcode.c	4 Oct 2004 19:54:34 -0000	1.109
+++ Zend/zend_opcode.c	11 Jun 2005 23:01:55 -0000
@@ -78,6 +78,9 @@
 	op_array->doc_comment = NULL;
 	op_array->doc_comment_len = 0;
 
+	op_array->num_throws = 0;
+	op_array->throws = NULL;
+
 	op_array->arg_info = NULL;
 	op_array->num_args = 0;
 	op_array->required_num_args = 0;
@@ -90,6 +93,8 @@
 	op_array->current_brk_cont = -1;
 
 	op_array->static_variables = NULL;
+	op_array->annotations = NULL;
+
 	op_array->last_try_catch = 0;
 
 	op_array->return_reference = 0;
@@ -143,6 +148,7 @@
 		/* Note that only run-time accessed data need to be cleaned up, pre-defined data can
 		   not contain objects and thus are not probelmatic */
 		zend_hash_clean((*pce)->static_members);
+		zend_hash_clean((*pce)->annotations);
 		zend_hash_apply(&(*pce)->function_table, (apply_func_t) zend_cleanup_function_data TSRMLS_CC);
 	}
 	return 0;
@@ -155,14 +161,17 @@
 	if (--ce->refcount > 0) {
 		return;
 	}
+
 	switch (ce->type) {
 		case ZEND_USER_CLASS:
 			zend_hash_destroy(&ce->default_properties);
 			zend_hash_destroy(&ce->properties_info);
 			zend_hash_destroy(ce->static_members);
+			zend_hash_destroy(ce->annotations);
 			efree(ce->name);
 			zend_hash_destroy(&ce->function_table);
 			FREE_HASHTABLE(ce->static_members);
+			FREE_HASHTABLE(ce->annotations);
 			zend_hash_destroy(&ce->constants_table);
 			if (ce->num_interfaces > 0 && ce->interfaces) {
 				efree(ce->interfaces);
@@ -176,9 +185,11 @@
 			zend_hash_destroy(&ce->default_properties);
 			zend_hash_destroy(&ce->properties_info);
 			zend_hash_destroy(ce->static_members);
+			zend_hash_destroy(ce->annotations);
 			free(ce->name);
 			zend_hash_destroy(&ce->function_table);
 			free(ce->static_members);
+			free(ce->annotations);
 			zend_hash_destroy(&ce->constants_table);
 			if (ce->num_interfaces > 0) {
 				free(ce->interfaces);
@@ -206,6 +217,10 @@
 		zend_hash_destroy(op_array->static_variables);
 		FREE_HASHTABLE(op_array->static_variables);
 	}
+	if (op_array->annotations) {
+		zend_hash_destroy(op_array->annotations);
+		FREE_HASHTABLE(op_array->annotations);
+	}
 
 	if (--(*op_array->refcount)>0) {
 		return;
@@ -263,6 +278,12 @@
 		}
 		efree(op_array->arg_info);
 	}
+	if (op_array->num_throws) {
+		for (i=0; i<op_array->num_throws; i++) {
+			efree(op_array->throws[i]);
+		}
+		efree(op_array->throws);
+	}
 }
 
 void init_op(zend_op *op TSRMLS_DC)
Index: Zend/zend_operators.c
===================================================================
RCS file: /repository/ZendEngine2/zend_operators.c,v
retrieving revision 1.204
diff -u -r1.204 zend_operators.c
--- Zend/zend_operators.c	13 Dec 2004 09:09:06 -0000	1.204
+++ Zend/zend_operators.c	11 Jun 2005 23:01:56 -0000
@@ -106,6 +106,55 @@
 	return result;
 }
 
+static inline int call_operator_overloading(char *operator, int operator_len, zval *result, zval *op1, zval *op2, int bail TSRMLS_DC)
+{
+	zend_function *mptr;
+	zval *rval, **params[2];
+	zend_fcall_info fci;
+	zend_fcall_info_cache fcc;
+
+	if (zend_hash_find(&Z_OBJCE_P(op1)->function_table, operator, operator_len, (void **) &mptr) == FAILURE) {
+		if (bail) {
+			zend_error(E_ERROR, "Class %s does not support overloading of the %s operator", Z_OBJCE_P(op1)->name, operator);
+			/* Never returns */
+		}
+		return FAILURE;
+	}
+
+	params[0] = &op1;
+	params[1] = &op2;
+
+	/* Call operator method statically with operands and take its return value
+	 * as return value for the operation.
+	 */
+	fci.size = sizeof(fci);
+	fci.function_table = NULL;
+	fci.function_name = NULL;
+	fci.symbol_table = NULL;
+	fci.object_pp = NULL;
+	fci.retval_ptr_ptr = &rval;
+	fci.param_count = op2 ? 2 : 1;
+	fci.params = params;
+	fci.no_separation = 1;
+
+	fcc.initialized = 1;
+	fcc.function_handler = mptr;
+	fcc.calling_scope = NULL;
+	fcc.object_pp = NULL;
+
+	if (zend_call_function(&fci, &fcc TSRMLS_CC) == FAILURE) {
+		zend_error(E_ERROR, "Could not call operator method %s::%s", Z_OBJCE_P(op1)->name, operator);
+		return FAILURE;
+	}
+
+	if (rval) {
+		*result = *rval;
+		zval_copy_ctor(result);
+		zval_ptr_dtor(&rval);
+	}
+	return SUCCESS;
+}
+
 
 ZEND_API void convert_scalar_to_number(zval *op TSRMLS_DC)
 {
@@ -778,6 +827,9 @@
 		result->value.dval = op1->value.dval + op2->value.dval;
 		return SUCCESS;
 	}
+	if (op1->type == IS_OBJECT) {
+		return call_operator_overloading("+", sizeof("+"), result, op1, op2, 1 TSRMLS_CC);
+	}
 	zend_error(E_ERROR, "Unsupported operand types");
 	return FAILURE;				/* unknown datatype */
 }
@@ -818,6 +870,9 @@
 		result->value.dval = op1->value.dval - op2->value.dval;
 		return SUCCESS;
 	}
+	if (op1->type == IS_OBJECT) {
+		return call_operator_overloading("-", sizeof("-"), result, op1, op2, 1 TSRMLS_CC);
+	}
 	zend_error(E_ERROR, "Unsupported operand types");
 	return FAILURE;				/* unknown datatype */
 }
@@ -850,6 +905,9 @@
 		result->value.dval = op1->value.dval * op2->value.dval;
 		return SUCCESS;
 	}
+	if (op1->type == IS_OBJECT) {
+		return call_operator_overloading("*", sizeof("*"), result, op1, op2, 1 TSRMLS_CC);
+	}
 	zend_error(E_ERROR, "Unsupported operand types");
 	return FAILURE;				/* unknown datatype */
 }
@@ -889,6 +947,9 @@
 		result->value.dval = op1->value.dval / op2->value.dval;
 		return SUCCESS;
 	}
+	if (op1->type == IS_OBJECT) {
+		return call_operator_overloading("/", sizeof("/"), result, op1, op2, 1 TSRMLS_CC);
+	}
 	zend_error(E_ERROR, "Unsupported operand types");
 	return FAILURE;				/* unknown datatype */
 }
@@ -897,6 +958,10 @@
 ZEND_API int mod_function(zval *result, zval *op1, zval *op2 TSRMLS_DC)
 {
 	zval op1_copy, op2_copy;
+
+	if (op1->type == IS_OBJECT) {
+		return call_operator_overloading("%", sizeof("%"), result, op1, op2, 1 TSRMLS_CC);
+	}
 	
 	zendi_convert_to_long(op1, op1_copy, result);
 	zendi_convert_to_long(op2, op2_copy, result);
@@ -934,7 +999,11 @@
 ZEND_API int boolean_not_function(zval *result, zval *op1 TSRMLS_DC)
 {
 	zval op1_copy;
-	
+
+	if (Z_TYPE_P(op1) == IS_OBJECT) {
+		if (call_operator_overloading("!", sizeof("!"), result, op1, NULL, 0 TSRMLS_CC) == SUCCESS) return SUCCESS;
+		/* Fall through in case of failure */
+	}
 	zendi_convert_to_boolean(op1, op1_copy, result);
 
 	result->type = IS_BOOL;
@@ -1328,6 +1397,10 @@
 	}
 
 	if (op1->type==IS_OBJECT && op2->type==IS_OBJECT) {
+		if (SUCCESS == call_operator_overloading("__compare", sizeof("__compare"), result, op1, op2, 0 TSRMLS_CC)) {
+			convert_to_long(result);
+			COMPARE_RETURN_AND_FREE(SUCCESS);
+		}
 		/* If the handlers array is not identical, fall through
 		 * and perform get() or cast() if implemented
 		 */
@@ -1368,13 +1441,19 @@
 		COMPARE_RETURN_AND_FREE(SUCCESS);
 	}
 	if (op1->type==IS_OBJECT) {
-		result->value.lval = 1;
-		result->type = IS_LONG;
+		/* $object == NULL*/
+		if (FAILURE == call_operator_overloading("__compare", sizeof("__compare"), result, op1, op2, 0 TSRMLS_CC)) {
+			result->value.lval = 1;
+			result->type = IS_LONG;
+		}
 		COMPARE_RETURN_AND_FREE(SUCCESS);
 	}
 	if (op2->type==IS_OBJECT) {
-		result->value.lval = -1;
-		result->type = IS_LONG;
+		/* NULL == $object */
+		if (FAILURE == call_operator_overloading("__compare", sizeof("__compare"), result, op2, op1, 0 TSRMLS_CC)) {
+			result->value.lval = -1;
+			result->type = IS_LONG;
+		}
 		COMPARE_RETURN_AND_FREE(SUCCESS);
 	}
 
@@ -1710,6 +1789,12 @@
 				}
 			}
 			break;
+		case IS_OBJECT: {
+				TSRMLS_FETCH();
+			
+				return call_operator_overloading("++", sizeof("++"), op1, op1, NULL, 1 TSRMLS_CC);
+			}
+			break;
 		default:
 			return FAILURE;
 	}
@@ -1759,6 +1844,12 @@
 					break;
 			}
 			break;
+		case IS_OBJECT: {
+				TSRMLS_FETCH();
+			
+				return call_operator_overloading("--", sizeof("--"), op1, op1, NULL, 1 TSRMLS_CC);
+			}
+			break;
 		default:
 			return FAILURE;
 	}
Index: Zend/zend_reflection_api.c
===================================================================
RCS file: /repository/ZendEngine2/zend_reflection_api.c,v
retrieving revision 1.150
diff -u -r1.150 zend_reflection_api.c
--- Zend/zend_reflection_api.c	6 Mar 2005 22:15:35 -0000	1.150
+++ Zend/zend_reflection_api.c	11 Jun 2005 23:01:57 -0000
@@ -70,6 +70,14 @@
 	}                                                                                                       \
 	target = intern->ptr;                                                                                   \
 
+#define UPDATE_ANNOTATION_CONSTANT(value, resolve_scope)                                                    \
+	if (Z_TYPE_PP(value) == IS_CONSTANT_ARRAY || Z_TYPE_PP(value) == IS_CONSTANT) {                         \
+		zend_class_entry *tmpscope = EG(scope);                                                             \
+		EG(scope) = resolve_scope;                                                                          \
+		zval_update_constant(value, (void *) 1 TSRMLS_CC);                                                  \
+		EG(scope) = tmpscope;                                                                               \
+	}
+
 /* {{{ Smart string functions */
 typedef struct _string {
 	char *string;
@@ -248,6 +256,21 @@
 	return object;
 }
 
+static int _update_constant_recursive(zval **pp, void *arg TSRMLS_DC)
+{
+	switch (Z_TYPE_PP(pp)) {
+		case IS_CONSTANT_ARRAY:
+		case IS_CONSTANT:
+			zval_update_constant(pp, arg TSRMLS_CC);
+			break;
+
+		case IS_ARRAY:
+			zend_hash_apply_with_argument(Z_ARRVAL_PP(pp), (apply_func_arg_t) _update_constant_recursive, arg TSRMLS_CC);
+			break;
+	}
+	return 0;
+}
+
 static void _const_string(string *str, char *name, zval *value, char *indent TSRMLS_DC);
 static void _function_string(string *str, zend_function *fptr, char *indent TSRMLS_DC);
 static void _property_string(string *str, zend_property_info *prop, char *prop_name, char* indent TSRMLS_DC);
@@ -631,7 +654,18 @@
 	if (fptr->type == ZEND_USER_FUNCTION && fptr->op_array.return_reference) {
 		string_printf(str, "&");
 	}
-	string_printf(str, "%s ] {\n", fptr->common.function_name);
+	string_printf(str, "%s ]", fptr->common.function_name);
+ 
+ 	if (fptr->common.num_throws) {
+		zend_uint i;
+
+		string_printf(str, " throws %s", fptr->common.throws[0]);
+		for (i = 1; i < fptr->common.num_throws; ++i) {
+			string_printf(str, ", %s", fptr->common.throws[i]);
+		}
+	}
+	string_write(str, " {\n", sizeof(" {\n") - 1);
+
 	/* The information where a function is declared is only available for user classes */
 	if (fptr->type == ZEND_USER_FUNCTION) {
 		string_printf(str, "%s  @@ %s %d - %d\n", indent, 
@@ -1500,7 +1534,7 @@
 }
 /* }}} */
 
-/* {{{ proto public ReflectionParameter[] Reflection_Function::getParameters()
+/* {{{ proto public ReflectionParameter[] ReflectionFunction::getParameters()
    Returns an array of parameter objects for this function */
 ZEND_METHOD(reflection_function, getParameters)
 {
@@ -1527,6 +1561,40 @@
 }
 /* }}} */
 
+/* {{{ proto public ReflectionClass[] ReflectionFunction::getExceptionTypes()
+   Returns an array of interfaces this class implements */
+ZEND_METHOD(reflection_function, getExceptionTypes)
+{
+	reflection_object *intern;
+	zend_function *fptr;
+
+	METHOD_NOTSTATIC_NUMPARAMS(0);
+	GET_REFLECTION_OBJECT_PTR(fptr);
+
+	/* Return an empty array if this class implements no interfaces */
+	array_init(return_value);
+
+	if (fptr->common.num_throws) {
+		zend_uint i;
+
+	   	for (i=0; i < fptr->common.num_throws; i++) {
+			zval *throws;
+			zend_class_entry **pce;
+
+			if (zend_lookup_class(fptr->common.throws[i], strlen(fptr->common.throws[i]), &pce TSRMLS_CC) == FAILURE) {			
+				zend_throw_exception_ex(reflection_exception_ptr, 0 TSRMLS_CC,
+						"Class %s does not exist", fptr->common.throws[i]); 
+				return;
+			}
+
+			ALLOC_ZVAL(throws);
+			zend_reflection_class_factory(*pce, throws TSRMLS_CC);
+			add_next_index_zval(return_value, throws);
+		}
+	}
+}
+/* }}} */
+
 /* {{{ proto public static mixed ReflectionParameter::export(mixed function, mixed parameter [, bool return]) throws ReflectionException
    Exports a reflection object. Returns the output if TRUE is specified for return, printing it otherwise. */
 ZEND_METHOD(reflection_parameter, export)
@@ -2222,6 +2290,98 @@
 }
 /* }}} */
 
+/* {{{ proto public bool ReflectionMethod::hasAnnotation(string name [, string define])
+   Check whether an annotation by a specified name exists */
+ZEND_METHOD(reflection_method, hasAnnotation)
+{
+	reflection_object *intern;
+	zend_function *mptr;
+	char *name, *define = NULL; 
+	int name_len, define_len;
+
+	METHOD_NOTSTATIC;
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s|s", &name, &name_len, &define, &define_len) == FAILURE) {
+		return;
+	}
+	GET_REFLECTION_OBJECT_PTR(mptr);
+
+	if (!(mptr->common.annotations && zend_hash_exists(mptr->common.annotations, name, name_len + 1))) {
+		RETURN_FALSE;
+	}
+
+	if (define) {
+		zval **value;
+
+		zend_hash_find(mptr->common.annotations, name, name_len + 1, (void**) &value);
+		RETVAL_BOOL(Z_TYPE_PP(value) == IS_ARRAY && zend_hash_exists(HASH_OF(*value), define, define_len + 1));
+	} else {
+		RETVAL_BOOL(zend_hash_exists(mptr->common.annotations, name, name_len + 1));
+	}
+}
+/* }}} */
+
+/* {{{ proto public string ReflectionMethod::getAnnotation(string name [, string define]) throws ReflectionException
+   Get annotation by a specified name */
+ZEND_METHOD(reflection_method, getAnnotation)
+{
+	reflection_object *intern;
+	zend_function *mptr;
+	zval **value;
+	char *name, *define = NULL; 
+	int name_len, define_len;
+
+	METHOD_NOTSTATIC;
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s|s", &name, &name_len, &define, &define_len) == FAILURE) {
+		return;
+	}
+	GET_REFLECTION_OBJECT_PTR(mptr);
+
+	if (!(mptr->common.annotations && (zend_hash_find(mptr->common.annotations, name, name_len + 1, (void **) &value) == SUCCESS))) {
+		zend_throw_exception_ex(reflection_exception_ptr, 0 TSRMLS_CC, "Annotation %s does not exist", name);
+		return;
+	}
+
+	if (define) {
+		zval **val = NULL;
+
+		if (!(Z_TYPE_PP(value) == IS_ARRAY && zend_hash_find(HASH_OF(*value), define, define_len + 1, (void **) &val) == SUCCESS)) {
+			zend_throw_exception_ex(reflection_exception_ptr, 0 TSRMLS_CC, "Annotation %s['%s'] does not exist", name, define);
+			return;
+		}
+		UPDATE_ANNOTATION_CONSTANT(val, mptr->common.scope);
+		*return_value = **val;
+	} else {		
+		UPDATE_ANNOTATION_CONSTANT(value, mptr->common.scope);
+		*return_value = **value;
+	}
+	zval_copy_ctor(return_value);
+}
+/* }}} */
+
+/* {{{ proto public array ReflectionMethod::getAnnotations()
+   Get annotations as an associative array (annotation names as keys, their values as values)*/
+ZEND_METHOD(reflection_method, getAnnotations)
+{
+	zval *tmp_copy;
+	reflection_object *intern;
+	zend_function *mptr;
+
+	METHOD_NOTSTATIC;
+	GET_REFLECTION_OBJECT_PTR(mptr);
+
+	array_init(return_value);
+	if (mptr->common.annotations) {
+		zend_class_entry *scope = EG(scope);
+
+		EG(scope) = mptr->common.scope;
+		zend_hash_apply_with_argument(mptr->common.annotations, (apply_func_arg_t) _update_constant_recursive, (void *) 1 TSRMLS_CC);
+		EG(scope) = scope;
+
+		zend_hash_copy(Z_ARRVAL_P(return_value), mptr->common.annotations, (copy_ctor_func_t) zval_add_ref, (void *) &tmp_copy, sizeof(zval *));
+	}
+}
+/* }}} */
+
 /* {{{ proto public static mixed ReflectionClass::export(mixed argument [, bool return]) throws ReflectionException
    Exports a reflection object. Returns the output if TRUE is specified for return, printing it otherwise. */
 ZEND_METHOD(reflection_class, export)
@@ -2549,14 +2709,14 @@
 }
 /* }}} */
 
-/* {{{ proto public bool ReflectionClass::hasMethod(string name)
-   Returns wether a method exists or not */
+/* {{{ proto public ReflectionMethod ReflectionClass::hasMethod(string name)
+   Returns whether a method by a given name exists */
 ZEND_METHOD(reflection_class, hasMethod)
 {
 	reflection_object *intern;
 	zend_class_entry *ce;
 	char *name, *lc_name; 
-	int name_len;
+	int name_len, exists;
 
 	METHOD_NOTSTATIC;
 	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &name, &name_len) == FAILURE) {
@@ -2565,13 +2725,10 @@
 
 	GET_REFLECTION_OBJECT_PTR(ce);
 	lc_name = zend_str_tolower_dup(name, name_len);
-	if (zend_hash_exists(&ce->function_table, lc_name, name_len + 1)) {
-		efree(lc_name);
-		RETURN_TRUE;
-	} else {
-		efree(lc_name);
-		RETURN_FALSE;
-	}
+	exists = zend_hash_exists(&ce->function_table, lc_name, name_len + 1);
+	efree(lc_name);
+
+	RETVAL_BOOL(exists);
 }
 /* }}} */
 
@@ -3109,6 +3266,118 @@
 }
 /* }}} */
 
+/* {{{ proto public string ReflectionClass::getPackage()
+   Returns class' package name or NULL if class is not within a package */
+ZEND_METHOD(reflection_class, getPackage)
+{
+	reflection_object *intern;
+	zend_class_entry *ce;
+	char *package_name;
+
+	METHOD_NOTSTATIC;
+	GET_REFLECTION_OBJECT_PTR(ce);
+
+	if ((package_name = strrchr(ce->name, '~'))) {
+		RETURN_STRINGL(ce->name, ce->name_length - strlen(package_name), 1);
+	}
+	RETURN_NULL();
+}
+/* }}} */
+
+/* {{{ proto public bool ReflectionClass::hasAnnotation(string name [, string define])
+   Check whether an annotation by a specified name exists */
+ZEND_METHOD(reflection_class, hasAnnotation)
+{
+	reflection_object *intern;
+	zend_class_entry *ce;
+	char *name, *define = NULL; 
+	int name_len, define_len;
+
+	METHOD_NOTSTATIC;
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s|s", &name, &name_len, &define, &define_len) == FAILURE) {
+		return;
+	}
+	GET_REFLECTION_OBJECT_PTR(ce);
+
+	if (!zend_hash_exists(ce->annotations, name, name_len + 1)) {
+		RETURN_FALSE;
+	}
+
+	if (define) {
+		zval **value;
+
+		zend_hash_find(ce->annotations, name, name_len + 1, (void**) &value);
+		RETVAL_BOOL(Z_TYPE_PP(value) == IS_ARRAY && zend_hash_exists(HASH_OF(*value), define, define_len + 1));
+	} else {
+		RETURN_TRUE;
+	}
+}
+/* }}} */
+
+/* {{{ proto public string ReflectionClass::getAnnotation(string name [, string define]) throws ReflectionException
+   Get annotation by a specified name */
+ZEND_METHOD(reflection_class, getAnnotation)
+{
+	reflection_object *intern;
+	zend_class_entry *ce;
+	zval **value;
+	char *name, *define = NULL; 
+	int name_len, define_len;
+
+	METHOD_NOTSTATIC;
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s|s", &name, &name_len, &define, &define_len) == FAILURE) {
+		return;
+	}
+	GET_REFLECTION_OBJECT_PTR(ce);
+
+	if (!(zend_hash_find(ce->annotations, name, name_len + 1, (void **) &value) == SUCCESS)) {
+		zend_throw_exception_ex(reflection_exception_ptr, 0 TSRMLS_CC, "Annotation '%s' does not exist", name);
+		return;
+	}
+
+	if (define) {
+		zval **val = NULL;
+		
+		if (!(Z_TYPE_PP(value) == IS_ARRAY && zend_hash_find(HASH_OF(*value), define, define_len + 1, (void **) &val) == SUCCESS)) {
+			zend_throw_exception_ex(reflection_exception_ptr, 0 TSRMLS_CC, "Annotation %s['%s'] does not exist", name, define);
+			return;
+		}
+		UPDATE_ANNOTATION_CONSTANT(val, ce);
+		*return_value = **val;
+	} else {		
+		UPDATE_ANNOTATION_CONSTANT(value, ce);
+		*return_value = **value;
+	}
+
+	zval_copy_ctor(return_value);
+}
+/* }}} */
+
+/* {{{ proto public array ReflectionClass::getAnnotations()
+   Get annotations as an associative array (annotation names as keys, their values as values)*/
+ZEND_METHOD(reflection_class, getAnnotations)
+{
+	zval *tmp_copy;
+	reflection_object *intern;
+	zend_class_entry *ce;
+
+	METHOD_NOTSTATIC;
+	GET_REFLECTION_OBJECT_PTR(ce);
+
+	array_init(return_value);
+	if (ce->annotations) {
+		zend_class_entry *scope = EG(scope);
+
+		EG(scope) = ce;
+		zend_hash_apply_with_argument(ce->annotations, (apply_func_arg_t) _update_constant_recursive, (void *) 1 TSRMLS_CC);
+		EG(scope) = scope;
+
+		zend_hash_copy(Z_ARRVAL_P(return_value), ce->annotations, (copy_ctor_func_t) zval_add_ref, (void *) &tmp_copy, sizeof(zval *));
+	}
+}
+/* }}} */
+
+
 /* {{{ proto public ReflectionExtension|NULL ReflectionClass::getExtension()
    Returns NULL or the extension the class belongs to */
 ZEND_METHOD(reflection_class, getExtension)
@@ -3726,6 +3995,7 @@
 	ZEND_ME(reflection_function, invokeArgs, NULL, 0)
 	ZEND_ME(reflection_function, returnsReference, NULL, 0)
 	ZEND_ME(reflection_function, getParameters, NULL, 0)
+	ZEND_ME(reflection_function, getExceptionTypes, NULL, 0)
 	ZEND_ME(reflection_function, getNumberOfParameters, NULL, 0)
 	ZEND_ME(reflection_function, getNumberOfRequiredParameters, NULL, 0)
 	{NULL, NULL, NULL}
@@ -3747,6 +4017,9 @@
 	ZEND_ME(reflection_method, invoke, NULL, 0)
 	ZEND_ME(reflection_method, invokeArgs, NULL, 0)
 	ZEND_ME(reflection_method, getDeclaringClass, NULL, 0)
+	ZEND_ME(reflection_method, hasAnnotation, NULL, 0)
+	ZEND_ME(reflection_method, getAnnotation, NULL, 0)
+	ZEND_ME(reflection_method, getAnnotations, NULL, 0)
 	{NULL, NULL, NULL}
 };
 
@@ -3787,9 +4060,13 @@
 	ZEND_ME(reflection_class, setStaticPropertyValue, NULL, 0)
 	ZEND_ME(reflection_class, getDefaultProperties, NULL, 0)
 	ZEND_ME(reflection_class, isIterateable, NULL, 0)
+	ZEND_ME(reflection_class, getPackage, NULL, 0)
 	ZEND_ME(reflection_class, implementsInterface, NULL, 0)
 	ZEND_ME(reflection_class, getExtension, NULL, 0)
 	ZEND_ME(reflection_class, getExtensionName, NULL, 0)
+	ZEND_ME(reflection_class, hasAnnotation, NULL, 0)
+	ZEND_ME(reflection_class, getAnnotation, NULL, 0)
+	ZEND_ME(reflection_class, getAnnotations, NULL, 0)
 	{NULL, NULL, NULL}
 };
 
Index: Zend/zend_vm_def.h
===================================================================
RCS file: /repository/ZendEngine2/zend_vm_def.h,v
retrieving revision 1.18
diff -u -r1.18 zend_vm_def.h
--- Zend/zend_vm_def.h	12 Mar 2005 22:39:04 -0000	1.18
+++ Zend/zend_vm_def.h	11 Jun 2005 23:01:58 -0000
@@ -1655,8 +1655,12 @@
 		EX(fbc) = ce->constructor;
 	}
 
-	EX(calling_scope) = EX(fbc)->common.scope;
+#if DEBUG_ZEND>=2
+	fprintf(stderr, "Setting calling_scope for %s to %s (old: %s)\n", EX(fbc)->common.function_name, ce->name, EX(fbc)->common.scope->name);
+#endif
 
+	EX(calling_scope) = ce;
+    
 	if (EX(fbc)->common.fn_flags & ZEND_ACC_STATIC) {
 		EX(object) = NULL;
 	} else {
@@ -3460,3 +3464,142 @@
 	ZEND_VM_NEXT_OPCODE();
 }
 
+ZEND_VM_HANDLER(150, ZEND_IMPORT, ANY, ANY)
+{
+	char *alias_name;
+	int alias_len;
+	zend_op *opline = EX(opline);
+	zend_class_entry *ce = EX_T(opline->op1.u.var).class_entry;
+
+	switch (OP2_TYPE) {
+		/* This is the case for:
+		 *   import package~ClassName;
+		 *   import $classname;
+		 * Calculate the short name from the long one
+		 *
+		 * When we're importing within a package, op2.u.constant contains
+		 * the package's name as a string - prefix alias name with it.
+		 */
+		case IS_UNUSED: {
+			if (opline->op2.u.constant.type == IS_STRING) {
+				if (!memchr(ce->name, '~', ce->name_length)) {		/* import main~RuntimeError; */
+					alias_len = opline->op2.u.constant.value.str.len + ce->name_length + 1;
+					alias_name = (char*) emalloc(alias_len + 1);
+					memcpy(alias_name, opline->op2.u.constant.value.str.val, opline->op2.u.constant.value.str.len);
+					memcpy(alias_name + opline->op2.u.constant.value.str.len, "~", sizeof("~"));
+					memcpy(alias_name + opline->op2.u.constant.value.str.len + 1, ce->name, ce->name_length);
+				} else {
+					char *tmp = strrchr(ce->name, '~');
+
+					alias_len = opline->op2.u.constant.value.str.len + strlen(tmp);
+					alias_name = (char*) emalloc(alias_len + 1);
+					memcpy(alias_name, opline->op2.u.constant.value.str.val, opline->op2.u.constant.value.str.len);
+					memcpy(alias_name + opline->op2.u.constant.value.str.len, "~", sizeof("~"));
+					memcpy(alias_name + opline->op2.u.constant.value.str.len + 1, tmp+ 1, strlen(tmp) - 1);
+				}
+				alias_name[alias_len]= 0;
+				zend_str_tolower(alias_name, alias_len);
+				efree(opline->op2.u.constant.value.str.val);
+			} else {
+				char *tmp = strrchr(ce->name, '~');
+				if (!tmp) {
+					zend_error(E_COMPILE_ERROR, "Cannot import %s which is not contained in a package", ce->name);
+					/* Bails out */
+				}
+
+				alias_len = strlen(tmp)- 1;		
+				alias_name = zend_str_tolower_dup(tmp+ 1, alias_len);
+			}
+			break;
+		}
+
+		/* This is the case for:
+		 *   import package~ClassName as ShortName;
+		 *   import $classname as ShortName;
+		 * Use the short name supplied.
+		 */
+		case IS_CONST: {
+			alias_name = zend_str_tolower_dup(opline->op2.u.constant.value.str.val, opline->op2.u.constant.value.str.len);
+			alias_len = opline->op2.u.constant.value.str.len;
+			break;
+		}
+
+		/* This is the case for:
+		 *   import package~ClassName as $shortname;
+		 *   import $classname as $shortname;
+		 * Use the short name supplied by the variable
+		 */
+		default: {
+			zend_free_op free_op2;
+			zval *class_name = GET_OP2_ZVAL_PTR(BP_VAR_R);
+			
+			convert_to_string(class_name);
+
+			if (memchr(Z_STRVAL_P(class_name), '~', Z_STRLEN_P(class_name))) {
+				zend_error(E_COMPILE_ERROR, "Cannot import %s into a package", ce->name);
+				/* Bails out */
+			}
+
+			alias_name = zend_str_tolower_dup(Z_STRVAL_P(class_name), Z_STRLEN_P(class_name));
+			alias_len = Z_STRLEN_P(class_name);
+
+			FREE_OP2();
+			break;
+		}
+	}
+
+	zend_import_class(ce, alias_name, alias_len TSRMLS_CC);
+	ZEND_VM_NEXT_OPCODE();
+}
+
+ZEND_VM_HANDLER(151, ZEND_COMPARE, CONST|TMP|VAR|CV, CONST|TMP|VAR|CV)
+{
+	zend_op *opline = EX(opline);
+	zend_free_op free_op1, free_op2;
+
+	compare_function(&EX_T(opline->result.u.var).tmp_var,
+		GET_OP1_ZVAL_PTR(BP_VAR_R),
+		GET_OP2_ZVAL_PTR(BP_VAR_R) TSRMLS_CC);
+	FREE_OP1();
+	FREE_OP2();
+	ZEND_VM_NEXT_OPCODE();
+}
+
+ZEND_VM_HANDLER(152, ZEND_INSTANCE_CREATION, ANY, ANY)
+{
+	zend_op *opline = EX(opline);
+	zval *parent_name;
+	zend_free_op free_op2;
+	zend_class_entry *ce;
+
+	parent_name = GET_OP2_ZVAL_PTR(BP_VAR_R);
+
+	ce = zend_fetch_class(opline->op1.u.constant.value.str.val, opline->op1.u.constant.value.str.len, ZEND_FETCH_CLASS_DEFAULT TSRMLS_CC);
+
+	/* Check if we've already done this. We can misuse the final flag for this
+	 * because there is no way in userland to make the class final.
+	 */
+	if (ce->ce_flags & ZEND_ACC_FINAL_CLASS) {
+		EX_T(opline->result.u.var).class_entry = ce;
+		ZEND_VM_NEXT_OPCODE();
+	}
+
+	ce->parent = zend_fetch_class(Z_STRVAL_P(parent_name), Z_STRLEN_P(parent_name), ZEND_FETCH_CLASS_DEFAULT TSRMLS_CC);
+
+	if (ce->parent->ce_flags & ZEND_ACC_INTERFACE) {
+		zend_uint num_interfaces = ++ce->num_interfaces;
+
+		ce->interfaces = (zend_class_entry **) erealloc(ce->interfaces, sizeof(zend_class_entry *) * num_interfaces);
+		ce->interfaces[num_interfaces - 1]= ce->parent;
+		zend_do_implement_interface(ce, ce->parent TSRMLS_CC);
+		ce->parent = NULL;
+	} else {
+		zend_do_inheritance(ce, ce->parent TSRMLS_CC);
+	}
+
+	ce->ce_flags |= ZEND_ACC_FINAL_CLASS;
+	EX_T(opline->result.u.var).class_entry = ce;
+
+	FREE_OP2();
+	ZEND_VM_NEXT_OPCODE();
+}
Index: Zend/zend_vm_execute.h
===================================================================
RCS file: /repository/ZendEngine2/zend_vm_execute.h,v
retrieving revision 1.20
diff -u -r1.20 zend_vm_execute.h
--- Zend/zend_vm_execute.h	12 Mar 2005 22:42:37 -0000	1.20
+++ Zend/zend_vm_execute.h	11 Jun 2005 23:02:03 -0000
@@ -503,6 +503,132 @@
 	ZEND_VM_NEXT_OPCODE();
 }
 
+static int ZEND_IMPORT_SPEC_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
+{
+	char *alias_name;
+	int alias_len;
+	zend_op *opline = EX(opline);
+	zend_class_entry *ce = EX_T(opline->op1.u.var).class_entry;
+
+	switch (opline->op2.op_type) {
+		/* This is the case for:
+		 *   import package~ClassName;
+		 *   import $classname;
+		 * Calculate the short name from the long one
+		 *
+		 * When we're importing within a package, op2.u.constant contains
+		 * the package's name as a string - prefix alias name with it.
+		 */
+		case IS_UNUSED: {
+			if (opline->op2.u.constant.type == IS_STRING) {
+				if (!memchr(ce->name, '~', ce->name_length)) {		/* import main~RuntimeError; */
+					alias_len = opline->op2.u.constant.value.str.len + ce->name_length + 1;
+					alias_name = (char*) emalloc(alias_len + 1);
+					memcpy(alias_name, opline->op2.u.constant.value.str.val, opline->op2.u.constant.value.str.len);
+					memcpy(alias_name + opline->op2.u.constant.value.str.len, "~", sizeof("~"));
+					memcpy(alias_name + opline->op2.u.constant.value.str.len + 1, ce->name, ce->name_length);
+				} else {
+					char *tmp = strrchr(ce->name, '~');
+
+					alias_len = opline->op2.u.constant.value.str.len + strlen(tmp);
+					alias_name = (char*) emalloc(alias_len + 1);
+					memcpy(alias_name, opline->op2.u.constant.value.str.val, opline->op2.u.constant.value.str.len);
+					memcpy(alias_name + opline->op2.u.constant.value.str.len, "~", sizeof("~"));
+					memcpy(alias_name + opline->op2.u.constant.value.str.len + 1, tmp+ 1, strlen(tmp) - 1);
+				}
+				alias_name[alias_len]= 0;
+				zend_str_tolower(alias_name, alias_len);
+				efree(opline->op2.u.constant.value.str.val);
+			} else {
+				char *tmp = strrchr(ce->name, '~');
+				if (!tmp) {
+					zend_error(E_COMPILE_ERROR, "Cannot import %s which is not contained in a package", ce->name);
+					/* Bails out */
+				}
+
+				alias_len = strlen(tmp)- 1;		
+				alias_name = zend_str_tolower_dup(tmp+ 1, alias_len);
+			}
+			break;
+		}
+
+		/* This is the case for:
+		 *   import package~ClassName as ShortName;
+		 *   import $classname as ShortName;
+		 * Use the short name supplied.
+		 */
+		case IS_CONST: {
+			alias_name = zend_str_tolower_dup(opline->op2.u.constant.value.str.val, opline->op2.u.constant.value.str.len);
+			alias_len = opline->op2.u.constant.value.str.len;
+			break;
+		}
+
+		/* This is the case for:
+		 *   import package~ClassName as $shortname;
+		 *   import $classname as $shortname;
+		 * Use the short name supplied by the variable
+		 */
+		default: {
+			zend_free_op free_op2;
+			zval *class_name = get_zval_ptr(&opline->op2, EX(Ts), &free_op2, BP_VAR_R);
+			
+			convert_to_string(class_name);
+
+			if (memchr(Z_STRVAL_P(class_name), '~', Z_STRLEN_P(class_name))) {
+				zend_error(E_COMPILE_ERROR, "Cannot import %s into a package", ce->name);
+				/* Bails out */
+			}
+
+			alias_name = zend_str_tolower_dup(Z_STRVAL_P(class_name), Z_STRLEN_P(class_name));
+			alias_len = Z_STRLEN_P(class_name);
+
+			FREE_OP(free_op2);
+			break;
+		}
+	}
+
+	zend_import_class(ce, alias_name, alias_len TSRMLS_CC);
+	ZEND_VM_NEXT_OPCODE();
+}
+
+static int ZEND_INSTANCE_CREATION_SPEC_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
+{
+	zend_op *opline = EX(opline);
+	zval *parent_name;
+	zend_free_op free_op2;
+	zend_class_entry *ce;
+
+	parent_name = get_zval_ptr(&opline->op2, EX(Ts), &free_op2, BP_VAR_R);
+
+	ce = zend_fetch_class(opline->op1.u.constant.value.str.val, opline->op1.u.constant.value.str.len, ZEND_FETCH_CLASS_DEFAULT TSRMLS_CC);
+
+	/* Check if we've already done this. We can misuse the final flag for this
+	 * because there is no way in userland to make the class final.
+	 */
+	if (ce->ce_flags & ZEND_ACC_FINAL_CLASS) {
+		EX_T(opline->result.u.var).class_entry = ce;
+		ZEND_VM_NEXT_OPCODE();
+	}
+
+	ce->parent = zend_fetch_class(Z_STRVAL_P(parent_name), Z_STRLEN_P(parent_name), ZEND_FETCH_CLASS_DEFAULT TSRMLS_CC);
+
+	if (ce->parent->ce_flags & ZEND_ACC_INTERFACE) {
+		zend_uint num_interfaces = ++ce->num_interfaces;
+
+		ce->interfaces = (zend_class_entry **) erealloc(ce->interfaces, sizeof(zend_class_entry *) * num_interfaces);
+		ce->interfaces[num_interfaces - 1]= ce->parent;
+		zend_do_implement_interface(ce, ce->parent TSRMLS_CC);
+		ce->parent = NULL;
+	} else {
+		zend_do_inheritance(ce, ce->parent TSRMLS_CC);
+	}
+
+	ce->ce_flags |= ZEND_ACC_FINAL_CLASS;
+	EX_T(opline->result.u.var).class_entry = ce;
+
+	FREE_OP(free_op2);
+	ZEND_VM_NEXT_OPCODE();
+}
 static int ZEND_FETCH_CLASS_SPEC_CONST_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
 {
 	zend_op *opline = EX(opline);
@@ -574,8 +700,12 @@
 		EX(fbc) = ce->constructor;
 	}
 
-	EX(calling_scope) = EX(fbc)->common.scope;
+#if DEBUG_ZEND>=2
+	fprintf(stderr, "Setting calling_scope for %s to %s (old: %s)\n", EX(fbc)->common.function_name, ce->name, EX(fbc)->common.scope->name);
+#endif
 
+	EX(calling_scope) = ce;
+    
 	if (EX(fbc)->common.fn_flags & ZEND_ACC_STATIC) {
 		EX(object) = NULL;
 	} else {
@@ -772,8 +902,12 @@
 		EX(fbc) = ce->constructor;
 	}
 
-	EX(calling_scope) = EX(fbc)->common.scope;
+#if DEBUG_ZEND>=2
+	fprintf(stderr, "Setting calling_scope for %s to %s (old: %s)\n", EX(fbc)->common.function_name, ce->name, EX(fbc)->common.scope->name);
+#endif
 
+	EX(calling_scope) = ce;
+    
 	if (EX(fbc)->common.fn_flags & ZEND_ACC_STATIC) {
 		EX(object) = NULL;
 	} else {
@@ -927,8 +1061,12 @@
 		EX(fbc) = ce->constructor;
 	}
 
-	EX(calling_scope) = EX(fbc)->common.scope;
+#if DEBUG_ZEND>=2
+	fprintf(stderr, "Setting calling_scope for %s to %s (old: %s)\n", EX(fbc)->common.function_name, ce->name, EX(fbc)->common.scope->name);
+#endif
 
+	EX(calling_scope) = ce;
+    
 	if (EX(fbc)->common.fn_flags & ZEND_ACC_STATIC) {
 		EX(object) = NULL;
 	} else {
@@ -1082,8 +1220,12 @@
 		EX(fbc) = ce->constructor;
 	}
 
-	EX(calling_scope) = EX(fbc)->common.scope;
+#if DEBUG_ZEND>=2
+	fprintf(stderr, "Setting calling_scope for %s to %s (old: %s)\n", EX(fbc)->common.function_name, ce->name, EX(fbc)->common.scope->name);
+#endif
 
+	EX(calling_scope) = ce;
+    
 	if (EX(fbc)->common.fn_flags & ZEND_ACC_STATIC) {
 		EX(object) = NULL;
 	} else {
@@ -1166,8 +1308,12 @@
 		EX(fbc) = ce->constructor;
 	}
 
-	EX(calling_scope) = EX(fbc)->common.scope;
+#if DEBUG_ZEND>=2
+	fprintf(stderr, "Setting calling_scope for %s to %s (old: %s)\n", EX(fbc)->common.function_name, ce->name, EX(fbc)->common.scope->name);
+#endif
 
+	EX(calling_scope) = ce;
+    
 	if (EX(fbc)->common.fn_flags & ZEND_ACC_STATIC) {
 		EX(object) = NULL;
 	} else {
@@ -2520,6 +2666,19 @@
 	return zend_init_add_array_helper_SPEC_CONST_CONST(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);
 }
 
+static int ZEND_COMPARE_SPEC_CONST_CONST_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
+{
+	zend_op *opline = EX(opline);
+	zend_free_op free_op1, free_op2;
+
+	compare_function(&EX_T(opline->result.u.var).tmp_var,
+		_get_zval_ptr_const(&opline->op1, EX(Ts), &free_op1 TSRMLS_CC),
+		_get_zval_ptr_const(&opline->op2, EX(Ts), &free_op2 TSRMLS_CC) TSRMLS_CC);
+	;
+	;
+	ZEND_VM_NEXT_OPCODE();
+}
+
 static int ZEND_ADD_SPEC_CONST_TMP_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
 {
 	zend_op *opline = EX(opline);
@@ -2872,6 +3031,19 @@
 	return zend_init_add_array_helper_SPEC_CONST_TMP(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);
 }
 
+static int ZEND_COMPARE_SPEC_CONST_TMP_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
+{
+	zend_op *opline = EX(opline);
+	zend_free_op free_op1, free_op2;
+
+	compare_function(&EX_T(opline->result.u.var).tmp_var,
+		_get_zval_ptr_const(&opline->op1, EX(Ts), &free_op1 TSRMLS_CC),
+		_get_zval_ptr_tmp(&opline->op2, EX(Ts), &free_op2 TSRMLS_CC) TSRMLS_CC);
+	;
+	zval_dtor(free_op2.var);
+	ZEND_VM_NEXT_OPCODE();
+}
+
 static int ZEND_ADD_SPEC_CONST_VAR_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
 {
 	zend_op *opline = EX(opline);
@@ -3224,6 +3396,19 @@
 	return zend_init_add_array_helper_SPEC_CONST_VAR(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);
 }
 
+static int ZEND_COMPARE_SPEC_CONST_VAR_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
+{
+	zend_op *opline = EX(opline);
+	zend_free_op free_op1, free_op2;
+
+	compare_function(&EX_T(opline->result.u.var).tmp_var,
+		_get_zval_ptr_const(&opline->op1, EX(Ts), &free_op1 TSRMLS_CC),
+		_get_zval_ptr_var(&opline->op2, EX(Ts), &free_op2 TSRMLS_CC) TSRMLS_CC);
+	;
+	if (free_op2.var) {zval_ptr_dtor(&free_op2.var);};
+	ZEND_VM_NEXT_OPCODE();
+}
+
 static int zend_init_add_array_helper_SPEC_CONST_UNUSED(ZEND_OPCODE_HANDLER_ARGS)
 {
 	zend_op *opline = EX(opline);
@@ -3662,6 +3847,19 @@
 	return zend_init_add_array_helper_SPEC_CONST_CV(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);
 }
 
+static int ZEND_COMPARE_SPEC_CONST_CV_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
+{
+	zend_op *opline = EX(opline);
+	zend_free_op free_op1, free_op2;
+
+	compare_function(&EX_T(opline->result.u.var).tmp_var,
+		_get_zval_ptr_const(&opline->op1, EX(Ts), &free_op1 TSRMLS_CC),
+		_get_zval_ptr_cv(&opline->op2, EX(Ts), &free_op2, BP_VAR_R TSRMLS_CC) TSRMLS_CC);
+	;
+	;
+	ZEND_VM_NEXT_OPCODE();
+}
+
 static int ZEND_BW_NOT_SPEC_TMP_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
 {
 	zend_op *opline = EX(opline);
@@ -5070,6 +5268,19 @@
 	return zend_init_add_array_helper_SPEC_TMP_CONST(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);
 }
 
+static int ZEND_COMPARE_SPEC_TMP_CONST_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
+{
+	zend_op *opline = EX(opline);
+	zend_free_op free_op1, free_op2;
+
+	compare_function(&EX_T(opline->result.u.var).tmp_var,
+		_get_zval_ptr_tmp(&opline->op1, EX(Ts), &free_op1 TSRMLS_CC),
+		_get_zval_ptr_const(&opline->op2, EX(Ts), &free_op2 TSRMLS_CC) TSRMLS_CC);
+	zval_dtor(free_op1.var);
+	;
+	ZEND_VM_NEXT_OPCODE();
+}
+
 static int ZEND_ADD_SPEC_TMP_TMP_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
 {
 	zend_op *opline = EX(opline);
@@ -5514,6 +5725,19 @@
 	return zend_init_add_array_helper_SPEC_TMP_TMP(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);
 }
 
+static int ZEND_COMPARE_SPEC_TMP_TMP_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
+{
+	zend_op *opline = EX(opline);
+	zend_free_op free_op1, free_op2;
+
+	compare_function(&EX_T(opline->result.u.var).tmp_var,
+		_get_zval_ptr_tmp(&opline->op1, EX(Ts), &free_op1 TSRMLS_CC),
+		_get_zval_ptr_tmp(&opline->op2, EX(Ts), &free_op2 TSRMLS_CC) TSRMLS_CC);
+	zval_dtor(free_op1.var);
+	zval_dtor(free_op2.var);
+	ZEND_VM_NEXT_OPCODE();
+}
+
 static int ZEND_ADD_SPEC_TMP_VAR_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
 {
 	zend_op *opline = EX(opline);
@@ -5958,6 +6182,19 @@
 	return zend_init_add_array_helper_SPEC_TMP_VAR(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);
 }
 
+static int ZEND_COMPARE_SPEC_TMP_VAR_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
+{
+	zend_op *opline = EX(opline);
+	zend_free_op free_op1, free_op2;
+
+	compare_function(&EX_T(opline->result.u.var).tmp_var,
+		_get_zval_ptr_tmp(&opline->op1, EX(Ts), &free_op1 TSRMLS_CC),
+		_get_zval_ptr_var(&opline->op2, EX(Ts), &free_op2 TSRMLS_CC) TSRMLS_CC);
+	zval_dtor(free_op1.var);
+	if (free_op2.var) {zval_ptr_dtor(&free_op2.var);};
+	ZEND_VM_NEXT_OPCODE();
+}
+
 static int zend_init_add_array_helper_SPEC_TMP_UNUSED(ZEND_OPCODE_HANDLER_ARGS)
 {
 	zend_op *opline = EX(opline);
@@ -6488,6 +6725,19 @@
 	return zend_init_add_array_helper_SPEC_TMP_CV(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);
 }
 
+static int ZEND_COMPARE_SPEC_TMP_CV_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
+{
+	zend_op *opline = EX(opline);
+	zend_free_op free_op1, free_op2;
+
+	compare_function(&EX_T(opline->result.u.var).tmp_var,
+		_get_zval_ptr_tmp(&opline->op1, EX(Ts), &free_op1 TSRMLS_CC),
+		_get_zval_ptr_cv(&opline->op2, EX(Ts), &free_op2, BP_VAR_R TSRMLS_CC) TSRMLS_CC);
+	zval_dtor(free_op1.var);
+	;
+	ZEND_VM_NEXT_OPCODE();
+}
+
 static int ZEND_BW_NOT_SPEC_VAR_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
 {
 	zend_op *opline = EX(opline);
@@ -9123,6 +9373,19 @@
 	return zend_isset_isempty_dim_prop_obj_handler_SPEC_VAR_CONST(1, ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);
 }
 
+static int ZEND_COMPARE_SPEC_VAR_CONST_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
+{
+	zend_op *opline = EX(opline);
+	zend_free_op free_op1, free_op2;
+
+	compare_function(&EX_T(opline->result.u.var).tmp_var,
+		_get_zval_ptr_var(&opline->op1, EX(Ts), &free_op1 TSRMLS_CC),
+		_get_zval_ptr_const(&opline->op2, EX(Ts), &free_op2 TSRMLS_CC) TSRMLS_CC);
+	if (free_op1.var) {zval_ptr_dtor(&free_op1.var);};
+	;
+	ZEND_VM_NEXT_OPCODE();
+}
+
 static int ZEND_ADD_SPEC_VAR_TMP_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
 {
 	zend_op *opline = EX(opline);
@@ -10438,6 +10701,19 @@
 	return zend_isset_isempty_dim_prop_obj_handler_SPEC_VAR_TMP(1, ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);
 }
 
+static int ZEND_COMPARE_SPEC_VAR_TMP_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
+{
+	zend_op *opline = EX(opline);
+	zend_free_op free_op1, free_op2;
+
+	compare_function(&EX_T(opline->result.u.var).tmp_var,
+		_get_zval_ptr_var(&opline->op1, EX(Ts), &free_op1 TSRMLS_CC),
+		_get_zval_ptr_tmp(&opline->op2, EX(Ts), &free_op2 TSRMLS_CC) TSRMLS_CC);
+	if (free_op1.var) {zval_ptr_dtor(&free_op1.var);};
+	zval_dtor(free_op2.var);
+	ZEND_VM_NEXT_OPCODE();
+}
+
 static int ZEND_ADD_SPEC_VAR_VAR_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
 {
 	zend_op *opline = EX(opline);
@@ -11774,6 +12050,19 @@
 	return zend_isset_isempty_dim_prop_obj_handler_SPEC_VAR_VAR(1, ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);
 }
 
+static int ZEND_COMPARE_SPEC_VAR_VAR_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
+{
+	zend_op *opline = EX(opline);
+	zend_free_op free_op1, free_op2;
+
+	compare_function(&EX_T(opline->result.u.var).tmp_var,
+		_get_zval_ptr_var(&opline->op1, EX(Ts), &free_op1 TSRMLS_CC),
+		_get_zval_ptr_var(&opline->op2, EX(Ts), &free_op2 TSRMLS_CC) TSRMLS_CC);
+	if (free_op1.var) {zval_ptr_dtor(&free_op1.var);};
+	if (free_op2.var) {zval_ptr_dtor(&free_op2.var);};
+	ZEND_VM_NEXT_OPCODE();
+}
+
 static int ZEND_FETCH_DIM_W_SPEC_VAR_UNUSED_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
 {
 	zend_op *opline = EX(opline);
@@ -13240,6 +13529,19 @@
 	return zend_isset_isempty_dim_prop_obj_handler_SPEC_VAR_CV(1, ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);
 }
 
+static int ZEND_COMPARE_SPEC_VAR_CV_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
+{
+	zend_op *opline = EX(opline);
+	zend_free_op free_op1, free_op2;
+
+	compare_function(&EX_T(opline->result.u.var).tmp_var,
+		_get_zval_ptr_var(&opline->op1, EX(Ts), &free_op1 TSRMLS_CC),
+		_get_zval_ptr_cv(&opline->op2, EX(Ts), &free_op2, BP_VAR_R TSRMLS_CC) TSRMLS_CC);
+	if (free_op1.var) {zval_ptr_dtor(&free_op1.var);};
+	;
+	ZEND_VM_NEXT_OPCODE();
+}
+
 static int ZEND_CLONE_SPEC_UNUSED_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
 {
 	zend_op *opline = EX(opline);
@@ -19781,6 +20083,19 @@
 	return zend_isset_isempty_dim_prop_obj_handler_SPEC_CV_CONST(1, ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);
 }
 
+static int ZEND_COMPARE_SPEC_CV_CONST_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
+{
+	zend_op *opline = EX(opline);
+	zend_free_op free_op1, free_op2;
+
+	compare_function(&EX_T(opline->result.u.var).tmp_var,
+		_get_zval_ptr_cv(&opline->op1, EX(Ts), &free_op1, BP_VAR_R TSRMLS_CC),
+		_get_zval_ptr_const(&opline->op2, EX(Ts), &free_op2 TSRMLS_CC) TSRMLS_CC);
+	;
+	;
+	ZEND_VM_NEXT_OPCODE();
+}
+
 static int ZEND_ADD_SPEC_CV_TMP_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
 {
 	zend_op *opline = EX(opline);
@@ -21096,6 +21411,19 @@
 	return zend_isset_isempty_dim_prop_obj_handler_SPEC_CV_TMP(1, ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);
 }
 
+static int ZEND_COMPARE_SPEC_CV_TMP_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
+{
+	zend_op *opline = EX(opline);
+	zend_free_op free_op1, free_op2;
+
+	compare_function(&EX_T(opline->result.u.var).tmp_var,
+		_get_zval_ptr_cv(&opline->op1, EX(Ts), &free_op1, BP_VAR_R TSRMLS_CC),
+		_get_zval_ptr_tmp(&opline->op2, EX(Ts), &free_op2 TSRMLS_CC) TSRMLS_CC);
+	;
+	zval_dtor(free_op2.var);
+	ZEND_VM_NEXT_OPCODE();
+}
+
 static int ZEND_ADD_SPEC_CV_VAR_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
 {
 	zend_op *opline = EX(opline);
@@ -22432,6 +22760,19 @@
 	return zend_isset_isempty_dim_prop_obj_handler_SPEC_CV_VAR(1, ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);
 }
 
+static int ZEND_COMPARE_SPEC_CV_VAR_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
+{
+	zend_op *opline = EX(opline);
+	zend_free_op free_op1, free_op2;
+
+	compare_function(&EX_T(opline->result.u.var).tmp_var,
+		_get_zval_ptr_cv(&opline->op1, EX(Ts), &free_op1, BP_VAR_R TSRMLS_CC),
+		_get_zval_ptr_var(&opline->op2, EX(Ts), &free_op2 TSRMLS_CC) TSRMLS_CC);
+	;
+	if (free_op2.var) {zval_ptr_dtor(&free_op2.var);};
+	ZEND_VM_NEXT_OPCODE();
+}
+
 static int ZEND_FETCH_DIM_W_SPEC_CV_UNUSED_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
 {
 	zend_op *opline = EX(opline);
@@ -23898,6 +24239,19 @@
 	return zend_isset_isempty_dim_prop_obj_handler_SPEC_CV_CV(1, ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);
 }
 
+static int ZEND_COMPARE_SPEC_CV_CV_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
+{
+	zend_op *opline = EX(opline);
+	zend_free_op free_op1, free_op2;
+
+	compare_function(&EX_T(opline->result.u.var).tmp_var,
+		_get_zval_ptr_cv(&opline->op1, EX(Ts), &free_op1, BP_VAR_R TSRMLS_CC),
+		_get_zval_ptr_cv(&opline->op2, EX(Ts), &free_op2, BP_VAR_R TSRMLS_CC) TSRMLS_CC);
+	;
+	;
+	ZEND_VM_NEXT_OPCODE();
+}
+
 static int ZEND_NULL_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
 {
 	zend_error_noreturn(E_ERROR, "Invalid opcode %d/%d/%d.", EX(opline)->opcode, EX(opline)->op1.op_type, EX(opline)->op2.op_type);
@@ -27658,6 +28012,81 @@
   	ZEND_HANDLE_EXCEPTION_SPEC_HANDLER,
   	ZEND_HANDLE_EXCEPTION_SPEC_HANDLER,
   	ZEND_HANDLE_EXCEPTION_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_IMPORT_SPEC_HANDLER,
+  	ZEND_COMPARE_SPEC_CONST_CONST_HANDLER,
+  	ZEND_COMPARE_SPEC_CONST_TMP_HANDLER,
+  	ZEND_COMPARE_SPEC_CONST_VAR_HANDLER,
+  	ZEND_NULL_HANDLER,
+  	ZEND_COMPARE_SPEC_CONST_CV_HANDLER,
+  	ZEND_COMPARE_SPEC_TMP_CONST_HANDLER,
+  	ZEND_COMPARE_SPEC_TMP_TMP_HANDLER,
+  	ZEND_COMPARE_SPEC_TMP_VAR_HANDLER,
+  	ZEND_NULL_HANDLER,
+  	ZEND_COMPARE_SPEC_TMP_CV_HANDLER,
+  	ZEND_COMPARE_SPEC_VAR_CONST_HANDLER,
+  	ZEND_COMPARE_SPEC_VAR_TMP_HANDLER,
+  	ZEND_COMPARE_SPEC_VAR_VAR_HANDLER,
+  	ZEND_NULL_HANDLER,
+  	ZEND_COMPARE_SPEC_VAR_CV_HANDLER,
+  	ZEND_NULL_HANDLER,
+  	ZEND_NULL_HANDLER,
+  	ZEND_NULL_HANDLER,
+  	ZEND_NULL_HANDLER,
+  	ZEND_NULL_HANDLER,
+  	ZEND_COMPARE_SPEC_CV_CONST_HANDLER,
+  	ZEND_COMPARE_SPEC_CV_TMP_HANDLER,
+  	ZEND_COMPARE_SPEC_CV_VAR_HANDLER,
+  	ZEND_NULL_HANDLER,
+  	ZEND_COMPARE_SPEC_CV_CV_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
+  	ZEND_INSTANCE_CREATION_SPEC_HANDLER,
   	ZEND_NULL_HANDLER
   };
   zend_opcode_handlers = (opcode_handler_t*)labels;
@@ -29376,8 +29805,12 @@
 		EX(fbc) = ce->constructor;
 	}
 
-	EX(calling_scope) = EX(fbc)->common.scope;
+#if DEBUG_ZEND>=2
+	fprintf(stderr, "Setting calling_scope for %s to %s (old: %s)\n", EX(fbc)->common.function_name, ce->name, EX(fbc)->common.scope->name);
+#endif
 
+	EX(calling_scope) = ce;
+    
 	if (EX(fbc)->common.fn_flags & ZEND_ACC_STATIC) {
 		EX(object) = NULL;
 	} else {
@@ -31181,6 +31614,145 @@
 	ZEND_VM_NEXT_OPCODE();
 }
 
+static int ZEND_IMPORT_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
+{
+	char *alias_name;
+	int alias_len;
+	zend_op *opline = EX(opline);
+	zend_class_entry *ce = EX_T(opline->op1.u.var).class_entry;
+
+	switch (opline->op2.op_type) {
+		/* This is the case for:
+		 *   import package~ClassName;
+		 *   import $classname;
+		 * Calculate the short name from the long one
+		 *
+		 * When we're importing within a package, op2.u.constant contains
+		 * the package's name as a string - prefix alias name with it.
+		 */
+		case IS_UNUSED: {
+			if (opline->op2.u.constant.type == IS_STRING) {
+				if (!memchr(ce->name, '~', ce->name_length)) {		/* import main~RuntimeError; */
+					alias_len = opline->op2.u.constant.value.str.len + ce->name_length + 1;
+					alias_name = (char*) emalloc(alias_len + 1);
+					memcpy(alias_name, opline->op2.u.constant.value.str.val, opline->op2.u.constant.value.str.len);
+					memcpy(alias_name + opline->op2.u.constant.value.str.len, "~", sizeof("~"));
+					memcpy(alias_name + opline->op2.u.constant.value.str.len + 1, ce->name, ce->name_length);
+				} else {
+					char *tmp = strrchr(ce->name, '~');
+
+					alias_len = opline->op2.u.constant.value.str.len + strlen(tmp);
+					alias_name = (char*) emalloc(alias_len + 1);
+					memcpy(alias_name, opline->op2.u.constant.value.str.val, opline->op2.u.constant.value.str.len);
+					memcpy(alias_name + opline->op2.u.constant.value.str.len, "~", sizeof("~"));
+					memcpy(alias_name + opline->op2.u.constant.value.str.len + 1, tmp+ 1, strlen(tmp) - 1);
+				}
+				alias_name[alias_len]= 0;
+				zend_str_tolower(alias_name, alias_len);
+				efree(opline->op2.u.constant.value.str.val);
+			} else {
+				char *tmp = strrchr(ce->name, '~');
+				if (!tmp) {
+					zend_error(E_COMPILE_ERROR, "Cannot import %s which is not contained in a package", ce->name);
+					/* Bails out */
+				}
+
+				alias_len = strlen(tmp)- 1;		
+				alias_name = zend_str_tolower_dup(tmp+ 1, alias_len);
+			}
+			break;
+		}
+
+		/* This is the case for:
+		 *   import package~ClassName as ShortName;
+		 *   import $classname as ShortName;
+		 * Use the short name supplied.
+		 */
+		case IS_CONST: {
+			alias_name = zend_str_tolower_dup(opline->op2.u.constant.value.str.val, opline->op2.u.constant.value.str.len);
+			alias_len = opline->op2.u.constant.value.str.len;
+			break;
+		}
+
+		/* This is the case for:
+		 *   import package~ClassName as $shortname;
+		 *   import $classname as $shortname;
+		 * Use the short name supplied by the variable
+		 */
+		default: {
+			zend_free_op free_op2;
+			zval *class_name = get_zval_ptr(&opline->op2, EX(Ts), &free_op2, BP_VAR_R);
+			
+			convert_to_string(class_name);
+
+			if (memchr(Z_STRVAL_P(class_name), '~', Z_STRLEN_P(class_name))) {
+				zend_error(E_COMPILE_ERROR, "Cannot import %s into a package", ce->name);
+				/* Bails out */
+			}
+
+			alias_name = zend_str_tolower_dup(Z_STRVAL_P(class_name), Z_STRLEN_P(class_name));
+			alias_len = Z_STRLEN_P(class_name);
+
+			FREE_OP(free_op2);
+			break;
+		}
+	}
+
+	zend_import_class(ce, alias_name, alias_len TSRMLS_CC);
+	ZEND_VM_NEXT_OPCODE();
+}
+
+static int ZEND_COMPARE_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
+{
+	zend_op *opline = EX(opline);
+	zend_free_op free_op1, free_op2;
+
+	compare_function(&EX_T(opline->result.u.var).tmp_var,
+		get_zval_ptr(&opline->op1, EX(Ts), &free_op1, BP_VAR_R),
+		get_zval_ptr(&opline->op2, EX(Ts), &free_op2, BP_VAR_R) TSRMLS_CC);
+	FREE_OP(free_op1);
+	FREE_OP(free_op2);
+	ZEND_VM_NEXT_OPCODE();
+}
+
+static int ZEND_INSTANCE_CREATION_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
+{
+	zend_op *opline = EX(opline);
+	zval *parent_name;
+	zend_free_op free_op2;
+	zend_class_entry *ce;
+
+	parent_name = get_zval_ptr(&opline->op2, EX(Ts), &free_op2, BP_VAR_R);
+
+	ce = zend_fetch_class(opline->op1.u.constant.value.str.val, opline->op1.u.constant.value.str.len, ZEND_FETCH_CLASS_DEFAULT TSRMLS_CC);
+
+	/* Check if we've already done this. We can misuse the final flag for this
+	 * because there is no way in userland to make the class final.
+	 */
+	if (ce->ce_flags & ZEND_ACC_FINAL_CLASS) {
+		EX_T(opline->result.u.var).class_entry = ce;
+		ZEND_VM_NEXT_OPCODE();
+	}
+
+	ce->parent = zend_fetch_class(Z_STRVAL_P(parent_name), Z_STRLEN_P(parent_name), ZEND_FETCH_CLASS_DEFAULT TSRMLS_CC);
+
+	if (ce->parent->ce_flags & ZEND_ACC_INTERFACE) {
+		zend_uint num_interfaces = ++ce->num_interfaces;
+
+		ce->interfaces = (zend_class_entry **) erealloc(ce->interfaces, sizeof(zend_class_entry *) * num_interfaces);
+		ce->interfaces[num_interfaces - 1]= ce->parent;
+		zend_do_implement_interface(ce, ce->parent TSRMLS_CC);
+		ce->parent = NULL;
+	} else {
+		zend_do_inheritance(ce, ce->parent TSRMLS_CC);
+	}
+
+	ce->ce_flags |= ZEND_ACC_FINAL_CLASS;
+	EX_T(opline->result.u.var).class_entry = ce;
+
+	FREE_OP(free_op2);
+	ZEND_VM_NEXT_OPCODE();
+}
 
 void zend_vm_use_old_executor()
 {
@@ -31335,6 +31907,9 @@
   	ZEND_ASSIGN_DIM_HANDLER,
   	ZEND_ISSET_ISEMPTY_PROP_OBJ_HANDLER,
   	ZEND_HANDLE_EXCEPTION_HANDLER,
+  	ZEND_IMPORT_HANDLER,
+  	ZEND_COMPARE_HANDLER,
+  	ZEND_INSTANCE_CREATION_HANDLER,
   	ZEND_NULL_HANDLER
   };
   zend_opcode_handlers = (opcode_handler_t*)labels;
Index: Zend/zend_vm_opcodes.h
===================================================================
RCS file: /repository/ZendEngine2/zend_vm_opcodes.h,v
retrieving revision 1.8
diff -u -r1.8 zend_vm_opcodes.h
--- Zend/zend_vm_opcodes.h	24 Feb 2005 08:52:11 -0000	1.8
+++ Zend/zend_vm_opcodes.h	11 Jun 2005 23:02:03 -0000
@@ -147,3 +147,6 @@
 #define ZEND_ASSIGN_DIM              147
 #define ZEND_ISSET_ISEMPTY_PROP_OBJ  148
 #define ZEND_HANDLE_EXCEPTION        149
+#define ZEND_IMPORT                  150
+#define ZEND_COMPARE                 151
+#define ZEND_INSTANCE_CREATION       152
