Syntax enhancements for PHP5: README
========================================================================
$Id$

Annotations
-----------
Metadata may be associated with methods in the following way:

<pre>
  class RmiClient {
    [@remote] public function invoke() {
      // ...
    }
    [@remote,@deprecated('Use invoke() instead')] public function call() {
      return $this->invoke();
    }
  }
</pre>

The reflection API offers the following ways to retrieve these
annotations:

- array ReflectionMethod::getAnnotations()
  Returns an associative array of annotation names and their 
  values.
  
  Example (for the above class' method "call"):
</pre>
  array(2) {
    ["deprecated"]=>
    string(22) "Use invoke() instead"
    ["remote"]=>
    NULL
  }
</pre>

- mixed ReflectionMethod::getAnnotation($name)
  Returns the annotation's value specified by name. Throws a 
  ReflectionException in case the annotation is not found
  
- bool ReflectionMethod::hasAnnotation($name)
  Allows you to check if a annotation exists

See also:
* Annotations in Tiger, Part 1: Add metadata to Java code
  http://www-106.ibm.com/developerworks/library/j-annotate1/?ca=dnt-535


Instance creation expression
----------------------------
A class instance creation expression is used to create new objects that 
are instances of classes.

<pre>
  $list->sort(new Comparator() {
    public function compare($a, $b) {
      return strnatcmp($a, $b);
    }
  });
</pre>

If the name specified after the keyword "new" refers to a class, the 
class being instantiated will extend this class. In case it refers to
an interface, the specified interface will be implemented by the 
class being instantiated.

A userland equivalent of this would be:
<pre>
  function create_instance($name, $arguments, $code) {
    $lambda= uniqid($name);
    eval(sprintf(
      'class %s %s %s %s',
      $lambda,
      interface_exists($name) ? 'implements' : 'extends',
      $name,
      $code
    ));
    return call_user_func_array(
      array(new ReflectionClass($lambda), 'newInstance'),
      $arguments
    );
  }

  $list->sort(create_instance('Comparator', array(), '{
    public function compare($a, $b) {
      return strnatcmp($a, $b);
    }
  }'));
</pre>

<EOF>
