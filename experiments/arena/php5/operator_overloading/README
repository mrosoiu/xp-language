Operator overloading for PHP5: README
========================================================================
$Id$

Introduction
------------
This patch allows user-defined types to overload operators by defining 
static member functions using the operator keyword. Not all operators 
can be overloaded, however.

<pre>
Operators           Overloadability
------------------- ----------------------------------------------------
++, --, !           These unary operators can be overloaded.

+, -, *, /, %       These binary operators can be overloaded.

+=, -=, *=, /=, %=  Assignment operators cannot be overloaded, but +=, 
                    for example, is evaluated using +, which can be 
                    overloaded.

== != < > <= >=     Comparison operators can be overloaded, but only
                    all of them at once, using the compare operator
                    (see below).
</pre>

Basic syntax
------------
The key to operator overloading is the new keyword "operator". Apart
from that, the syntax is equal to that of a normal method declaration:

Abbreviated example:
<pre>
  class Integer {

    public static operator + (Integer $a, Integer $b) {
      return new Integer($a->value + $b->value);
    }
  }
</pre>
  
Comparison operator
-------------------
The comparison operator overloads all comparison operators:
* Equal (==)
* Unequal (!=)
* Greater than (>)
* Less than (<)
* Greater than or equal to (=)
* Less than or equal (<=)

The method must return one of the following:
* If the two values are equal: 0
* If the first value is smaller than the second: -1
* If the first value is bigger than the second: 1

Abbreviated example:
<pre>
  class Integer {
    
    public static operator __compare (Integer $a, Integer $b) {
      if ($a->value < $b->value) return -1;
      if ($a->value == $b->value) return 0;
      if ($a->value > $b->value) return 1;
    }
  }
</pre>

<EOF>
