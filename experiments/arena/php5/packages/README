Packages for PHP5: README
========================================================================
$Id$

Introduction
------------
This patch adds package functionality to the Zend Engine 2 (PHP5).
See also http://zend.com/lists/engine2/200306/msg00050.html (the RFC
for this).

Basic syntax
------------
package <name> {
  class ...
}

Class names
-----------
A class within a package is actually named (in CG(class_table) and
EG(class_table)) <package>~<classname>; the separator being the 
tilde (~).

The tilde is not ambiguous as it is currently allowed only left of
an expression, being a binary operator there. You might know this
from error_reporting(E_ALL & ~E_NOTICE);

Whithin a package you may ommit the fully qualified name in favor
of the "package local" name. To clarify:

  class Test { }

  package PHPUnit {
    class Test { }
    class TestCase extends Test {  }
  }

The class "TestCase" in the package PHPUnit extends the class Test
from the same package, not the "global" one. If you wanted to do this,
you'd have to write:

    class TestCase extends main~Test {  }

instead - "main" is the indicator a class is declared outside of any
package (such as the built-in class Exception, for instance). Thus,
packages may not be called "main".

Examples
--------
Examples can be found at http://sitten-polizei.de/php/packages/

Why are the curly braces necessary?
-----------------------------------
The RFC suggests the following syntax:

<?php
  package <name>;

  class ...
  class ...
?>

My two reasons not choose to add a "block" where:
- One can easily see where a package begins and where it ends
- You can have multiple packages per file

Implementation details
----------------------
One of the problems of the namespace implementation in PHP5 was its
huge overhead; inflecting performance penalties and complicating 
engine code in various places. This patch tries to avoid drastic
changes:

- When the keyword package is found, a compiler global named
  active_package_entry is initialized and its name member set to 
  the package's name.
  
- Class names are prefixed with the current package's name
  in case they are not fully qualified.

  Speaking in PHP's terms, this would be:
  if (!strstr($classname, '~')) 
    $classname= $packagename.'~'.$classname;

- Classes whose names begin with "main~" have it chopped off.
  
  Userland code would look like this:
  if (0 === strpos($classname, 'main~'))
    $classname= substr($classname, 5);

- After the closing bracket for the package is found, 
  CG(active_package_entry) is freed and set to NULL.

That's it! All the magic is done at compile time and with simple
string operations; the performance loss is hardly noticeable; thus,
creating 100.000 objects takes only 50 milliseconds longer
(avg. of 0m4.722s vs 0m4.772s).

The core functionality is provided by the macro MANGLE_CLASS_NAME
in zend_compile.h; small changes to the lexer/scanner and the
new compiler global  CG(active_package_entry).

Making it work
--------------
The patch needs to be applied against a current CVS checkout of PHP5.
Affected files in the Zend/ subdirectory:

zend.h
zend_compile.c
zend_compile.h
zend_globals.h
zend_language_parser.y
zend_language_scanner.l
zend_operators.c

Compile, then run the tests (exceptions.php, indirect.php). Be sure
to do a "make clean" before - the zend_globals struct has been changed
(and therefore its size) - otherwise you'll experience crashes all over
the place.

<EOF>
