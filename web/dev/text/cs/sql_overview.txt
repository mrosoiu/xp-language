Coding standards: SQL
=====================
This document gives an overview about a common way to write SQL,
it is not a standard but a guideline (but should be complied with
anyways).

SQL-Keywords
------------
The XP database classes always prefix your queries with a SQL
keyword whenever you use one of select, insert,
update or delete, so you have to remove it from
your query. This is simply to make sure noone writes an update
within a <tt>select()</tt>-call. So, remove these keywords from
the beginning of your statement.

Database API
------------
The database API has been developed to provide an easy but 
powerful way to use a database. It has some special-purpose 
classes like e.g. [class://rdbms.Transaction Transaction] which 
provides a way to control transactions. Use them!

Database classes
----------------
The framework allows for special classes that represent tables
from a database. In many cases it may be better to use them than
to write the plain SQL in the script.

Variable insertion
------------------
Almost every statement needs to contain values from
variables from a script/program. Often programmers do not
check their variables to make sure they are safe. Thus
scripts are vulnerable to a technique called sql injection. With
the XP database classes one does not have to check every
value for malicious characters manually but he may give hints
about the type of a variable to the class. It uses these hints
to safely include the values at the given positions in the
supplied statement and it will care for safe escaping if
neccessary.
With this technique you can write code more simple to read, so
please use it. Additionally this way of inserting values from
variables into your SQL makes your statements more beautiful
and readable in your code. 

Use comments
------------
Many SQL dialects have the ability to place comments directly
inside your statement. If your rdbms offers such a possibility
- use it. Comments help you to find a paramter or a value in 
your code. Imagine a long insert-statement with <tt>insert table
() values ()</tt> - syntax. Once the variable list grows, you'll have
severe problems to find a value in the <tt>values</tt>-part. With comments
this would not be a problem:

<code>
  insert into foobar (primary_key,
    ts_init,
    valid_from,
    changedby
  ) values (
    %d,  -- primary key
    %s,  -- ts_init
    %s,  -- valid_from
    %s   -- changedby
  )
</code>
See?

Indentation
------------------
Indentation is something many people argue about, because there 
are many different indenting styles and sometimes coding standards
force you to use a style you don't like. But indentation is imporant
to let your code look good. We found the following style to be
nice, thus we are recommending it:
SQL keywords begin at the current depth of indentation, their
parameters are listed below them, with one more level of
indentatation depth. One parameter on one line with all additional
modifiers (e.g. noholdlock).
An exception to the rule is the WHERE-keyword which has
its first parameter on the same line and any following restrictions
on following lines, the prepended and should be indented
with two spaces so all clauses begin on the same column.
An example shows this:

<code>
  select
    a.category_id,
    a.count(*) as cnt
  from
    auftrag a noholdlock,
    vertrag v noholdlock
  where a.vertrag_id= v.vertrag_id
    and v.tarifgruppe_id= XYZ
    and a.category_id= 30001
    and a.valid_from > 'Jan 1 2003 0:00AM'
  order by 
    a.category_id
  having 
    a.count(*) > 1
</code>

The aim
------------------
The "superior" target we follow with these instructions is to
have a common way to write SQL statements. Like coding standards
this SQL-writing, or  SQL-formatting guidelines are supposed to
help this framework to be even more high quality code.
In best-case one should not be able to tell who wrote the SQL.

SQL and database performance
------------------
Good sql code should not only be written in an elegant manner
but also be tweaked to get the most performance out of your rdbms.
Rdbms often include facilities for tweaking a query. When you utilize
a Sybase Server or the MSSQL rdbms, you can enable "debugging"
output by the option set showplan on|off. When enabled the
server prints the plan of any query that is transmitted. Make sure
your query is run on the available indices of the involved tabled. It 
is even better to use clustered indices or primary keys of tables.
