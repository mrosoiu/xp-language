
The type system
===============
Every variable in PHP has a type (regardless of what you've heard before:
PHP is *loosely* typed, not untyped). The following types exist:

<ul>
  <li><tt>string</tt> - Strings</li>
  <li><tt>integer</tt> - Integer numbers, platform-specific</li>
  <li><tt>double</tt> - Floating point numbers</li>
  <li><tt>boolean</tt> - TRUE or FALSE</li>
  <li><tt>array</tt> - Arrays or Hashmaps (or a mix of both)</li>
  <li><tt>null</tt> - The special NULL type</li>
  <li><tt>resource</tt> - Handles to internal data structures</li>
</ul>
On top of these primitive types, one can define classes and interfaces.

<em>See also http://de3.php.net/types for a detailed overview.</em>

Everything is a Type
--------------------
The XP framework represents all types by [class://lang.Type lang.Type]
instances:
<pre>
  lang.Object
  `- lang.Type
     `- lang.Primitive
     `- lang.XPClass
</pre>

Class types
-----------
Classes and interfaces are represented by the [class://lang.XPClass XPClass]
class. Instances of <tt>XPClass</tt> can be retrieved by using its static
<tt>forName()</tt> method and specifying the class name or by calling the
instance method <tt>getClass()</tt> on any object:

<code>
  XPClass::forName('lang.Object');  // Represents the lang.Object class
  create(new Object())->getClass(); // (same)
</code>


Hierarchy
---------
Every class has the root class [class://lang.Object lang.Object].

<em>Unfortunately, there is an exception: The [class://lang.Throwable lang.Throwable]
class extends the built-in <tt>Exception</tt> class due to PHP's ridiculous
requirement that anything that can be thrown needs to be a subclass of that!</em>


Primitives
----------
The primitive types are represented by the [class://lang.Primitive Primitive]
class:

<code>
  Primitive::$STRING;    // Represents strings
  Primitive::$INTEGER;   // Represents integer numbers
  Primitive::$DOUBLE;    // Represents floating point numbers
  Primitive::$BOOLEAN;   // Represents boolean values
  Primitive::$ARRAY;     // Represents arrays
</code>
<em>The "resource" type has no equivalent</em>.


Wrapper types
-------------
All primitive types have wrapper types representing them. These wrapper
types can be found in the [package://lang.types lang.types package].

The <tt>Primitive</tt> class provides two static methods to convert 
between the primitives and their wrapper equivalents.

Primitives -> Wrappers:
<code>
  Primitive::boxed('hello'); // lang.types.String("hello")
  Primitive::boxed(1);       // lang.types.Integer(1)
</code>

Wrappers -> Primitives:
<code>
  Primitive::unboxed(new String('hello'));  // string(5) "hello"
  Primitive::unboxed(new Integer(1));       // int(1)
</code>
